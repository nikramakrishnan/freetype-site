{
    "docs": [
        {
            "location": "/",
            "text": "FreeType-2.9.1 API Reference\n\u00b6\n\n\nTable of Contents\n\u00b6\n\n\nGeneral Remarks\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFreeType's header inclusion scheme\n\n\nHow client applications should include FreeType header files.\n\n\n\n\n\n\nUser allocation\n\n\nHow client applications should allocate FreeType data structures.\n\n\n\n\n\n\n\n\n\nCore API\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFreeType Version\n\n\nFunctions and macros related to FreeType versions.\n\n\n\n\n\n\nBasic Data Types\n\n\nThe basic data types defined by the library.\n\n\n\n\n\n\nBase Interface\n\n\nThe FreeType\u00a02 base font interface.\n\n\n\n\n\n\nUnicode Variation Sequences\n\n\nThe FreeType\u00a02 interface to Unicode Variation Sequences (UVS), using the SFNT cmap format\u00a014.\n\n\n\n\n\n\nGlyph Management\n\n\nGeneric interface to manage individual glyph data.\n\n\n\n\n\n\nMac Specific Interface\n\n\nOnly available on the Macintosh.\n\n\n\n\n\n\nSize Management\n\n\nManaging multiple sizes per face.\n\n\n\n\n\n\nHeader File Macros\n\n\nMacro definitions used to #include specific header files.\n\n\n\n\n\n\n\n\n\nFormat-Specific API\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultiple Masters\n\n\nHow to manage Multiple Masters fonts.\n\n\n\n\n\n\nTrueType Tables\n\n\nTrueType specific table types and functions.\n\n\n\n\n\n\nType 1 Tables\n\n\nType\u00a01 (PostScript) specific font tables.\n\n\n\n\n\n\nSFNT Names\n\n\nAccess the names embedded in TrueType and OpenType files.\n\n\n\n\n\n\nBDF and PCF Files\n\n\nBDF and PCF specific API.\n\n\n\n\n\n\nCID Fonts\n\n\nCID-keyed font specific API.\n\n\n\n\n\n\nPFR Fonts\n\n\nPFR/TrueDoc specific API.\n\n\n\n\n\n\nWindow FNT Files\n\n\nWindows FNT specific API.\n\n\n\n\n\n\nFont Formats\n\n\nGetting the font format.\n\n\n\n\n\n\nGasp Table\n\n\nRetrieving TrueType \u2018gasp\u2019 table entries.\n\n\n\n\n\n\n\n\n\nControlling FreeType Modules\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe auto-hinter\n\n\nControlling the auto-hinting module.\n\n\n\n\n\n\nThe CFF driver\n\n\nControlling the CFF driver module.\n\n\n\n\n\n\nThe Type 1 and CID drivers\n\n\nControlling the Type\u00a01 and CID driver modules.\n\n\n\n\n\n\nThe TrueType driver\n\n\nControlling the TrueType driver module.\n\n\n\n\n\n\nThe PCF driver\n\n\nControlling the PCF driver module.\n\n\n\n\n\n\nDriver properties\n\n\nControlling driver modules.\n\n\n\n\n\n\nParameter Tags\n\n\nMacros for driver property and font loading parameter tags.\n\n\n\n\n\n\n\n\n\nCache Sub-System\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCache Sub-System\n\n\nHow to cache face, size, and glyph data with FreeType\u00a02.\n\n\n\n\n\n\n\n\n\nSupport API\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComputations\n\n\nCrunching fixed numbers and vectors.\n\n\n\n\n\n\nList Processing\n\n\nSimple management of lists.\n\n\n\n\n\n\nOutline Processing\n\n\nFunctions to create, transform, and render vectorial glyph images.\n\n\n\n\n\n\nQuick retrieval of advance values\n\n\nRetrieve horizontal and vertical advance values without processing glyph outlines, if possible.\n\n\n\n\n\n\nBitmap Handling\n\n\nHandling FT_Bitmap objects.\n\n\n\n\n\n\nScanline Converter\n\n\nHow vectorial outlines are converted into bitmaps and pixmaps.\n\n\n\n\n\n\nGlyph Stroker\n\n\nGenerating bordered and stroked glyphs.\n\n\n\n\n\n\nSystem Interface\n\n\nHow FreeType manages memory and i/o.\n\n\n\n\n\n\nModule Management\n\n\nHow to add, upgrade, remove, and control modules from FreeType.\n\n\n\n\n\n\nGZIP Streams\n\n\nUsing gzip-compressed font files.\n\n\n\n\n\n\nLZW Streams\n\n\nUsing LZW-compressed font files.\n\n\n\n\n\n\nBZIP2 Streams\n\n\nUsing bzip2-compressed font files.\n\n\n\n\n\n\nLCD Filtering\n\n\nReduce color fringes of subpixel-rendered bitmaps.\n\n\n\n\n\n\n\n\n\nError Codes\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nError Enumerations\n\n\nHow to handle errors and error strings.\n\n\n\n\n\n\nError Code Values\n\n\nAll possible error codes returned by FreeType functions.\n\n\n\n\n\n\n\n\n\nMiscellaneous\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpenType Validation\n\n\nAn API to validate OpenType tables.\n\n\n\n\n\n\nIncremental Loading\n\n\nCustom Glyph Loading.\n\n\n\n\n\n\nThe TrueType Engine\n\n\nTrueType bytecode support.\n\n\n\n\n\n\nGlyph Color Management\n\n\nRetrieving and manipulating OpenType's \u2018CPAL\u2019 table entries.\n\n\n\n\n\n\nTrueTypeGX/AAT Validation\n\n\nAn API to validate TrueTypeGX/AAT tables.",
            "title": "Home"
        },
        {
            "location": "/#freetype-291-api-reference",
            "text": "",
            "title": "FreeType-2.9.1 API Reference"
        },
        {
            "location": "/#table-of-contents",
            "text": "",
            "title": "Table of Contents"
        },
        {
            "location": "/#general-remarks",
            "text": "FreeType's header inclusion scheme  How client applications should include FreeType header files.    User allocation  How client applications should allocate FreeType data structures.",
            "title": "General Remarks"
        },
        {
            "location": "/#core-api",
            "text": "FreeType Version  Functions and macros related to FreeType versions.    Basic Data Types  The basic data types defined by the library.    Base Interface  The FreeType\u00a02 base font interface.    Unicode Variation Sequences  The FreeType\u00a02 interface to Unicode Variation Sequences (UVS), using the SFNT cmap format\u00a014.    Glyph Management  Generic interface to manage individual glyph data.    Mac Specific Interface  Only available on the Macintosh.    Size Management  Managing multiple sizes per face.    Header File Macros  Macro definitions used to #include specific header files.",
            "title": "Core API"
        },
        {
            "location": "/#format-specific-api",
            "text": "Multiple Masters  How to manage Multiple Masters fonts.    TrueType Tables  TrueType specific table types and functions.    Type 1 Tables  Type\u00a01 (PostScript) specific font tables.    SFNT Names  Access the names embedded in TrueType and OpenType files.    BDF and PCF Files  BDF and PCF specific API.    CID Fonts  CID-keyed font specific API.    PFR Fonts  PFR/TrueDoc specific API.    Window FNT Files  Windows FNT specific API.    Font Formats  Getting the font format.    Gasp Table  Retrieving TrueType \u2018gasp\u2019 table entries.",
            "title": "Format-Specific API"
        },
        {
            "location": "/#controlling-freetype-modules",
            "text": "The auto-hinter  Controlling the auto-hinting module.    The CFF driver  Controlling the CFF driver module.    The Type 1 and CID drivers  Controlling the Type\u00a01 and CID driver modules.    The TrueType driver  Controlling the TrueType driver module.    The PCF driver  Controlling the PCF driver module.    Driver properties  Controlling driver modules.    Parameter Tags  Macros for driver property and font loading parameter tags.",
            "title": "Controlling FreeType Modules"
        },
        {
            "location": "/#cache-sub-system",
            "text": "Cache Sub-System  How to cache face, size, and glyph data with FreeType\u00a02.",
            "title": "Cache Sub-System"
        },
        {
            "location": "/#support-api",
            "text": "Computations  Crunching fixed numbers and vectors.    List Processing  Simple management of lists.    Outline Processing  Functions to create, transform, and render vectorial glyph images.    Quick retrieval of advance values  Retrieve horizontal and vertical advance values without processing glyph outlines, if possible.    Bitmap Handling  Handling FT_Bitmap objects.    Scanline Converter  How vectorial outlines are converted into bitmaps and pixmaps.    Glyph Stroker  Generating bordered and stroked glyphs.    System Interface  How FreeType manages memory and i/o.    Module Management  How to add, upgrade, remove, and control modules from FreeType.    GZIP Streams  Using gzip-compressed font files.    LZW Streams  Using LZW-compressed font files.    BZIP2 Streams  Using bzip2-compressed font files.    LCD Filtering  Reduce color fringes of subpixel-rendered bitmaps.",
            "title": "Support API"
        },
        {
            "location": "/#error-codes",
            "text": "Error Enumerations  How to handle errors and error strings.    Error Code Values  All possible error codes returned by FreeType functions.",
            "title": "Error Codes"
        },
        {
            "location": "/#miscellaneous",
            "text": "OpenType Validation  An API to validate OpenType tables.    Incremental Loading  Custom Glyph Loading.    The TrueType Engine  TrueType bytecode support.    Glyph Color Management  Retrieving and manipulating OpenType's \u2018CPAL\u2019 table entries.    TrueTypeGX/AAT Validation  An API to validate TrueTypeGX/AAT tables.",
            "title": "Miscellaneous"
        },
        {
            "location": "/ft2-header_inclusion/",
            "text": "FreeType's header inclusion scheme\n\u00b6\n\n\nTo be as flexible as possible (and for historical reasons), FreeType\nuses a very special inclusion scheme to load header files, for example\n\n\n  #include <ft2build.h>\n\n  #include FT_FREETYPE_H\n  #include FT_OUTLINE_H\n\n\n\n\n\nA compiler and its preprocessor only needs an include path to find the\nfile 'ft2build.h'; the exact locations and names of the other FreeType\nheader files are hidden by preprocessor macro names, loaded by\n'ft2build.h'. The API documentation always gives the header macro name\nneeded for a particular function.",
            "title": "Header Inclusion"
        },
        {
            "location": "/ft2-header_inclusion/#freetypes-header-inclusion-scheme",
            "text": "To be as flexible as possible (and for historical reasons), FreeType\nuses a very special inclusion scheme to load header files, for example    #include <ft2build.h>\n\n  #include FT_FREETYPE_H\n  #include FT_OUTLINE_H  A compiler and its preprocessor only needs an include path to find the\nfile 'ft2build.h'; the exact locations and names of the other FreeType\nheader files are hidden by preprocessor macro names, loaded by\n'ft2build.h'. The API documentation always gives the header macro name\nneeded for a particular function.",
            "title": "FreeType's header inclusion scheme"
        },
        {
            "location": "/ft2-user_allocation/",
            "text": "User allocation\n\u00b6\n\n\nFreeType assumes that structures allocated by the user and passed as\narguments are zeroed out except for the actual data. In other words, it\nis recommended to use 'calloc' (or variants of it) instead of 'malloc'\nfor allocation.",
            "title": "User allocation"
        },
        {
            "location": "/ft2-user_allocation/#user-allocation",
            "text": "FreeType assumes that structures allocated by the user and passed as\narguments are zeroed out except for the actual data. In other words, it\nis recommended to use 'calloc' (or variants of it) instead of 'malloc'\nfor allocation.",
            "title": "User allocation"
        },
        {
            "location": "/ft2-version/",
            "text": "FreeType Version\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nNote that those functions and macros are of limited use because even a\nnew release of FreeType with only documentation changes increases the\nversion number.\n\n\nFT_Library_Version\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\nFT_EXPORT\n(\n \nvoid\n \n)\n\n\nFT_Library_Version\n(\n \nFT_Library\n   \nlibrary\n,\n\n                    \nFT_Int\n      \n*\namajor\n,\n\n                    \nFT_Int\n      \n*\naminor\n,\n\n                    \nFT_Int\n      \n*\napatch\n \n);\n\n\n\n\n\n\nReturn the version of the FreeType library being used. This is useful\nwhen dynamically linking to the library, since one cannot use the macros\n\nFREETYPE_MAJOR\n,\n\nFREETYPE_MINOR\n, and\n\nFREETYPE_PATCH\n.\n\n\ninput\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlibrary\n\n\nA source library handle.\n\n\n\n\n\n\n\n\noutput\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\namajor\n\n\nThe major version number.\n\n\n\n\n\n\naminor\n\n\nThe minor version number.\n\n\n\n\n\n\napatch\n\n\nThe patch version number.\n\n\n\n\n\n\n\n\nnote\n\u00b6\n\n\nThe reason why this function takes a 'library' argument is because\ncertain programs implement library initialization in a custom way that\ndoesn\\'t use\n\nFT_Init_FreeType\n.\n\n\nIn such cases, the library version might not be available before the\nlibrary object has been created.\n\n\nFT_Face_CheckTrueTypePatents\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\nFT_EXPORT\n(\n \nFT_Bool\n \n)\n\n\nFT_Face_CheckTrueTypePatents\n(\n \nFT_Face\n  \nface\n \n);\n\n\n\n\n\n\nDeprecated, does nothing.\n\n\ninput\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nface\n\n\nA face handle.\n\n\n\n\n\n\n\n\nreturn\n\u00b6\n\n\nAlways returns false.\n\n\nnote\n\u00b6\n\n\nSince May 2010, TrueType hinting is no longer patented.\n\n\nsince\n\u00b6\n\n\n2.3.5\n\n\nFT_Face_SetUnpatentedHinting\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\nFT_EXPORT\n(\n \nFT_Bool\n \n)\n\n\nFT_Face_SetUnpatentedHinting\n(\n \nFT_Face\n  \nface\n,\n\n                              \nFT_Bool\n  \nvalue\n \n);\n\n\n\n\n\n\nDeprecated, does nothing.\n\n\ninput\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nface\n\n\nA face handle.\n\n\n\n\n\n\nvalue\n\n\nNew boolean setting.\n\n\n\n\n\n\n\n\nreturn\n\u00b6\n\n\nAlways returns false.\n\n\nnote\n\u00b6\n\n\nSince May 2010, TrueType hinting is no longer patented.\n\n\nsince\n\u00b6\n\n\n2.3.5\n\n\nFREETYPE_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n#define FREETYPE_MAJOR  2\n\n\n#define FREETYPE_MINOR  9\n\n\n#define FREETYPE_PATCH  1\n\n\n\n\n\n\nThese three macros identify the FreeType source code version. Use\n\nFT_Library_Version\n to access\nthem at runtime.\n\n\nvalues\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFREETYPE_MAJOR\n\n\nThe major version number.\n\n\n\n\n\n\nFREETYPE_MINOR\n\n\nThe minor version number.\n\n\n\n\n\n\nFREETYPE_PATCH\n\n\nThe patch level.\n\n\n\n\n\n\n\n\nnote\n\u00b6\n\n\nThe version number of FreeType if built as a dynamic link library with\nthe 'libtool' package is \nnot\n controlled by these three macros.",
            "title": "FreeType Version"
        },
        {
            "location": "/ft2-version/#freetype-version",
            "text": "",
            "title": "FreeType Version"
        },
        {
            "location": "/ft2-version/#synopsis",
            "text": "Note that those functions and macros are of limited use because even a\nnew release of FreeType with only documentation changes increases the\nversion number.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-version/#ft_library_version",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  FT_EXPORT (   void   )  FT_Library_Version (   FT_Library     library , \n                     FT_Int        * amajor , \n                     FT_Int        * aminor , \n                     FT_Int        * apatch   );   Return the version of the FreeType library being used. This is useful\nwhen dynamically linking to the library, since one cannot use the macros FREETYPE_MAJOR , FREETYPE_MINOR , and FREETYPE_PATCH .",
            "title": "FT_Library_Version"
        },
        {
            "location": "/ft2-version/#input",
            "text": "Name  Description      library  A source library handle.",
            "title": "input"
        },
        {
            "location": "/ft2-version/#output",
            "text": "Name  Description      amajor  The major version number.    aminor  The minor version number.    apatch  The patch version number.",
            "title": "output"
        },
        {
            "location": "/ft2-version/#note",
            "text": "The reason why this function takes a 'library' argument is because\ncertain programs implement library initialization in a custom way that\ndoesn\\'t use FT_Init_FreeType .  In such cases, the library version might not be available before the\nlibrary object has been created.",
            "title": "note"
        },
        {
            "location": "/ft2-version/#ft_face_checktruetypepatents",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  FT_EXPORT (   FT_Bool   )  FT_Face_CheckTrueTypePatents (   FT_Face    face   );   Deprecated, does nothing.",
            "title": "FT_Face_CheckTrueTypePatents"
        },
        {
            "location": "/ft2-version/#input_1",
            "text": "Name  Description      face  A face handle.",
            "title": "input"
        },
        {
            "location": "/ft2-version/#return",
            "text": "Always returns false.",
            "title": "return"
        },
        {
            "location": "/ft2-version/#note_1",
            "text": "Since May 2010, TrueType hinting is no longer patented.",
            "title": "note"
        },
        {
            "location": "/ft2-version/#since",
            "text": "2.3.5",
            "title": "since"
        },
        {
            "location": "/ft2-version/#ft_face_setunpatentedhinting",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  FT_EXPORT (   FT_Bool   )  FT_Face_SetUnpatentedHinting (   FT_Face    face , \n                               FT_Bool    value   );   Deprecated, does nothing.",
            "title": "FT_Face_SetUnpatentedHinting"
        },
        {
            "location": "/ft2-version/#input_2",
            "text": "Name  Description      face  A face handle.    value  New boolean setting.",
            "title": "input"
        },
        {
            "location": "/ft2-version/#return_1",
            "text": "Always returns false.",
            "title": "return"
        },
        {
            "location": "/ft2-version/#note_2",
            "text": "Since May 2010, TrueType hinting is no longer patented.",
            "title": "note"
        },
        {
            "location": "/ft2-version/#since_1",
            "text": "2.3.5",
            "title": "since"
        },
        {
            "location": "/ft2-version/#freetype_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  #define FREETYPE_MAJOR  2  #define FREETYPE_MINOR  9  #define FREETYPE_PATCH  1   These three macros identify the FreeType source code version. Use FT_Library_Version  to access\nthem at runtime.",
            "title": "FREETYPE_XXX"
        },
        {
            "location": "/ft2-version/#values",
            "text": "Name  Description      FREETYPE_MAJOR  The major version number.    FREETYPE_MINOR  The minor version number.    FREETYPE_PATCH  The patch level.",
            "title": "values"
        },
        {
            "location": "/ft2-version/#note_3",
            "text": "The version number of FreeType if built as a dynamic link library with\nthe 'libtool' package is  not  controlled by these three macros.",
            "title": "note"
        }
    ]
}