{
    "docs": [
        {
            "location": "/ft2-toc/",
            "text": "Docs\n \u00bb Table of Contents\n\n\n\n\nFreeType-2.9.1 API Reference\n\u00b6\n\n\nTable of Contents\n\u00b6\n\n\nGeneral Remarks\n\u00b6\n\n\n\n\nFreeType's header inclusion scheme\n\n\nHow client applications should include FreeType header files.\n\n\n\nUser allocation\n\n\nHow client applications should allocate FreeType data structures.\n\n\n\n\n\nCore API\n\u00b6\n\n\n\n\nFreeType Version\n\n\nFunctions and macros related to FreeType versions.\n\n\n\nBasic Data Types\n\n\nThe basic data types defined by the library.\n\n\n\nBase Interface\n\n\nThe FreeType\u00a02 base font interface.\n\n\n\nUnicode Variation Sequences\n\n\nThe FreeType\u00a02 interface to Unicode Variation Sequences (UVS), using the SFNT cmap format\u00a014.\n\n\n\nGlyph Management\n\n\nGeneric interface to manage individual glyph data.\n\n\n\nMac Specific Interface\n\n\nOnly available on the Macintosh.\n\n\n\nSize Management\n\n\nManaging multiple sizes per face.\n\n\n\nHeader File Macros\n\n\nMacro definitions used to #include specific header files.\n\n\n\n\n\nFormat-Specific API\n\u00b6\n\n\n\n\nMultiple Masters\n\n\nHow to manage Multiple Masters fonts.\n\n\n\nTrueType Tables\n\n\nTrueType specific table types and functions.\n\n\n\nType 1 Tables\n\n\nType\u00a01 (PostScript) specific font tables.\n\n\n\nSFNT Names\n\n\nAccess the names embedded in TrueType and OpenType files.\n\n\n\nBDF and PCF Files\n\n\nBDF and PCF specific API.\n\n\n\nCID Fonts\n\n\nCID-keyed font specific API.\n\n\n\nPFR Fonts\n\n\nPFR/TrueDoc specific API.\n\n\n\nWindow FNT Files\n\n\nWindows FNT specific API.\n\n\n\nFont Formats\n\n\nGetting the font format.\n\n\n\nGasp Table\n\n\nRetrieving TrueType \u2018gasp\u2019 table entries.\n\n\n\n\n\nControlling FreeType Modules\n\u00b6\n\n\n\n\nThe auto-hinter\n\n\nControlling the auto-hinting module.\n\n\n\nThe CFF driver\n\n\nControlling the CFF driver module.\n\n\n\nThe Type 1 and CID drivers\n\n\nControlling the Type\u00a01 and CID driver modules.\n\n\n\nThe TrueType driver\n\n\nControlling the TrueType driver module.\n\n\n\nThe PCF driver\n\n\nControlling the PCF driver module.\n\n\n\nDriver properties\n\n\nControlling driver modules.\n\n\n\nParameter Tags\n\n\nMacros for driver property and font loading parameter tags.\n\n\n\n\n\nCache Sub-System\n\u00b6\n\n\n\n\nCache Sub-System\n\n\nHow to cache face, size, and glyph data with FreeType\u00a02.\n\n\n\n\n\nSupport API\n\u00b6\n\n\n\n\nComputations\n\n\nCrunching fixed numbers and vectors.\n\n\n\nList Processing\n\n\nSimple management of lists.\n\n\n\nOutline Processing\n\n\nFunctions to create, transform, and render vectorial glyph images.\n\n\n\nQuick retrieval of advance values\n\n\nRetrieve horizontal and vertical advance values without processing glyph outlines, if possible.\n\n\n\nBitmap Handling\n\n\nHandling FT_Bitmap objects.\n\n\n\nScanline Converter\n\n\nHow vectorial outlines are converted into bitmaps and pixmaps.\n\n\n\nGlyph Stroker\n\n\nGenerating bordered and stroked glyphs.\n\n\n\nSystem Interface\n\n\nHow FreeType manages memory and i/o.\n\n\n\nModule Management\n\n\nHow to add, upgrade, remove, and control modules from FreeType.\n\n\n\nGZIP Streams\n\n\nUsing gzip-compressed font files.\n\n\n\nLZW Streams\n\n\nUsing LZW-compressed font files.\n\n\n\nBZIP2 Streams\n\n\nUsing bzip2-compressed font files.\n\n\n\nLCD Filtering\n\n\nRemove color fringes of subpixel-rendered bitmaps.\n\n\n\n\n\nError Codes\n\u00b6\n\n\n\n\nError Enumerations\n\n\nHow to handle errors and error strings.\n\n\n\nError Code Values\n\n\nAll possible error codes returned by FreeType functions.\n\n\n\n\n\nMiscellaneous\n\u00b6\n\n\n\n\nOpenType Validation\n\n\nAn API to validate OpenType tables.\n\n\n\nIncremental Loading\n\n\nCustom Glyph Loading.\n\n\n\nThe TrueType Engine\n\n\nTrueType bytecode support.\n\n\n\nGlyph Color Management\n\n\nRetrieving and manipulating OpenType's \u2018CPAL\u2019 table entries.\n\n\n\nTrueTypeGX/AAT Validation\n\n\nAn API to validate TrueTypeGX/AAT tables.\n\n\n\n\n\nGlobal Index\n\u00b6\n\n\ngenerated on Thu Jun  7 18:31:47 2018",
            "title": "TOC"
        },
        {
            "location": "/ft2-toc/#freetype-291-api-reference",
            "text": "",
            "title": "FreeType-2.9.1 API Reference"
        },
        {
            "location": "/ft2-toc/#table-of-contents",
            "text": "",
            "title": "Table of Contents"
        },
        {
            "location": "/ft2-toc/#general-remarks",
            "text": "FreeType's header inclusion scheme  How client applications should include FreeType header files.  User allocation  How client applications should allocate FreeType data structures.",
            "title": "General Remarks"
        },
        {
            "location": "/ft2-toc/#core-api",
            "text": "FreeType Version  Functions and macros related to FreeType versions.  Basic Data Types  The basic data types defined by the library.  Base Interface  The FreeType\u00a02 base font interface.  Unicode Variation Sequences  The FreeType\u00a02 interface to Unicode Variation Sequences (UVS), using the SFNT cmap format\u00a014.  Glyph Management  Generic interface to manage individual glyph data.  Mac Specific Interface  Only available on the Macintosh.  Size Management  Managing multiple sizes per face.  Header File Macros  Macro definitions used to #include specific header files.",
            "title": "Core API"
        },
        {
            "location": "/ft2-toc/#format-specific-api",
            "text": "Multiple Masters  How to manage Multiple Masters fonts.  TrueType Tables  TrueType specific table types and functions.  Type 1 Tables  Type\u00a01 (PostScript) specific font tables.  SFNT Names  Access the names embedded in TrueType and OpenType files.  BDF and PCF Files  BDF and PCF specific API.  CID Fonts  CID-keyed font specific API.  PFR Fonts  PFR/TrueDoc specific API.  Window FNT Files  Windows FNT specific API.  Font Formats  Getting the font format.  Gasp Table  Retrieving TrueType \u2018gasp\u2019 table entries.",
            "title": "Format-Specific API"
        },
        {
            "location": "/ft2-toc/#controlling-freetype-modules",
            "text": "The auto-hinter  Controlling the auto-hinting module.  The CFF driver  Controlling the CFF driver module.  The Type 1 and CID drivers  Controlling the Type\u00a01 and CID driver modules.  The TrueType driver  Controlling the TrueType driver module.  The PCF driver  Controlling the PCF driver module.  Driver properties  Controlling driver modules.  Parameter Tags  Macros for driver property and font loading parameter tags.",
            "title": "Controlling FreeType Modules"
        },
        {
            "location": "/ft2-toc/#cache-sub-system",
            "text": "Cache Sub-System  How to cache face, size, and glyph data with FreeType\u00a02.",
            "title": "Cache Sub-System"
        },
        {
            "location": "/ft2-toc/#support-api",
            "text": "Computations  Crunching fixed numbers and vectors.  List Processing  Simple management of lists.  Outline Processing  Functions to create, transform, and render vectorial glyph images.  Quick retrieval of advance values  Retrieve horizontal and vertical advance values without processing glyph outlines, if possible.  Bitmap Handling  Handling FT_Bitmap objects.  Scanline Converter  How vectorial outlines are converted into bitmaps and pixmaps.  Glyph Stroker  Generating bordered and stroked glyphs.  System Interface  How FreeType manages memory and i/o.  Module Management  How to add, upgrade, remove, and control modules from FreeType.  GZIP Streams  Using gzip-compressed font files.  LZW Streams  Using LZW-compressed font files.  BZIP2 Streams  Using bzip2-compressed font files.  LCD Filtering  Remove color fringes of subpixel-rendered bitmaps.",
            "title": "Support API"
        },
        {
            "location": "/ft2-toc/#error-codes",
            "text": "Error Enumerations  How to handle errors and error strings.  Error Code Values  All possible error codes returned by FreeType functions.",
            "title": "Error Codes"
        },
        {
            "location": "/ft2-toc/#miscellaneous",
            "text": "OpenType Validation  An API to validate OpenType tables.  Incremental Loading  Custom Glyph Loading.  The TrueType Engine  TrueType bytecode support.  Glyph Color Management  Retrieving and manipulating OpenType's \u2018CPAL\u2019 table entries.  TrueTypeGX/AAT Validation  An API to validate TrueTypeGX/AAT tables.",
            "title": "Miscellaneous"
        },
        {
            "location": "/ft2-toc/#global-index",
            "text": "generated on Thu Jun  7 18:31:47 2018",
            "title": "Global Index"
        },
        {
            "location": "/ft2-index/",
            "text": "Docs\n \u00bb Global Index\n\n\n\n\nFreeType-2.9.1 API Reference\n\u00b6\n\n\n\n\nBDF_PROPERTY_TYPE_ATOM\nFT_KERNING_UNFITTED\nFT_String\n\n\nBDF_PROPERTY_TYPE_CARDINAL\nFT_KERNING_UNSCALED\nFT_Stroker\n\n\nBDF_PROPERTY_TYPE_INTEGER\nFT_Kerning_Mode\nFT_Stroker_BeginSubPath\n\n\nBDF_PROPERTY_TYPE_NONE\nFT_LCD_FILTER_DEFAULT\nFT_Stroker_ConicTo\n\n\nBDF_Property\nFT_LCD_FILTER_H\nFT_Stroker_CubicTo\n\n\nBDF_PropertyRec\nFT_LCD_FILTER_LEGACY\nFT_Stroker_Done\n\n\nBDF_PropertyType\nFT_LCD_FILTER_LEGACY1\nFT_Stroker_EndSubPath\n\n\nCID_FaceDict\nFT_LCD_FILTER_LIGHT\nFT_Stroker_Export\n\n\nCID_FaceDictRec\nFT_LCD_FILTER_NONE\nFT_Stroker_ExportBorder\n\n\nCID_FaceInfo\nFT_LcdFilter\nFT_Stroker_GetBorderCounts\n\n\nCID_FaceInfoRec\nFT_LcdFiveTapFilter\nFT_Stroker_GetCounts\n\n\nCID_FontDict\nFT_LIST_H\nFT_Stroker_LineCap\n\n\nCID_Info\nFT_Library\nFT_Stroker_LineJoin\n\n\ndarkening-parameters\nFT_Library_SetLcdFilter\nFT_Stroker_LineTo\n\n\ndefault-script\nFT_Library_SetLcdFilterWeights\nFT_Stroker_New\n\n\nFREETYPE_MAJOR\nFT_Library_Version\nFT_Stroker_ParseOutline\n\n\nFREETYPE_MINOR\nFT_List\nFT_Stroker_Rewind\n\n\nFREETYPE_PATCH\nFT_List_Add\nFT_Stroker_Set\n\n\nFREETYPE_XXX\nFT_List_Destructor\nFT_StrokerBorder\n\n\nFT_Activate_Size\nFT_List_Finalize\nFT_SUBGLYPH_FLAG_2X2\n\n\nFT_ADVANCE_FLAG_FAST_ONLY\nFT_List_Find\nFT_SUBGLYPH_FLAG_ARGS_ARE_WORDS\n\n\nFT_ADVANCES_H\nFT_List_Insert\nFT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES\n\n\nFT_Add_Default_Modules\nFT_List_Iterate\nFT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID\n\n\nFT_Add_Module\nFT_List_Iterator\nFT_SUBGLYPH_FLAG_SCALE\n\n\nFT_Alloc_Func\nFT_List_Remove\nFT_SUBGLYPH_FLAG_USE_MY_METRICS\n\n\nFT_ANGLE_2PI\nFT_List_Up\nFT_SUBGLYPH_FLAG_XXX\n\n\nFT_ANGLE_PI\nFT_ListNode\nFT_SUBGLYPH_FLAG_XY_SCALE\n\n\nFT_ANGLE_PI2\nFT_ListNodeRec\nFT_SubGlyph\n\n\nFT_ANGLE_PI4\nFT_ListRec\nFT_SYNTHESIS_H\n\n\nFT_Angle\nFT_LOAD_BITMAP_METRICS_ONLY\nFT_SYSTEM_H\n\n\nFT_Angle_Diff\nFT_LOAD_COLOR\nFT_Tag\n\n\nFT_Atan2\nFT_LOAD_COMPUTE_METRICS\nFT_Tan\n\n\nFT_Attach_File\nFT_LOAD_CROP_BITMAP\nFT_TRIGONOMETRY_H\n\n\nFT_Attach_Stream\nFT_LOAD_DEFAULT\nFT_TRUETYPE_DRIVER_H\n\n\nFT_AUTOHINTER_H\nFT_LOAD_FORCE_AUTOHINT\nFT_TRUETYPE_ENGINE_TYPE_NONE\n\n\nFT_AUTOHINTER_SCRIPT_CJK\nFT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH\nFT_TRUETYPE_ENGINE_TYPE_PATENTED\n\n\nFT_AUTOHINTER_SCRIPT_INDIC\nFT_LOAD_IGNORE_TRANSFORM\nFT_TRUETYPE_ENGINE_TYPE_UNPATENTED\n\n\nFT_AUTOHINTER_SCRIPT_LATIN\nFT_LOAD_LINEAR_DESIGN\nFT_TRUETYPE_IDS_H\n\n\nFT_AUTOHINTER_SCRIPT_NONE\nFT_LOAD_MONOCHROME\nFT_TRUETYPE_TABLES_H\n\n\nFT_AUTOHINTER_SCRIPT_XXX\nFT_LOAD_NO_AUTOHINT\nFT_TRUETYPE_TAGS_H\n\n\nFT_BBOX_H\nFT_LOAD_NO_BITMAP\nFT_TrueTypeEngineType\n\n\nFT_BBox\nFT_LOAD_NO_HINTING\nFT_TrueTypeGX_Free\n\n\nFT_BDF_H\nFT_LOAD_NO_RECURSE\nFT_TrueTypeGX_Validate\n\n\nFT_BITMAP_H\nFT_LOAD_NO_SCALE\nFT_TYPE1_TABLES_H\n\n\nFT_Bitmap\nFT_LOAD_PEDANTIC\nFT_TYPES_H\n\n\nFT_Bitmap_Convert\nFT_LOAD_RENDER\nFT_UFWord\n\n\nFT_Bitmap_Copy\nFT_LOAD_TARGET_LCD\nFT_UInt\n\n\nFT_Bitmap_Done\nFT_LOAD_TARGET_LCD_V\nFT_UInt16\n\n\nFT_Bitmap_Embolden\nFT_LOAD_TARGET_LIGHT\nFT_UInt32\n\n\nFT_Bitmap_Init\nFT_LOAD_TARGET_MODE\nFT_UInt64\n\n\nFT_Bitmap_Size\nFT_LOAD_TARGET_MONO\nFT_ULong\n\n\nFT_BitmapGlyph\nFT_LOAD_TARGET_NORMAL\nFT_UnitVector\n\n\nFT_BitmapGlyphRec\nFT_LOAD_TARGET_XXX\nFT_UShort\n\n\nFT_Bool\nFT_LOAD_VERTICAL_LAYOUT\nFT_VALIDATE_APPLE\n\n\nFT_Byte\nFT_LOAD_XXX\nFT_VALIDATE_BASE\n\n\nFT_Bytes\nFT_Load_Char\nFT_VALIDATE_bsln\n\n\nFT_BZIP2_H\nFT_Load_Glyph\nFT_VALIDATE_CKERN\n\n\nFT_CACHE_H\nFT_Load_Sfnt_Table\nFT_VALIDATE_CKERNXXX\n\n\nFT_CeilFix\nFT_Long\nFT_VALIDATE_feat\n\n\nFT_CFF_DRIVER_H\nFT_LZW_H\nFT_VALIDATE_GDEF\n\n\nFT_Char\nFT_MAC_H\nFT_VALIDATE_GPOS\n\n\nFT_CharMap\nFT_MAKE_TAG\nFT_VALIDATE_GSUB\n\n\nFT_CharMapRec\nFT_Matrix\nFT_VALIDATE_GX\n\n\nFT_CID_H\nFT_Matrix_Invert\nFT_VALIDATE_GX_LENGTH\n\n\nFT_ClassicKern_Free\nFT_Matrix_Multiply\nFT_VALIDATE_GXXXX\n\n\nFT_ClassicKern_Validate\nFT_Memory\nFT_VALIDATE_JSTF\n\n\nFT_COLOR_H\nFT_MemoryRec\nFT_VALIDATE_just\n\n\nFT_CONFIG_CONFIG_H\nFT_MM_Axis\nFT_VALIDATE_kern\n\n\nFT_CONFIG_MODULES_H\nFT_MM_Var\nFT_VALIDATE_lcar\n\n\nFT_CONFIG_OPTIONS_H\nFT_MODULE_ERRORS_H\nFT_VALIDATE_MATH\n\n\nFT_CONFIG_STANDARD_LIBRARY_H\nFT_MODULE_H\nFT_VALIDATE_MS\n\n\nFT_Color\nFT_Module\nFT_VALIDATE_mort\n\n\nFT_Cos\nFT_Module_Class\nFT_VALIDATE_morx\n\n\nFT_Data\nFT_Module_Constructor\nFT_VALIDATE_OT\n\n\nFT_DivFix\nFT_Module_Destructor\nFT_VALIDATE_OTXXX\n\n\nFT_Done_Face\nFT_Module_Requester\nFT_VALIDATE_opbd\n\n\nFT_Done_FreeType\nFT_MULTIPLE_MASTERS_H\nFT_VALIDATE_prop\n\n\nFT_Done_Glyph\nFT_MulDiv\nFT_VALIDATE_trak\n\n\nFT_Done_Library\nFT_MulFix\nFT_VAR_AXIS_FLAG_HIDDEN\n\n\nFT_Done_MM_Var\nFT_Multi_Master\nFT_VAR_AXIS_FLAG_XXX\n\n\nFT_Done_Size\nFT_New_Face\nFT_Var_Axis\n\n\nFT_DRIVER_H\nFT_New_Face_From_FOND\nFT_Var_Named_Style\n\n\nFT_Driver\nFT_New_Face_From_FSRef\nFT_Vector\n\n\nFT_ENC_TAG\nFT_New_Face_From_FSSpec\nFT_Vector_From_Polar\n\n\nFT_ENCODING_ADOBE_CUSTOM\nFT_New_Library\nFT_Vector_Length\n\n\nFT_ENCODING_ADOBE_EXPERT\nFT_New_Memory_Face\nFT_Vector_Polarize\n\n\nFT_ENCODING_ADOBE_LATIN_1\nFT_New_Size\nFT_Vector_Rotate\n\n\nFT_ENCODING_ADOBE_STANDARD\nFT_Offset\nFT_Vector_Transform\n\n\nFT_ENCODING_APPLE_ROMAN\nFT_OPEN_DRIVER\nFT_Vector_Unit\n\n\nFT_ENCODING_BIG5\nFT_OPEN_MEMORY\nFT_WINFONTS_H\n\n\nFT_ENCODING_JOHAB\nFT_OPEN_PARAMS\nFT_WinFNT_Header\n\n\nFT_ENCODING_MS_BIG5\nFT_OPEN_PATHNAME\nFT_WinFNT_HeaderRec\n\n\nFT_ENCODING_MS_GB2312\nFT_OPEN_STREAM\nFT_WinFNT_ID_CP1250\n\n\nFT_ENCODING_MS_JOHAB\nFT_OPEN_XXX\nFT_WinFNT_ID_CP1251\n\n\nFT_ENCODING_MS_SJIS\nFT_OPENTYPE_VALIDATE_H\nFT_WinFNT_ID_CP1252\n\n\nFT_ENCODING_MS_SYMBOL\nFT_Open_Args\nFT_WinFNT_ID_CP1253\n\n\nFT_ENCODING_MS_WANSUNG\nFT_Open_Face\nFT_WinFNT_ID_CP1254\n\n\nFT_ENCODING_NONE\nFT_OpenType_Free\nFT_WinFNT_ID_CP1255\n\n\nFT_ENCODING_OLD_LATIN_2\nFT_OpenType_Validate\nFT_WinFNT_ID_CP1256\n\n\nFT_ENCODING_PRC\nFT_ORIENTATION_FILL_LEFT\nFT_WinFNT_ID_CP1257\n\n\nFT_ENCODING_SJIS\nFT_ORIENTATION_FILL_RIGHT\nFT_WinFNT_ID_CP1258\n\n\nFT_ENCODING_UNICODE\nFT_ORIENTATION_NONE\nFT_WinFNT_ID_CP1361\n\n\nFT_ENCODING_WANSUNG\nFT_ORIENTATION_POSTSCRIPT\nFT_WinFNT_ID_CP874\n\n\nFT_Encoding\nFT_ORIENTATION_TRUETYPE\nFT_WinFNT_ID_CP932\n\n\nFT_ERRORS_H\nFT_Orientation\nFT_WinFNT_ID_CP936\n\n\nFT_Err_XXX\nFT_OUTLINE_EVEN_ODD_FILL\nFT_WinFNT_ID_CP949\n\n\nFT_Error\nFT_OUTLINE_H\nFT_WinFNT_ID_CP950\n\n\nFT_F26Dot6\nFT_OUTLINE_HIGH_PRECISION\nFT_WinFNT_ID_DEFAULT\n\n\nFT_F2Dot14\nFT_OUTLINE_IGNORE_DROPOUTS\nFT_WinFNT_ID_MAC\n\n\nFT_FACE_FLAG_CID_KEYED\nFT_OUTLINE_INCLUDE_STUBS\nFT_WinFNT_ID_OEM\n\n\nFT_FACE_FLAG_COLOR\nFT_OUTLINE_NONE\nFT_WinFNT_ID_SYMBOL\n\n\nFT_FACE_FLAG_EXTERNAL_STREAM\nFT_OUTLINE_OWNER\nFT_WinFNT_ID_XXX\n\n\nFT_FACE_FLAG_FAST_GLYPHS\nFT_OUTLINE_REVERSE_FILL\nFTC_CMapCache\n\n\nFT_FACE_FLAG_FIXED_SIZES\nFT_OUTLINE_SINGLE_PASS\nFTC_CMapCache_Lookup\n\n\nFT_FACE_FLAG_FIXED_WIDTH\nFT_OUTLINE_SMART_DROPOUTS\nFTC_CMapCache_New\n\n\nFT_FACE_FLAG_GLYPH_NAMES\nFT_OUTLINE_XXX\nFTC_Face_Requester\n\n\nFT_FACE_FLAG_HINTER\nFT_Outline\nFTC_FaceID\n\n\nFT_FACE_FLAG_HORIZONTAL\nFT_Outline_Check\nFTC_ImageCache\n\n\nFT_FACE_FLAG_KERNING\nFT_Outline_ConicToFunc\nFTC_ImageCache_Lookup\n\n\nFT_FACE_FLAG_MULTIPLE_MASTERS\nFT_Outline_Copy\nFTC_ImageCache_LookupScaler\n\n\nFT_FACE_FLAG_SCALABLE\nFT_Outline_CubicToFunc\nFTC_ImageCache_New\n\n\nFT_FACE_FLAG_SFNT\nFT_Outline_Decompose\nFTC_ImageType\n\n\nFT_FACE_FLAG_TRICKY\nFT_Outline_Done\nFTC_ImageTypeRec\n\n\nFT_FACE_FLAG_VARIATION\nFT_Outline_Embolden\nFTC_Manager\n\n\nFT_FACE_FLAG_VERTICAL\nFT_Outline_EmboldenXY\nFTC_Manager_Done\n\n\nFT_FACE_FLAG_XXX\nFT_Outline_Funcs\nFTC_Manager_LookupFace\n\n\nFT_Face\nFT_Outline_Get_BBox\nFTC_Manager_LookupSize\n\n\nFT_Face_CheckTrueTypePatents\nFT_Outline_Get_Bitmap\nFTC_Manager_New\n\n\nFT_Face_GetCharsOfVariant\nFT_Outline_Get_CBox\nFTC_Manager_RemoveFaceID\n\n\nFT_Face_GetCharVariantIndex\nFT_Outline_Get_Orientation\nFTC_Manager_Reset\n\n\nFT_Face_GetCharVariantIsDefault\nFT_Outline_GetInsideBorder\nFTC_Node\n\n\nFT_Face_GetVariantSelectors\nFT_Outline_GetOutsideBorder\nFTC_Node_Unref\n\n\nFT_Face_GetVariantsOfChar\nFT_Outline_LineToFunc\nFTC_SBit\n\n\nFT_Face_Internal\nFT_Outline_MoveToFunc\nFTC_SBitCache\n\n\nFT_Face_Properties\nFT_Outline_New\nFTC_SBitCache_Lookup\n\n\nFT_Face_SetUnpatentedHinting\nFT_Outline_Render\nFTC_SBitCache_LookupScaler\n\n\nFT_FaceRec\nFT_Outline_Reverse\nFTC_SBitCache_New\n\n\nFT_Fixed\nFT_Outline_Transform\nFTC_SBitRec\n\n\nFT_FloorFix\nFT_Outline_Translate\nFTC_Scaler\n\n\nFT_FONT_FORMATS_H\nFT_OutlineGlyph\nFTC_ScalerRec\n\n\nFT_FREETYPE_H\nFT_OutlineGlyphRec\nfallback-script\n\n\nFT_Free_Func\nFT_PALETTE_USABLE_WITH_DARK_BACKGROUND\nglyph-to-script-map\n\n\nFT_FSTYPE_BITMAP_EMBEDDING_ONLY\nFT_PALETTE_USABLE_WITH_LIGHT_BACKGROUND\nhinting-engine\n\n\nFT_FSTYPE_EDITABLE_EMBEDDING\nFT_PALETTE_XXX\nincrease-x-height\n\n\nFT_FSTYPE_INSTALLABLE_EMBEDDING\nFT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY\ninterpreter-version\n\n\nFT_FSTYPE_NO_SUBSETTING\nFT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY\nno-long-family-names\n\n\nFT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING\nFT_PARAM_TAG_INCREMENTAL\nno-stem-darkening\n\n\nFT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING\nFT_PARAM_TAG_LCD_FILTER_WEIGHTS\nPS_DICT_BLUE_FUZZ\n\n\nFT_FSTYPE_XXX\nFT_PARAM_TAG_RANDOM_SEED\nPS_DICT_BLUE_SCALE\n\n\nFT_FWord\nFT_PARAM_TAG_STEM_DARKENING\nPS_DICT_BLUE_SHIFT\n\n\nFT_GASP_DO_GRAY\nFT_PARAM_TAG_UNPATENTED_HINTING\nPS_DICT_BLUE_VALUE\n\n\nFT_GASP_DO_GRIDFIT\nFT_Palette_Get_Entry_Name_IDs\nPS_DICT_CHAR_STRING\n\n\nFT_GASP_H\nFT_Palette_Get_Name_IDs\nPS_DICT_CHAR_STRING_KEY\n\n\nFT_GASP_NO_TABLE\nFT_Palette_Get_Size\nPS_DICT_ENCODING_ENTRY\n\n\nFT_GASP_SYMMETRIC_GRIDFIT\nFT_Palette_Get_Types\nPS_DICT_ENCODING_TYPE\n\n\nFT_GASP_SYMMETRIC_SMOOTHING\nFT_Palette_Select\nPS_DICT_FAMILY_BLUE\n\n\nFT_GASP_XXX\nFT_Palette_Set_Foreground_Color\nPS_DICT_FAMILY_NAME\n\n\nFT_Generic\nFT_Parameter\nPS_DICT_FAMILY_OTHER_BLUE\n\n\nFT_Generic_Finalizer\nFT_PCF_DRIVER_H\nPS_DICT_FONT_BBOX\n\n\nFT_Get_Advance\nFT_PFR_H\nPS_DICT_FONT_MATRIX\n\n\nFT_Get_Advances\nFT_PIXEL_MODE_BGRA\nPS_DICT_FONT_NAME\n\n\nFT_Get_BDF_Charset_ID\nFT_PIXEL_MODE_GRAY\nPS_DICT_FONT_TYPE\n\n\nFT_Get_BDF_Property\nFT_PIXEL_MODE_GRAY2\nPS_DICT_FORCE_BOLD\n\n\nFT_Get_Char_Index\nFT_PIXEL_MODE_GRAY4\nPS_DICT_FS_TYPE\n\n\nFT_Get_Charmap_Index\nFT_PIXEL_MODE_LCD\nPS_DICT_FULL_NAME\n\n\nFT_Get_CID_From_Glyph_Index\nFT_PIXEL_MODE_LCD_V\nPS_DICT_IS_FIXED_PITCH\n\n\nFT_Get_CID_Is_Internally_CID_Keyed\nFT_PIXEL_MODE_MONO\nPS_DICT_ITALIC_ANGLE\n\n\nFT_Get_CID_Registry_Ordering_Supplement\nFT_PIXEL_MODE_NONE\nPS_DICT_LANGUAGE_GROUP\n\n\nFT_Get_CMap_Format\nFT_Pixel_Mode\nPS_DICT_LEN_IV\n\n\nFT_Get_CMap_Language_ID\nFT_Pointer\nPS_DICT_MIN_FEATURE\n\n\nFT_Get_First_Char\nFT_Pos\nPS_DICT_NOTICE\n\n\nFT_Get_Font_Format\nFT_Prop_GlyphToScriptMap\nPS_DICT_NUM_BLUE_VALUES\n\n\nFT_Get_FSType_Flags\nFT_Prop_IncreaseXHeight\nPS_DICT_NUM_CHAR_STRINGS\n\n\nFT_Get_Gasp\nFT_Property_Get\nPS_DICT_NUM_FAMILY_BLUES\n\n\nFT_Get_Glyph\nFT_Property_Set\nPS_DICT_NUM_FAMILY_OTHER_BLUES\n\n\nFT_Get_Glyph_Name\nFT_PtrDist\nPS_DICT_NUM_OTHER_BLUES\n\n\nFT_Get_GlyphLayers\nFT_RASTER_FLAG_AA\nPS_DICT_NUM_STEM_SNAP_H\n\n\nFT_Get_Kerning\nFT_RASTER_FLAG_CLIP\nPS_DICT_NUM_STEM_SNAP_V\n\n\nFT_Get_MM_Blend_Coordinates\nFT_RASTER_FLAG_DEFAULT\nPS_DICT_NUM_SUBRS\n\n\nFT_Get_MM_Var\nFT_RASTER_FLAG_DIRECT\nPS_DICT_OTHER_BLUE\n\n\nFT_Get_Module\nFT_RASTER_FLAG_XXX\nPS_DICT_PAINT_TYPE\n\n\nFT_Get_Multi_Master\nFT_Raster\nPS_DICT_PASSWORD\n\n\nFT_Get_Name_Index\nFT_Raster_BitSet_Func\nPS_DICT_RND_STEM_UP\n\n\nFT_Get_Next_Char\nFT_Raster_BitTest_Func\nPS_DICT_STD_HW\n\n\nFT_Get_PFR_Advance\nFT_Raster_DoneFunc\nPS_DICT_STD_VW\n\n\nFT_Get_PFR_Kerning\nFT_Raster_Funcs\nPS_DICT_STEM_SNAP_H\n\n\nFT_Get_PFR_Metrics\nFT_Raster_NewFunc\nPS_DICT_STEM_SNAP_V\n\n\nFT_Get_Postscript_Name\nFT_Raster_Params\nPS_DICT_SUBR\n\n\nFT_Get_PS_Font_Info\nFT_Raster_RenderFunc\nPS_DICT_UNDERLINE_POSITION\n\n\nFT_Get_PS_Font_Private\nFT_Raster_ResetFunc\nPS_DICT_UNDERLINE_THICKNESS\n\n\nFT_Get_PS_Font_Value\nFT_Raster_SetModeFunc\nPS_DICT_UNIQUE_ID\n\n\nFT_Get_Renderer\nFT_RENDER_H\nPS_DICT_VERSION\n\n\nFT_Get_Sfnt_LangTag\nFT_RENDER_MODE_LCD\nPS_DICT_WEIGHT\n\n\nFT_Get_Sfnt_Name\nFT_RENDER_MODE_LCD_V\nPS_Dict_Keys\n\n\nFT_Get_Sfnt_Name_Count\nFT_RENDER_MODE_LIGHT\nPS_FontInfo\n\n\nFT_Get_Sfnt_Table\nFT_RENDER_MODE_MONO\nPS_FontInfoRec\n\n\nFT_Get_SubGlyph_Info\nFT_RENDER_MODE_NORMAL\nPS_Private\n\n\nFT_Get_Track_Kerning\nFT_Realloc_Func\nPS_PrivateRec\n\n\nFT_Get_TrueType_Engine_Type\nFT_Reference_Face\nrandom-seed\n\n\nFT_Get_Var_Axis_Flags\nFT_Reference_Library\nT1_BLEND_BLUE_SCALE\n\n\nFT_Get_Var_Blend_Coordinates\nFT_Remove_Module\nT1_BLEND_BLUE_SHIFT\n\n\nFT_Get_Var_Design_Coordinates\nFT_Render_Glyph\nT1_BLEND_BLUE_VALUES\n\n\nFT_Get_WinFNT_Header\nFT_Render_Mode\nT1_BLEND_FAMILY_BLUES\n\n\nFT_GetFile_From_Mac_ATS_Name\nFT_Renderer\nT1_BLEND_FAMILY_OTHER_BLUES\n\n\nFT_GetFile_From_Mac_Name\nFT_Renderer_Class\nT1_BLEND_FORCE_BOLD\n\n\nFT_GetFilePath_From_Mac_ATS_Name\nFT_Request_Size\nT1_BLEND_ITALIC_ANGLE\n\n\nFT_GLYPH_BBOX_GRIDFIT\nFT_RoundFix\nT1_BLEND_OTHER_BLUES\n\n\nFT_GLYPH_BBOX_PIXELS\nFT_Select_Charmap\nT1_BLEND_STANDARD_HEIGHT\n\n\nFT_GLYPH_BBOX_SUBPIXELS\nFT_Select_Size\nT1_BLEND_STANDARD_WIDTH\n\n\nFT_GLYPH_BBOX_TRUNCATE\nFT_Set_Char_Size\nT1_BLEND_STEM_SNAP_HEIGHTS\n\n\nFT_GLYPH_BBOX_UNSCALED\nFT_Set_Charmap\nT1_BLEND_STEM_SNAP_WIDTHS\n\n\nFT_GLYPH_FORMAT_BITMAP\nFT_Set_Debug_Hook\nT1_BLEND_UNDERLINE_POSITION\n\n\nFT_GLYPH_FORMAT_COMPOSITE\nFT_Set_Default_Properties\nT1_BLEND_UNDERLINE_THICKNESS\n\n\nFT_GLYPH_FORMAT_NONE\nFT_Set_MM_Blend_Coordinates\nT1_Blend_Flags\n\n\nFT_GLYPH_FORMAT_OUTLINE\nFT_Set_MM_Design_Coordinates\nT1_ENCODING_TYPE_ARRAY\n\n\nFT_GLYPH_FORMAT_PLOTTER\nFT_Set_Named_Instance\nT1_ENCODING_TYPE_EXPERT\n\n\nFT_GLYPH_H\nFT_Set_Pixel_Sizes\nT1_ENCODING_TYPE_ISOLATIN1\n\n\nFT_Glyph\nFT_Set_Renderer\nT1_ENCODING_TYPE_NONE\n\n\nFT_Glyph_BBox_Mode\nFT_Set_Transform\nT1_ENCODING_TYPE_STANDARD\n\n\nFT_Glyph_Copy\nFT_Set_Var_Blend_Coordinates\nT1_EncodingType\n\n\nFT_Glyph_Format\nFT_Set_Var_Design_Coordinates\nT1_FontInfo\n\n\nFT_Glyph_Get_CBox\nFT_SFNT_HEAD\nT1_Private\n\n\nFT_Glyph_Layer\nFT_SFNT_HHEA\nTT_ADOBE_ID_CUSTOM\n\n\nFT_Glyph_LayerRec\nFT_SFNT_MAXP\nTT_ADOBE_ID_EXPERT\n\n\nFT_Glyph_Metrics\nFT_SFNT_NAMES_H\nTT_ADOBE_ID_LATIN_1\n\n\nFT_Glyph_Stroke\nFT_SFNT_OS2\nTT_ADOBE_ID_STANDARD\n\n\nFT_Glyph_StrokeBorder\nFT_SFNT_PCLT\nTT_ADOBE_ID_XXX\n\n\nFT_Glyph_To_Bitmap\nFT_SFNT_POST\nTT_APPLE_ID_DEFAULT\n\n\nFT_Glyph_Transform\nFT_SFNT_VHEA\nTT_APPLE_ID_FULL_UNICODE\n\n\nFT_GlyphRec\nFT_Sfnt_Table_Info\nTT_APPLE_ID_ISO_10646\n\n\nFT_GlyphSlot\nFT_Sfnt_Tag\nTT_APPLE_ID_UNICODE_1_1\n\n\nFT_GlyphSlot_Own_Bitmap\nFT_SfntLangTag\nTT_APPLE_ID_UNICODE_2_0\n\n\nFT_GlyphSlotRec\nFT_SfntName\nTT_APPLE_ID_UNICODE_32\n\n\nFT_GX_VALIDATE_H\nFT_Short\nTT_APPLE_ID_VARIANT_SELECTOR\n\n\nFT_GZIP_H\nFT_SIZE_REQUEST_TYPE_BBOX\nTT_APPLE_ID_XXX\n\n\nFT_Gzip_Uncompress\nFT_SIZE_REQUEST_TYPE_CELL\nTT_Header\n\n\nFT_HAS_COLOR\nFT_SIZE_REQUEST_TYPE_NOMINAL\nTT_HoriHeader\n\n\nFT_HAS_FAST_GLYPHS\nFT_SIZE_REQUEST_TYPE_REAL_DIM\nTT_INTERPRETER_VERSION_35\n\n\nFT_HAS_FIXED_SIZES\nFT_SIZE_REQUEST_TYPE_SCALES\nTT_INTERPRETER_VERSION_38\n\n\nFT_HAS_GLYPH_NAMES\nFT_SIZES_H\nTT_INTERPRETER_VERSION_40\n\n\nFT_HAS_HORIZONTAL\nFT_Sin\nTT_INTERPRETER_VERSION_XXX\n\n\nFT_HAS_KERNING\nFT_Size\nTT_ISO_ID_10646\n\n\nFT_HAS_MULTIPLE_MASTERS\nFT_Size_Internal\nTT_ISO_ID_7BIT_ASCII\n\n\nFT_HAS_VERTICAL\nFT_Size_Metrics\nTT_ISO_ID_8859_1\n\n\nFT_Has_PS_Glyph_Names\nFT_Size_Request\nTT_ISO_ID_XXX\n\n\nFT_HINTING_ADOBE\nFT_Size_Request_Type\nTT_MAC_ID_XXX\n\n\nFT_HINTING_FREETYPE\nFT_Size_RequestRec\nTT_MAC_LANGID_XXX\n\n\nFT_HINTING_XXX\nFT_SizeRec\nTT_MaxProfile\n\n\nFT_IMAGE_H\nFT_Slot_Internal\nTT_MS_ID_BIG_5\n\n\nFT_IMAGE_TAG\nFT_Span\nTT_MS_ID_JOHAB\n\n\nFT_INCREMENTAL_H\nFT_SpanFunc\nTT_MS_ID_PRC\n\n\nFT_Incremental\nFT_STROKER_BORDER_LEFT\nTT_MS_ID_SJIS\n\n\nFT_Incremental_FreeGlyphDataFunc\nFT_STROKER_BORDER_RIGHT\nTT_MS_ID_SYMBOL_CS\n\n\nFT_Incremental_FuncsRec\nFT_STROKER_H\nTT_MS_ID_UCS_4\n\n\nFT_Incremental_GetGlyphDataFunc\nFT_STROKER_LINECAP_BUTT\nTT_MS_ID_UNICODE_CS\n\n\nFT_Incremental_GetGlyphMetricsFunc\nFT_STROKER_LINECAP_ROUND\nTT_MS_ID_WANSUNG\n\n\nFT_Incremental_Interface\nFT_STROKER_LINECAP_SQUARE\nTT_MS_ID_XXX\n\n\nFT_Incremental_InterfaceRec\nFT_STROKER_LINEJOIN_BEVEL\nTT_MS_LANGID_XXX\n\n\nFT_Incremental_Metrics\nFT_STROKER_LINEJOIN_MITER\nTT_NAME_ID_XXX\n\n\nFT_Incremental_MetricsRec\nFT_STROKER_LINEJOIN_MITER_FIXED\nTT_OS2\n\n\nFT_Init_FreeType\nFT_STROKER_LINEJOIN_MITER_VARIABLE\nTT_PCLT\n\n\nFT_Int\nFT_STROKER_LINEJOIN_ROUND\nTT_PLATFORM_ADOBE\n\n\nFT_Int16\nFT_STYLE_FLAG_BOLD\nTT_PLATFORM_APPLE_UNICODE\n\n\nFT_Int32\nFT_STYLE_FLAG_ITALIC\nTT_PLATFORM_CUSTOM\n\n\nFT_Int64\nFT_STYLE_FLAG_XXX\nTT_PLATFORM_ISO\n\n\nFT_IS_CID_KEYED\nFT_Stream\nTT_PLATFORM_MACINTOSH\n\n\nFT_IS_FIXED_WIDTH\nFT_Stream_CloseFunc\nTT_PLATFORM_MICROSOFT\n\n\nFT_IS_NAMED_INSTANCE\nFT_Stream_IoFunc\nTT_PLATFORM_XXX\n\n\nFT_IS_SCALABLE\nFT_Stream_OpenBzip2\nTT_Postscript\n\n\nFT_IS_SFNT\nFT_Stream_OpenGzip\nTT_UCR_XXX\n\n\nFT_IS_TRICKY\nFT_Stream_OpenLZW\nTT_VertHeader\n\n\nFT_IS_VARIATION\nFT_StreamDesc\nwarping\n\n\nFT_KERNING_DEFAULT\nFT_StreamRec\n\n\n\n\n\ngenerated on Thu Jun  7 18:31:47 2018",
            "title": "Index"
        },
        {
            "location": "/ft2-index/#freetype-291-api-reference",
            "text": "BDF_PROPERTY_TYPE_ATOM FT_KERNING_UNFITTED FT_String  BDF_PROPERTY_TYPE_CARDINAL FT_KERNING_UNSCALED FT_Stroker  BDF_PROPERTY_TYPE_INTEGER FT_Kerning_Mode FT_Stroker_BeginSubPath  BDF_PROPERTY_TYPE_NONE FT_LCD_FILTER_DEFAULT FT_Stroker_ConicTo  BDF_Property FT_LCD_FILTER_H FT_Stroker_CubicTo  BDF_PropertyRec FT_LCD_FILTER_LEGACY FT_Stroker_Done  BDF_PropertyType FT_LCD_FILTER_LEGACY1 FT_Stroker_EndSubPath  CID_FaceDict FT_LCD_FILTER_LIGHT FT_Stroker_Export  CID_FaceDictRec FT_LCD_FILTER_NONE FT_Stroker_ExportBorder  CID_FaceInfo FT_LcdFilter FT_Stroker_GetBorderCounts  CID_FaceInfoRec FT_LcdFiveTapFilter FT_Stroker_GetCounts  CID_FontDict FT_LIST_H FT_Stroker_LineCap  CID_Info FT_Library FT_Stroker_LineJoin  darkening-parameters FT_Library_SetLcdFilter FT_Stroker_LineTo  default-script FT_Library_SetLcdFilterWeights FT_Stroker_New  FREETYPE_MAJOR FT_Library_Version FT_Stroker_ParseOutline  FREETYPE_MINOR FT_List FT_Stroker_Rewind  FREETYPE_PATCH FT_List_Add FT_Stroker_Set  FREETYPE_XXX FT_List_Destructor FT_StrokerBorder  FT_Activate_Size FT_List_Finalize FT_SUBGLYPH_FLAG_2X2  FT_ADVANCE_FLAG_FAST_ONLY FT_List_Find FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS  FT_ADVANCES_H FT_List_Insert FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES  FT_Add_Default_Modules FT_List_Iterate FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID  FT_Add_Module FT_List_Iterator FT_SUBGLYPH_FLAG_SCALE  FT_Alloc_Func FT_List_Remove FT_SUBGLYPH_FLAG_USE_MY_METRICS  FT_ANGLE_2PI FT_List_Up FT_SUBGLYPH_FLAG_XXX  FT_ANGLE_PI FT_ListNode FT_SUBGLYPH_FLAG_XY_SCALE  FT_ANGLE_PI2 FT_ListNodeRec FT_SubGlyph  FT_ANGLE_PI4 FT_ListRec FT_SYNTHESIS_H  FT_Angle FT_LOAD_BITMAP_METRICS_ONLY FT_SYSTEM_H  FT_Angle_Diff FT_LOAD_COLOR FT_Tag  FT_Atan2 FT_LOAD_COMPUTE_METRICS FT_Tan  FT_Attach_File FT_LOAD_CROP_BITMAP FT_TRIGONOMETRY_H  FT_Attach_Stream FT_LOAD_DEFAULT FT_TRUETYPE_DRIVER_H  FT_AUTOHINTER_H FT_LOAD_FORCE_AUTOHINT FT_TRUETYPE_ENGINE_TYPE_NONE  FT_AUTOHINTER_SCRIPT_CJK FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH FT_TRUETYPE_ENGINE_TYPE_PATENTED  FT_AUTOHINTER_SCRIPT_INDIC FT_LOAD_IGNORE_TRANSFORM FT_TRUETYPE_ENGINE_TYPE_UNPATENTED  FT_AUTOHINTER_SCRIPT_LATIN FT_LOAD_LINEAR_DESIGN FT_TRUETYPE_IDS_H  FT_AUTOHINTER_SCRIPT_NONE FT_LOAD_MONOCHROME FT_TRUETYPE_TABLES_H  FT_AUTOHINTER_SCRIPT_XXX FT_LOAD_NO_AUTOHINT FT_TRUETYPE_TAGS_H  FT_BBOX_H FT_LOAD_NO_BITMAP FT_TrueTypeEngineType  FT_BBox FT_LOAD_NO_HINTING FT_TrueTypeGX_Free  FT_BDF_H FT_LOAD_NO_RECURSE FT_TrueTypeGX_Validate  FT_BITMAP_H FT_LOAD_NO_SCALE FT_TYPE1_TABLES_H  FT_Bitmap FT_LOAD_PEDANTIC FT_TYPES_H  FT_Bitmap_Convert FT_LOAD_RENDER FT_UFWord  FT_Bitmap_Copy FT_LOAD_TARGET_LCD FT_UInt  FT_Bitmap_Done FT_LOAD_TARGET_LCD_V FT_UInt16  FT_Bitmap_Embolden FT_LOAD_TARGET_LIGHT FT_UInt32  FT_Bitmap_Init FT_LOAD_TARGET_MODE FT_UInt64  FT_Bitmap_Size FT_LOAD_TARGET_MONO FT_ULong  FT_BitmapGlyph FT_LOAD_TARGET_NORMAL FT_UnitVector  FT_BitmapGlyphRec FT_LOAD_TARGET_XXX FT_UShort  FT_Bool FT_LOAD_VERTICAL_LAYOUT FT_VALIDATE_APPLE  FT_Byte FT_LOAD_XXX FT_VALIDATE_BASE  FT_Bytes FT_Load_Char FT_VALIDATE_bsln  FT_BZIP2_H FT_Load_Glyph FT_VALIDATE_CKERN  FT_CACHE_H FT_Load_Sfnt_Table FT_VALIDATE_CKERNXXX  FT_CeilFix FT_Long FT_VALIDATE_feat  FT_CFF_DRIVER_H FT_LZW_H FT_VALIDATE_GDEF  FT_Char FT_MAC_H FT_VALIDATE_GPOS  FT_CharMap FT_MAKE_TAG FT_VALIDATE_GSUB  FT_CharMapRec FT_Matrix FT_VALIDATE_GX  FT_CID_H FT_Matrix_Invert FT_VALIDATE_GX_LENGTH  FT_ClassicKern_Free FT_Matrix_Multiply FT_VALIDATE_GXXXX  FT_ClassicKern_Validate FT_Memory FT_VALIDATE_JSTF  FT_COLOR_H FT_MemoryRec FT_VALIDATE_just  FT_CONFIG_CONFIG_H FT_MM_Axis FT_VALIDATE_kern  FT_CONFIG_MODULES_H FT_MM_Var FT_VALIDATE_lcar  FT_CONFIG_OPTIONS_H FT_MODULE_ERRORS_H FT_VALIDATE_MATH  FT_CONFIG_STANDARD_LIBRARY_H FT_MODULE_H FT_VALIDATE_MS  FT_Color FT_Module FT_VALIDATE_mort  FT_Cos FT_Module_Class FT_VALIDATE_morx  FT_Data FT_Module_Constructor FT_VALIDATE_OT  FT_DivFix FT_Module_Destructor FT_VALIDATE_OTXXX  FT_Done_Face FT_Module_Requester FT_VALIDATE_opbd  FT_Done_FreeType FT_MULTIPLE_MASTERS_H FT_VALIDATE_prop  FT_Done_Glyph FT_MulDiv FT_VALIDATE_trak  FT_Done_Library FT_MulFix FT_VAR_AXIS_FLAG_HIDDEN  FT_Done_MM_Var FT_Multi_Master FT_VAR_AXIS_FLAG_XXX  FT_Done_Size FT_New_Face FT_Var_Axis  FT_DRIVER_H FT_New_Face_From_FOND FT_Var_Named_Style  FT_Driver FT_New_Face_From_FSRef FT_Vector  FT_ENC_TAG FT_New_Face_From_FSSpec FT_Vector_From_Polar  FT_ENCODING_ADOBE_CUSTOM FT_New_Library FT_Vector_Length  FT_ENCODING_ADOBE_EXPERT FT_New_Memory_Face FT_Vector_Polarize  FT_ENCODING_ADOBE_LATIN_1 FT_New_Size FT_Vector_Rotate  FT_ENCODING_ADOBE_STANDARD FT_Offset FT_Vector_Transform  FT_ENCODING_APPLE_ROMAN FT_OPEN_DRIVER FT_Vector_Unit  FT_ENCODING_BIG5 FT_OPEN_MEMORY FT_WINFONTS_H  FT_ENCODING_JOHAB FT_OPEN_PARAMS FT_WinFNT_Header  FT_ENCODING_MS_BIG5 FT_OPEN_PATHNAME FT_WinFNT_HeaderRec  FT_ENCODING_MS_GB2312 FT_OPEN_STREAM FT_WinFNT_ID_CP1250  FT_ENCODING_MS_JOHAB FT_OPEN_XXX FT_WinFNT_ID_CP1251  FT_ENCODING_MS_SJIS FT_OPENTYPE_VALIDATE_H FT_WinFNT_ID_CP1252  FT_ENCODING_MS_SYMBOL FT_Open_Args FT_WinFNT_ID_CP1253  FT_ENCODING_MS_WANSUNG FT_Open_Face FT_WinFNT_ID_CP1254  FT_ENCODING_NONE FT_OpenType_Free FT_WinFNT_ID_CP1255  FT_ENCODING_OLD_LATIN_2 FT_OpenType_Validate FT_WinFNT_ID_CP1256  FT_ENCODING_PRC FT_ORIENTATION_FILL_LEFT FT_WinFNT_ID_CP1257  FT_ENCODING_SJIS FT_ORIENTATION_FILL_RIGHT FT_WinFNT_ID_CP1258  FT_ENCODING_UNICODE FT_ORIENTATION_NONE FT_WinFNT_ID_CP1361  FT_ENCODING_WANSUNG FT_ORIENTATION_POSTSCRIPT FT_WinFNT_ID_CP874  FT_Encoding FT_ORIENTATION_TRUETYPE FT_WinFNT_ID_CP932  FT_ERRORS_H FT_Orientation FT_WinFNT_ID_CP936  FT_Err_XXX FT_OUTLINE_EVEN_ODD_FILL FT_WinFNT_ID_CP949  FT_Error FT_OUTLINE_H FT_WinFNT_ID_CP950  FT_F26Dot6 FT_OUTLINE_HIGH_PRECISION FT_WinFNT_ID_DEFAULT  FT_F2Dot14 FT_OUTLINE_IGNORE_DROPOUTS FT_WinFNT_ID_MAC  FT_FACE_FLAG_CID_KEYED FT_OUTLINE_INCLUDE_STUBS FT_WinFNT_ID_OEM  FT_FACE_FLAG_COLOR FT_OUTLINE_NONE FT_WinFNT_ID_SYMBOL  FT_FACE_FLAG_EXTERNAL_STREAM FT_OUTLINE_OWNER FT_WinFNT_ID_XXX  FT_FACE_FLAG_FAST_GLYPHS FT_OUTLINE_REVERSE_FILL FTC_CMapCache  FT_FACE_FLAG_FIXED_SIZES FT_OUTLINE_SINGLE_PASS FTC_CMapCache_Lookup  FT_FACE_FLAG_FIXED_WIDTH FT_OUTLINE_SMART_DROPOUTS FTC_CMapCache_New  FT_FACE_FLAG_GLYPH_NAMES FT_OUTLINE_XXX FTC_Face_Requester  FT_FACE_FLAG_HINTER FT_Outline FTC_FaceID  FT_FACE_FLAG_HORIZONTAL FT_Outline_Check FTC_ImageCache  FT_FACE_FLAG_KERNING FT_Outline_ConicToFunc FTC_ImageCache_Lookup  FT_FACE_FLAG_MULTIPLE_MASTERS FT_Outline_Copy FTC_ImageCache_LookupScaler  FT_FACE_FLAG_SCALABLE FT_Outline_CubicToFunc FTC_ImageCache_New  FT_FACE_FLAG_SFNT FT_Outline_Decompose FTC_ImageType  FT_FACE_FLAG_TRICKY FT_Outline_Done FTC_ImageTypeRec  FT_FACE_FLAG_VARIATION FT_Outline_Embolden FTC_Manager  FT_FACE_FLAG_VERTICAL FT_Outline_EmboldenXY FTC_Manager_Done  FT_FACE_FLAG_XXX FT_Outline_Funcs FTC_Manager_LookupFace  FT_Face FT_Outline_Get_BBox FTC_Manager_LookupSize  FT_Face_CheckTrueTypePatents FT_Outline_Get_Bitmap FTC_Manager_New  FT_Face_GetCharsOfVariant FT_Outline_Get_CBox FTC_Manager_RemoveFaceID  FT_Face_GetCharVariantIndex FT_Outline_Get_Orientation FTC_Manager_Reset  FT_Face_GetCharVariantIsDefault FT_Outline_GetInsideBorder FTC_Node  FT_Face_GetVariantSelectors FT_Outline_GetOutsideBorder FTC_Node_Unref  FT_Face_GetVariantsOfChar FT_Outline_LineToFunc FTC_SBit  FT_Face_Internal FT_Outline_MoveToFunc FTC_SBitCache  FT_Face_Properties FT_Outline_New FTC_SBitCache_Lookup  FT_Face_SetUnpatentedHinting FT_Outline_Render FTC_SBitCache_LookupScaler  FT_FaceRec FT_Outline_Reverse FTC_SBitCache_New  FT_Fixed FT_Outline_Transform FTC_SBitRec  FT_FloorFix FT_Outline_Translate FTC_Scaler  FT_FONT_FORMATS_H FT_OutlineGlyph FTC_ScalerRec  FT_FREETYPE_H FT_OutlineGlyphRec fallback-script  FT_Free_Func FT_PALETTE_USABLE_WITH_DARK_BACKGROUND glyph-to-script-map  FT_FSTYPE_BITMAP_EMBEDDING_ONLY FT_PALETTE_USABLE_WITH_LIGHT_BACKGROUND hinting-engine  FT_FSTYPE_EDITABLE_EMBEDDING FT_PALETTE_XXX increase-x-height  FT_FSTYPE_INSTALLABLE_EMBEDDING FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY interpreter-version  FT_FSTYPE_NO_SUBSETTING FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY no-long-family-names  FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING FT_PARAM_TAG_INCREMENTAL no-stem-darkening  FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING FT_PARAM_TAG_LCD_FILTER_WEIGHTS PS_DICT_BLUE_FUZZ  FT_FSTYPE_XXX FT_PARAM_TAG_RANDOM_SEED PS_DICT_BLUE_SCALE  FT_FWord FT_PARAM_TAG_STEM_DARKENING PS_DICT_BLUE_SHIFT  FT_GASP_DO_GRAY FT_PARAM_TAG_UNPATENTED_HINTING PS_DICT_BLUE_VALUE  FT_GASP_DO_GRIDFIT FT_Palette_Get_Entry_Name_IDs PS_DICT_CHAR_STRING  FT_GASP_H FT_Palette_Get_Name_IDs PS_DICT_CHAR_STRING_KEY  FT_GASP_NO_TABLE FT_Palette_Get_Size PS_DICT_ENCODING_ENTRY  FT_GASP_SYMMETRIC_GRIDFIT FT_Palette_Get_Types PS_DICT_ENCODING_TYPE  FT_GASP_SYMMETRIC_SMOOTHING FT_Palette_Select PS_DICT_FAMILY_BLUE  FT_GASP_XXX FT_Palette_Set_Foreground_Color PS_DICT_FAMILY_NAME  FT_Generic FT_Parameter PS_DICT_FAMILY_OTHER_BLUE  FT_Generic_Finalizer FT_PCF_DRIVER_H PS_DICT_FONT_BBOX  FT_Get_Advance FT_PFR_H PS_DICT_FONT_MATRIX  FT_Get_Advances FT_PIXEL_MODE_BGRA PS_DICT_FONT_NAME  FT_Get_BDF_Charset_ID FT_PIXEL_MODE_GRAY PS_DICT_FONT_TYPE  FT_Get_BDF_Property FT_PIXEL_MODE_GRAY2 PS_DICT_FORCE_BOLD  FT_Get_Char_Index FT_PIXEL_MODE_GRAY4 PS_DICT_FS_TYPE  FT_Get_Charmap_Index FT_PIXEL_MODE_LCD PS_DICT_FULL_NAME  FT_Get_CID_From_Glyph_Index FT_PIXEL_MODE_LCD_V PS_DICT_IS_FIXED_PITCH  FT_Get_CID_Is_Internally_CID_Keyed FT_PIXEL_MODE_MONO PS_DICT_ITALIC_ANGLE  FT_Get_CID_Registry_Ordering_Supplement FT_PIXEL_MODE_NONE PS_DICT_LANGUAGE_GROUP  FT_Get_CMap_Format FT_Pixel_Mode PS_DICT_LEN_IV  FT_Get_CMap_Language_ID FT_Pointer PS_DICT_MIN_FEATURE  FT_Get_First_Char FT_Pos PS_DICT_NOTICE  FT_Get_Font_Format FT_Prop_GlyphToScriptMap PS_DICT_NUM_BLUE_VALUES  FT_Get_FSType_Flags FT_Prop_IncreaseXHeight PS_DICT_NUM_CHAR_STRINGS  FT_Get_Gasp FT_Property_Get PS_DICT_NUM_FAMILY_BLUES  FT_Get_Glyph FT_Property_Set PS_DICT_NUM_FAMILY_OTHER_BLUES  FT_Get_Glyph_Name FT_PtrDist PS_DICT_NUM_OTHER_BLUES  FT_Get_GlyphLayers FT_RASTER_FLAG_AA PS_DICT_NUM_STEM_SNAP_H  FT_Get_Kerning FT_RASTER_FLAG_CLIP PS_DICT_NUM_STEM_SNAP_V  FT_Get_MM_Blend_Coordinates FT_RASTER_FLAG_DEFAULT PS_DICT_NUM_SUBRS  FT_Get_MM_Var FT_RASTER_FLAG_DIRECT PS_DICT_OTHER_BLUE  FT_Get_Module FT_RASTER_FLAG_XXX PS_DICT_PAINT_TYPE  FT_Get_Multi_Master FT_Raster PS_DICT_PASSWORD  FT_Get_Name_Index FT_Raster_BitSet_Func PS_DICT_RND_STEM_UP  FT_Get_Next_Char FT_Raster_BitTest_Func PS_DICT_STD_HW  FT_Get_PFR_Advance FT_Raster_DoneFunc PS_DICT_STD_VW  FT_Get_PFR_Kerning FT_Raster_Funcs PS_DICT_STEM_SNAP_H  FT_Get_PFR_Metrics FT_Raster_NewFunc PS_DICT_STEM_SNAP_V  FT_Get_Postscript_Name FT_Raster_Params PS_DICT_SUBR  FT_Get_PS_Font_Info FT_Raster_RenderFunc PS_DICT_UNDERLINE_POSITION  FT_Get_PS_Font_Private FT_Raster_ResetFunc PS_DICT_UNDERLINE_THICKNESS  FT_Get_PS_Font_Value FT_Raster_SetModeFunc PS_DICT_UNIQUE_ID  FT_Get_Renderer FT_RENDER_H PS_DICT_VERSION  FT_Get_Sfnt_LangTag FT_RENDER_MODE_LCD PS_DICT_WEIGHT  FT_Get_Sfnt_Name FT_RENDER_MODE_LCD_V PS_Dict_Keys  FT_Get_Sfnt_Name_Count FT_RENDER_MODE_LIGHT PS_FontInfo  FT_Get_Sfnt_Table FT_RENDER_MODE_MONO PS_FontInfoRec  FT_Get_SubGlyph_Info FT_RENDER_MODE_NORMAL PS_Private  FT_Get_Track_Kerning FT_Realloc_Func PS_PrivateRec  FT_Get_TrueType_Engine_Type FT_Reference_Face random-seed  FT_Get_Var_Axis_Flags FT_Reference_Library T1_BLEND_BLUE_SCALE  FT_Get_Var_Blend_Coordinates FT_Remove_Module T1_BLEND_BLUE_SHIFT  FT_Get_Var_Design_Coordinates FT_Render_Glyph T1_BLEND_BLUE_VALUES  FT_Get_WinFNT_Header FT_Render_Mode T1_BLEND_FAMILY_BLUES  FT_GetFile_From_Mac_ATS_Name FT_Renderer T1_BLEND_FAMILY_OTHER_BLUES  FT_GetFile_From_Mac_Name FT_Renderer_Class T1_BLEND_FORCE_BOLD  FT_GetFilePath_From_Mac_ATS_Name FT_Request_Size T1_BLEND_ITALIC_ANGLE  FT_GLYPH_BBOX_GRIDFIT FT_RoundFix T1_BLEND_OTHER_BLUES  FT_GLYPH_BBOX_PIXELS FT_Select_Charmap T1_BLEND_STANDARD_HEIGHT  FT_GLYPH_BBOX_SUBPIXELS FT_Select_Size T1_BLEND_STANDARD_WIDTH  FT_GLYPH_BBOX_TRUNCATE FT_Set_Char_Size T1_BLEND_STEM_SNAP_HEIGHTS  FT_GLYPH_BBOX_UNSCALED FT_Set_Charmap T1_BLEND_STEM_SNAP_WIDTHS  FT_GLYPH_FORMAT_BITMAP FT_Set_Debug_Hook T1_BLEND_UNDERLINE_POSITION  FT_GLYPH_FORMAT_COMPOSITE FT_Set_Default_Properties T1_BLEND_UNDERLINE_THICKNESS  FT_GLYPH_FORMAT_NONE FT_Set_MM_Blend_Coordinates T1_Blend_Flags  FT_GLYPH_FORMAT_OUTLINE FT_Set_MM_Design_Coordinates T1_ENCODING_TYPE_ARRAY  FT_GLYPH_FORMAT_PLOTTER FT_Set_Named_Instance T1_ENCODING_TYPE_EXPERT  FT_GLYPH_H FT_Set_Pixel_Sizes T1_ENCODING_TYPE_ISOLATIN1  FT_Glyph FT_Set_Renderer T1_ENCODING_TYPE_NONE  FT_Glyph_BBox_Mode FT_Set_Transform T1_ENCODING_TYPE_STANDARD  FT_Glyph_Copy FT_Set_Var_Blend_Coordinates T1_EncodingType  FT_Glyph_Format FT_Set_Var_Design_Coordinates T1_FontInfo  FT_Glyph_Get_CBox FT_SFNT_HEAD T1_Private  FT_Glyph_Layer FT_SFNT_HHEA TT_ADOBE_ID_CUSTOM  FT_Glyph_LayerRec FT_SFNT_MAXP TT_ADOBE_ID_EXPERT  FT_Glyph_Metrics FT_SFNT_NAMES_H TT_ADOBE_ID_LATIN_1  FT_Glyph_Stroke FT_SFNT_OS2 TT_ADOBE_ID_STANDARD  FT_Glyph_StrokeBorder FT_SFNT_PCLT TT_ADOBE_ID_XXX  FT_Glyph_To_Bitmap FT_SFNT_POST TT_APPLE_ID_DEFAULT  FT_Glyph_Transform FT_SFNT_VHEA TT_APPLE_ID_FULL_UNICODE  FT_GlyphRec FT_Sfnt_Table_Info TT_APPLE_ID_ISO_10646  FT_GlyphSlot FT_Sfnt_Tag TT_APPLE_ID_UNICODE_1_1  FT_GlyphSlot_Own_Bitmap FT_SfntLangTag TT_APPLE_ID_UNICODE_2_0  FT_GlyphSlotRec FT_SfntName TT_APPLE_ID_UNICODE_32  FT_GX_VALIDATE_H FT_Short TT_APPLE_ID_VARIANT_SELECTOR  FT_GZIP_H FT_SIZE_REQUEST_TYPE_BBOX TT_APPLE_ID_XXX  FT_Gzip_Uncompress FT_SIZE_REQUEST_TYPE_CELL TT_Header  FT_HAS_COLOR FT_SIZE_REQUEST_TYPE_NOMINAL TT_HoriHeader  FT_HAS_FAST_GLYPHS FT_SIZE_REQUEST_TYPE_REAL_DIM TT_INTERPRETER_VERSION_35  FT_HAS_FIXED_SIZES FT_SIZE_REQUEST_TYPE_SCALES TT_INTERPRETER_VERSION_38  FT_HAS_GLYPH_NAMES FT_SIZES_H TT_INTERPRETER_VERSION_40  FT_HAS_HORIZONTAL FT_Sin TT_INTERPRETER_VERSION_XXX  FT_HAS_KERNING FT_Size TT_ISO_ID_10646  FT_HAS_MULTIPLE_MASTERS FT_Size_Internal TT_ISO_ID_7BIT_ASCII  FT_HAS_VERTICAL FT_Size_Metrics TT_ISO_ID_8859_1  FT_Has_PS_Glyph_Names FT_Size_Request TT_ISO_ID_XXX  FT_HINTING_ADOBE FT_Size_Request_Type TT_MAC_ID_XXX  FT_HINTING_FREETYPE FT_Size_RequestRec TT_MAC_LANGID_XXX  FT_HINTING_XXX FT_SizeRec TT_MaxProfile  FT_IMAGE_H FT_Slot_Internal TT_MS_ID_BIG_5  FT_IMAGE_TAG FT_Span TT_MS_ID_JOHAB  FT_INCREMENTAL_H FT_SpanFunc TT_MS_ID_PRC  FT_Incremental FT_STROKER_BORDER_LEFT TT_MS_ID_SJIS  FT_Incremental_FreeGlyphDataFunc FT_STROKER_BORDER_RIGHT TT_MS_ID_SYMBOL_CS  FT_Incremental_FuncsRec FT_STROKER_H TT_MS_ID_UCS_4  FT_Incremental_GetGlyphDataFunc FT_STROKER_LINECAP_BUTT TT_MS_ID_UNICODE_CS  FT_Incremental_GetGlyphMetricsFunc FT_STROKER_LINECAP_ROUND TT_MS_ID_WANSUNG  FT_Incremental_Interface FT_STROKER_LINECAP_SQUARE TT_MS_ID_XXX  FT_Incremental_InterfaceRec FT_STROKER_LINEJOIN_BEVEL TT_MS_LANGID_XXX  FT_Incremental_Metrics FT_STROKER_LINEJOIN_MITER TT_NAME_ID_XXX  FT_Incremental_MetricsRec FT_STROKER_LINEJOIN_MITER_FIXED TT_OS2  FT_Init_FreeType FT_STROKER_LINEJOIN_MITER_VARIABLE TT_PCLT  FT_Int FT_STROKER_LINEJOIN_ROUND TT_PLATFORM_ADOBE  FT_Int16 FT_STYLE_FLAG_BOLD TT_PLATFORM_APPLE_UNICODE  FT_Int32 FT_STYLE_FLAG_ITALIC TT_PLATFORM_CUSTOM  FT_Int64 FT_STYLE_FLAG_XXX TT_PLATFORM_ISO  FT_IS_CID_KEYED FT_Stream TT_PLATFORM_MACINTOSH  FT_IS_FIXED_WIDTH FT_Stream_CloseFunc TT_PLATFORM_MICROSOFT  FT_IS_NAMED_INSTANCE FT_Stream_IoFunc TT_PLATFORM_XXX  FT_IS_SCALABLE FT_Stream_OpenBzip2 TT_Postscript  FT_IS_SFNT FT_Stream_OpenGzip TT_UCR_XXX  FT_IS_TRICKY FT_Stream_OpenLZW TT_VertHeader  FT_IS_VARIATION FT_StreamDesc warping  FT_KERNING_DEFAULT FT_StreamRec   generated on Thu Jun  7 18:31:47 2018",
            "title": "FreeType-2.9.1 API Reference"
        },
        {
            "location": "/ft2-header_inclusion/",
            "text": "Docs\n \u00bb \nGeneral Remarks\n \u00bb FreeType's header inclusion scheme\n\n\n\n\nFreeType's header inclusion scheme\n\u00b6\n\n\nTo be as flexible as possible (and for historical reasons), FreeType uses a very special inclusion scheme to load header files, for example\n\n  #include <ft2build.h>\n\n  #include FT_FREETYPE_H\n  #include FT_OUTLINE_H\n\n\n\nA compiler and its preprocessor only needs an include path to find the file \u2018ft2build.h\u2019; the exact locations and names of the other FreeType header files are hidden by preprocessor macro names, loaded by \u2018ft2build.h\u2019. The API documentation always gives the header macro name needed for a particular function.",
            "title": "Header Inclusion"
        },
        {
            "location": "/ft2-header_inclusion/#freetypes-header-inclusion-scheme",
            "text": "To be as flexible as possible (and for historical reasons), FreeType uses a very special inclusion scheme to load header files, for example   #include <ft2build.h>\n\n  #include FT_FREETYPE_H\n  #include FT_OUTLINE_H  A compiler and its preprocessor only needs an include path to find the file \u2018ft2build.h\u2019; the exact locations and names of the other FreeType header files are hidden by preprocessor macro names, loaded by \u2018ft2build.h\u2019. The API documentation always gives the header macro name needed for a particular function.",
            "title": "FreeType's header inclusion scheme"
        },
        {
            "location": "/ft2-user_allocation/",
            "text": "Docs\n \u00bb \nGeneral Remarks\n \u00bb User allocation\n\n\n\n\nUser allocation\n\u00b6\n\n\nFreeType assumes that structures allocated by the user and passed as arguments are zeroed out except for the actual data. In other words, it is recommended to use \u2018calloc\u2019 (or variants of it) instead of \u2018malloc\u2019 for allocation.",
            "title": "User allocation"
        },
        {
            "location": "/ft2-user_allocation/#user-allocation",
            "text": "FreeType assumes that structures allocated by the user and passed as arguments are zeroed out except for the actual data. In other words, it is recommended to use \u2018calloc\u2019 (or variants of it) instead of \u2018malloc\u2019 for allocation.",
            "title": "User allocation"
        },
        {
            "location": "/ft2-version/",
            "text": "Docs\n \u00bb \nCore API\n \u00bb FreeType Version\n\n\n\n\nFreeType Version\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nNote that those functions and macros are of limited use because even a new release of FreeType with only documentation changes increases the version number.\n\n\nFT_Library_Version\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Library_Version\n( \nFT_Library\n   library,\n                      \nFT_Int\n      *amajor,\n                      \nFT_Int\n      *aminor,\n                      \nFT_Int\n      *apatch );\n\n\n\n\nReturn the version of the FreeType library being used. This is useful when dynamically linking to the library, since one cannot use the macros \nFREETYPE_MAJOR\n, \nFREETYPE_MINOR\n, and \nFREETYPE_PATCH\n.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA source library handle.\n\n\n\n\n\n\noutput\n\n\n\n\n\namajor\n\n\nThe major version number.\n\n\n\naminor\n\n\nThe minor version number.\n\n\n\napatch\n\n\nThe patch version number.\n\n\n\n\n\n\nnote\n\n\n\nThe reason why this function takes a \u2018library\u2019 argument is because certain programs implement library initialization in a custom way that doesn't use \nFT_Init_FreeType\n.\n\n\nIn such cases, the library version might not be available before the library object has been created.\n\n\n\n\n\nFT_Face_CheckTrueTypePatents\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Bool\n )\n  \nFT_Face_CheckTrueTypePatents\n( \nFT_Face\n  face );\n\n\n\n\nDeprecated, does nothing.\n\n\ninput\n\n\n\n\n\nface\n\n\nA face handle.\n\n\n\n\n\n\nreturn\n\n\n\nAlways returns false.\n\n\nnote\n\n\n\nSince May 2010, TrueType hinting is no longer patented.\n\n\nsince\n\n\n\n2.3.5\n\n\n\n\n\nFT_Face_SetUnpatentedHinting\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Bool\n )\n  \nFT_Face_SetUnpatentedHinting\n( \nFT_Face\n  face,\n                                \nFT_Bool\n  value );\n\n\n\n\nDeprecated, does nothing.\n\n\ninput\n\n\n\n\n\nface\n\n\nA face handle.\n\n\n\nvalue\n\n\nNew boolean setting.\n\n\n\n\n\n\nreturn\n\n\n\nAlways returns false.\n\n\nnote\n\n\n\nSince May 2010, TrueType hinting is no longer patented.\n\n\nsince\n\n\n\n2.3.5\n\n\n\n\n\nFREETYPE_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFREETYPE_MAJOR\n  2\n#define \nFREETYPE_MINOR\n  9\n#define \nFREETYPE_PATCH\n  1\n\n\n\n\nThese three macros identify the FreeType source code version. Use \nFT_Library_Version\n to access them at runtime.\n\n\nvalues\n\n\n\n\n\nFREETYPE_MAJOR\n\n\nThe major version number.\n\n\n\nFREETYPE_MINOR\n\n\nThe minor version number.\n\n\n\nFREETYPE_PATCH\n\n\nThe patch level.\n\n\n\n\n\n\nnote\n\n\n\nThe version number of FreeType if built as a dynamic link library with the \u2018libtool\u2019 package is \nnot\n controlled by these three macros.",
            "title": "FreeType Version"
        },
        {
            "location": "/ft2-version/#freetype-version",
            "text": "",
            "title": "FreeType Version"
        },
        {
            "location": "/ft2-version/#synopsis",
            "text": "Note that those functions and macros are of limited use because even a new release of FreeType with only documentation changes increases the version number.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-version/#ft_library_version",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  void  )\n   FT_Library_Version (  FT_Library    library,\n                       FT_Int       *amajor,\n                       FT_Int       *aminor,\n                       FT_Int       *apatch );  Return the version of the FreeType library being used. This is useful when dynamically linking to the library, since one cannot use the macros  FREETYPE_MAJOR ,  FREETYPE_MINOR , and  FREETYPE_PATCH .",
            "title": "FT_Library_Version"
        },
        {
            "location": "/ft2-version/#ft_face_checktruetypepatents",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Bool  )\n   FT_Face_CheckTrueTypePatents (  FT_Face   face );  Deprecated, does nothing.",
            "title": "FT_Face_CheckTrueTypePatents"
        },
        {
            "location": "/ft2-version/#ft_face_setunpatentedhinting",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Bool  )\n   FT_Face_SetUnpatentedHinting (  FT_Face   face,\n                                 FT_Bool   value );  Deprecated, does nothing.",
            "title": "FT_Face_SetUnpatentedHinting"
        },
        {
            "location": "/ft2-version/#freetype_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FREETYPE_MAJOR   2\n#define  FREETYPE_MINOR   9\n#define  FREETYPE_PATCH   1  These three macros identify the FreeType source code version. Use  FT_Library_Version  to access them at runtime.",
            "title": "FREETYPE_XXX"
        },
        {
            "location": "/ft2-basic_types/",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Basic Data Types\n\n\n\n\nBasic Data Types\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the basic data types defined by FreeType\u00a02, ranging from simple scalar types to bitmap descriptors. More font-specific structures are defined in a different section.\n\n\nFT_Byte\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nunsigned\n \nchar\n  \nFT_Byte\n;\n\n\n\n\nA simple typedef for the \nunsigned\n char type.\n\n\n\n\n\nFT_Bytes\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nconst\n \nFT_Byte\n*  \nFT_Bytes\n;\n\n\n\n\nA typedef for constant memory areas.\n\n\n\n\n\nFT_Char\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nsigned\n \nchar\n  \nFT_Char\n;\n\n\n\n\nA simple typedef for the \nsigned\n char type.\n\n\n\n\n\nFT_Int\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nsigned\n \nint\n  \nFT_Int\n;\n\n\n\n\nA typedef for the int type.\n\n\n\n\n\nFT_UInt\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nunsigned\n \nint\n  \nFT_UInt\n;\n\n\n\n\nA typedef for the unsigned int type.\n\n\n\n\n\nFT_Int16\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n  \ntypedef\n \nsigned\n \nshort\n  \nFT_Int16\n;\n\n\n\n\nA typedef for a 16bit signed integer type.\n\n\n\n\n\nFT_UInt16\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n  \ntypedef\n \nunsigned\n \nshort\n  \nFT_UInt16\n;\n\n\n\n\nA typedef for a 16bit unsigned integer type.\n\n\n\n\n\nFT_Int32\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n  \ntypedef\n \nsigned\n XXX  \nFT_Int32\n;\n\n\n\n\nA typedef for a 32bit signed integer type. The size depends on the configuration.\n\n\n\n\n\nFT_UInt32\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n  \ntypedef\n \nunsigned\n XXX  \nFT_UInt32\n;\n\n\n\n\n\n\n\nFT_Int64\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n  \ntypedef\n \nsigned\n XXX  \nFT_Int64\n;\n\n\n\n\n\n\n\nFT_UInt64\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n  \ntypedef\n \nunsigned\n XXX  \nFT_UInt64\n;\n\n\n\n\n\n\n\nFT_Short\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nsigned\n \nshort\n  \nFT_Short\n;\n\n\n\n\nA typedef for signed short.\n\n\n\n\n\nFT_UShort\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nunsigned\n \nshort\n  \nFT_UShort\n;\n\n\n\n\nA typedef for unsigned short.\n\n\n\n\n\nFT_Long\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nsigned\n \nlong\n  \nFT_Long\n;\n\n\n\n\nA typedef for signed long.\n\n\n\n\n\nFT_ULong\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nunsigned\n \nlong\n  \nFT_ULong\n;\n\n\n\n\nA typedef for unsigned long.\n\n\n\n\n\nFT_Bool\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nunsigned\n \nchar\n  \nFT_Bool\n;\n\n\n\n\nA typedef of unsigned char, used for simple booleans. As usual, values 1 and\u00a00 represent true and false, respectively.\n\n\n\n\n\nFT_Offset\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n size_t  \nFT_Offset\n;\n\n\n\n\nThis is equivalent to the ANSI\u00a0C \u2018size_t\u2019 type, i.e., the largest \nunsigned\n integer type used to express a file size or position, or a memory block size.\n\n\n\n\n\nFT_PtrDist\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n ft_ptrdiff_t  \nFT_PtrDist\n;\n\n\n\n\nThis is equivalent to the ANSI\u00a0C \u2018ptrdiff_t\u2019 type, i.e., the largest \nsigned\n integer type used to express the distance between two pointers.\n\n\n\n\n\nFT_String\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nchar\n  \nFT_String\n;\n\n\n\n\nA simple typedef for the char type, usually used for strings.\n\n\n\n\n\nFT_Tag\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nFT_UInt32\n  \nFT_Tag\n;\n\n\n\n\nA typedef for 32-bit tags (as used in the SFNT format).\n\n\n\n\n\nFT_Error\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nint\n  \nFT_Error\n;\n\n\n\n\nThe FreeType error code type. A value of\u00a00 is always interpreted as a successful operation.\n\n\n\n\n\nFT_Fixed\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nsigned\n \nlong\n  \nFT_Fixed\n;\n\n\n\n\nThis type is used to store 16.16 fixed-point values, like scaling values or matrix coefficients.\n\n\n\n\n\nFT_Pointer\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nvoid\n*  \nFT_Pointer\n;\n\n\n\n\nA simple typedef for a typeless pointer.\n\n\n\n\n\nFT_Pos\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n  \ntypedef\n \nsigned\n \nlong\n  \nFT_Pos\n;\n\n\n\n\nThe type FT_Pos is used to store vectorial coordinates. Depending on the context, these can represent distances in integer font units, or 16.16, or 26.6 fixed-point pixel coordinates.\n\n\n\n\n\nFT_Vector\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Vector_\n  {\n    \nFT_Pos\n  x;\n    \nFT_Pos\n  y;\n\n  } \nFT_Vector\n;\n\n\n\n\nA simple structure used to store a 2D vector; coordinates are of the FT_Pos type.\n\n\nfields\n\n\n\n\n\nx\n\n\nThe horizontal coordinate.\n\n\n\ny\n\n\nThe vertical coordinate.\n\n\n\n\n\n\n\n\n\nFT_BBox\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_BBox_\n  {\n    \nFT_Pos\n  xMin, yMin;\n    \nFT_Pos\n  xMax, yMax;\n\n  } \nFT_BBox\n;\n\n\n\n\nA structure used to hold an outline's bounding box, i.e., the coordinates of its extrema in the horizontal and vertical directions.\n\n\nfields\n\n\n\n\n\nxMin\n\n\nThe horizontal minimum (left-most).\n\n\n\nyMin\n\n\nThe vertical minimum (bottom-most).\n\n\n\nxMax\n\n\nThe horizontal maximum (right-most).\n\n\n\nyMax\n\n\nThe vertical maximum (top-most).\n\n\n\n\n\n\nnote\n\n\n\nThe bounding box is specified with the coordinates of the lower left and the upper right corner. In PostScript, those values are often called (llx,lly) and (urx,ury), respectively.\n\n\nIf \u2018yMin\u2019 is negative, this value gives the glyph's descender. Otherwise, the glyph doesn't descend below the baseline. Similarly, if \u2018ymax\u2019 is positive, this value gives the glyph's ascender.\n\n\n\u2018xMin\u2019 gives the horizontal distance from the glyph's origin to the left edge of the glyph's bounding box. If \u2018xMin\u2019 is negative, the glyph extends to the left of the origin.\n\n\n\n\n\nFT_Matrix\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Matrix_\n  {\n    \nFT_Fixed\n  xx, xy;\n    \nFT_Fixed\n  yx, yy;\n\n  } \nFT_Matrix\n;\n\n\n\n\nA simple structure used to store a 2x2 matrix. Coefficients are in 16.16 fixed-point format. The computation performed is:\n\n   x' = x*xx + y*xy\n   y' = x*yx + y*yy\n\n\n\nfields\n\n\n\n\n\nxx\n\n\nMatrix coefficient.\n\n\n\nxy\n\n\nMatrix coefficient.\n\n\n\nyx\n\n\nMatrix coefficient.\n\n\n\nyy\n\n\nMatrix coefficient.\n\n\n\n\n\n\n\n\n\nFT_FWord\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nsigned\n \nshort\n  \nFT_FWord\n;   /* distance in FUnits */\n\n\n\n\nA signed 16-bit integer used to store a distance in original font units.\n\n\n\n\n\nFT_UFWord\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nunsigned\n \nshort\n  \nFT_UFWord\n;  /* \nunsigned\n distance */\n\n\n\n\nAn unsigned 16-bit integer used to store a distance in original font units.\n\n\n\n\n\nFT_F2Dot14\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nsigned\n \nshort\n  \nFT_F2Dot14\n;\n\n\n\n\nA signed 2.14 fixed-point type used for unit vectors.\n\n\n\n\n\nFT_UnitVector\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_UnitVector_\n  {\n    \nFT_F2Dot14\n  x;\n    \nFT_F2Dot14\n  y;\n\n  } \nFT_UnitVector\n;\n\n\n\n\nA simple structure used to store a 2D vector unit vector. Uses FT_F2Dot14 types.\n\n\nfields\n\n\n\n\n\nx\n\n\nHorizontal coordinate.\n\n\n\ny\n\n\nVertical coordinate.\n\n\n\n\n\n\n\n\n\nFT_F26Dot6\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nsigned\n \nlong\n  \nFT_F26Dot6\n;\n\n\n\n\nA signed 26.6 fixed-point type used for vectorial pixel coordinates.\n\n\n\n\n\nFT_Data\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Data_\n  {\n    \nconst\n \nFT_Byte\n*  pointer;\n    \nFT_Int\n          length;\n\n  } \nFT_Data\n;\n\n\n\n\nRead-only binary data represented as a pointer and a length.\n\n\nfields\n\n\n\n\n\npointer\n\n\nThe data.\n\n\n\nlength\n\n\nThe length of the data in bytes.\n\n\n\n\n\n\n\n\n\nFT_MAKE_TAG\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n#define \nFT_MAKE_TAG\n( _x1, _x2, _x3, _x4 ) \\\n          (\nFT_Tag\n)                        \\\n          ( ( (\nFT_ULong\n)_x1 << 24 ) |     \\\n            ( (\nFT_ULong\n)_x2 << 16 ) |     \\\n            ( (\nFT_ULong\n)_x3 <<  8 ) |     \\\n              (\nFT_ULong\n)_x4         )\n\n\n\n\nThis macro converts four-letter tags that are used to label TrueType tables into an unsigned long, to be used within FreeType.\n\n\nnote\n\n\n\nThe produced values \nmust\n be 32-bit integers. Don't redefine this macro.\n\n\n\n\n\nFT_Generic\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Generic_\n  {\n    \nvoid\n*                 data;\n    \nFT_Generic_Finalizer\n  finalizer;\n\n  } \nFT_Generic\n;\n\n\n\n\nClient applications often need to associate their own data to a variety of FreeType core objects. For example, a text layout API might want to associate a glyph cache to a given size object.\n\n\nSome FreeType object contains a \u2018generic\u2019 field, of type FT_Generic, which usage is left to client applications and font servers.\n\n\nIt can be used to store a pointer to client-specific data, as well as the address of a \u2018finalizer\u2019 function, which will be called by FreeType when the object is destroyed (for example, the previous client example would put the address of the glyph cache destructor in the \u2018finalizer\u2019 field).\n\n\nfields\n\n\n\n\n\ndata\n\n\nA typeless pointer to any client-specified data. This field is completely ignored by the FreeType library.\n\n\n\nfinalizer\n\n\nA pointer to a \u2018generic finalizer\u2019 function, which will be called when the object is destroyed. If this field is set to NULL, no code will be called.\n\n\n\n\n\n\n\n\n\nFT_Generic_Finalizer\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n  \ntypedef\n \nvoid\n  (*\nFT_Generic_Finalizer\n)( \nvoid\n*  object );\n\n\n\n\nDescribe a function used to destroy the \u2018client\u2019 data of any FreeType object. See the description of the \nFT_Generic\n type for details of usage.\n\n\ninput\n\n\n\nThe address of the FreeType object that is under finalization. Its client data is accessed through its \u2018generic\u2019 field.\n\n\n\n\n\nFT_Bitmap\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Bitmap_\n  {\n    \nunsigned\n \nint\n    rows;\n    \nunsigned\n \nint\n    width;\n    \nint\n             pitch;\n    \nunsigned\n \nchar\n*  buffer;\n    \nunsigned\n \nshort\n  num_grays;\n    \nunsigned\n \nchar\n   pixel_mode;\n    \nunsigned\n \nchar\n   palette_mode;\n    \nvoid\n*           palette;\n\n  } \nFT_Bitmap\n;\n\n\n\n\nA structure used to describe a bitmap or pixmap to the raster. Note that we now manage pixmaps of various depths through the \u2018pixel_mode\u2019 field.\n\n\nfields\n\n\n\n\n\nrows\n\n\nThe number of bitmap rows.\n\n\n\nwidth\n\n\nThe number of pixels in bitmap row.\n\n\n\npitch\n\n\nThe pitch's absolute value is the number of bytes taken by one bitmap row, including padding. However, the pitch is positive when the bitmap has a \u2018down\u2019 flow, and negative when it has an \u2018up\u2019 flow. In all cases, the pitch is an offset to add to a bitmap pointer in order to go down one row.\n\nNote that \u2018padding\u2019 means the alignment of a bitmap to a byte border, and FreeType functions normally align to the smallest possible integer value.\n\nFor the B/W rasterizer, \u2018pitch\u2019 is always an even number.\n\nTo change the pitch of a bitmap (say, to make it a multiple of 4), use \nFT_Bitmap_Convert\n. Alternatively, you might use callback functions to directly render to the application's surface; see the file \u2018example2.cpp\u2019 in the tutorial for a demonstration.\n\n\n\nbuffer\n\n\nA typeless pointer to the bitmap buffer. This value should be aligned on 32-bit boundaries in most cases.\n\n\n\nnum_grays\n\n\nThis field is only used with \nFT_PIXEL_MODE_GRAY\n; it gives the number of gray levels used in the bitmap.\n\n\n\npixel_mode\n\n\nThe pixel mode, i.e., how pixel bits are stored. See \nFT_Pixel_Mode\n for possible values.\n\n\n\npalette_mode\n\n\nThis field is intended for paletted pixel modes; it indicates how the palette is stored. Not used currently.\n\n\n\npalette\n\n\nA typeless pointer to the bitmap palette; this field is intended for paletted pixel modes. Not used currently.\n\n\n\n\n\n\n\n\n\nFT_Pixel_Mode\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n  \ntypedef\n \nenum\n  FT_Pixel_Mode_\n  {\n    \nFT_PIXEL_MODE_NONE\n = 0,\n    \nFT_PIXEL_MODE_MONO\n,\n    \nFT_PIXEL_MODE_GRAY\n,\n    \nFT_PIXEL_MODE_GRAY2\n,\n    \nFT_PIXEL_MODE_GRAY4\n,\n    \nFT_PIXEL_MODE_LCD\n,\n    \nFT_PIXEL_MODE_LCD_V\n,\n    \nFT_PIXEL_MODE_BGRA\n,\n\n    FT_PIXEL_MODE_MAX      /* do not remove */\n\n  } \nFT_Pixel_Mode\n;\n\n\n  /* these constants are deprecated; use the corresponding `\nFT_Pixel_Mode\n' */\n  /* values instead.                                                       */\n#define ft_pixel_mode_none   \nFT_PIXEL_MODE_NONE\n\n#define ft_pixel_mode_mono   \nFT_PIXEL_MODE_MONO\n\n#define ft_pixel_mode_grays  \nFT_PIXEL_MODE_GRAY\n\n#define ft_pixel_mode_pal2   \nFT_PIXEL_MODE_GRAY2\n\n#define ft_pixel_mode_pal4   \nFT_PIXEL_MODE_GRAY4\n\n\n\n\n\nAn enumeration type used to describe the format of pixels in a given bitmap. Note that additional formats may be added in the future.\n\n\nvalues\n\n\n\n\n\nFT_PIXEL_MODE_NONE\n\n\nValue\u00a00 is reserved.\n\n\n\nFT_PIXEL_MODE_MONO\n\n\nA monochrome bitmap, using 1\u00a0bit per pixel. Note that pixels are stored in most-significant order (MSB), which means that the left-most pixel in a byte has value 128.\n\n\n\nFT_PIXEL_MODE_GRAY\n\n\nAn 8-bit bitmap, generally used to represent anti-aliased glyph images. Each pixel is stored in one byte. Note that the number of \u2018gray\u2019 levels is stored in the \u2018num_grays\u2019 field of the \nFT_Bitmap\n structure (it generally is 256).\n\n\n\nFT_PIXEL_MODE_GRAY2\n\n\nA 2-bit per pixel bitmap, used to represent embedded anti-aliased bitmaps in font files according to the OpenType specification. We haven't found a single font using this format, however.\n\n\n\nFT_PIXEL_MODE_GRAY4\n\n\nA 4-bit per pixel bitmap, representing embedded anti-aliased bitmaps in font files according to the OpenType specification. We haven't found a single font using this format, however.\n\n\n\nFT_PIXEL_MODE_LCD\n\n\nAn 8-bit bitmap, representing RGB or BGR decimated glyph images used for display on LCD displays; the bitmap is three times wider than the original glyph image. See also \nFT_RENDER_MODE_LCD\n.\n\n\n\nFT_PIXEL_MODE_LCD_V\n\n\nAn 8-bit bitmap, representing RGB or BGR decimated glyph images used for display on rotated LCD displays; the bitmap is three times taller than the original glyph image. See also \nFT_RENDER_MODE_LCD_V\n.\n\n\n\nFT_PIXEL_MODE_BGRA\n\n\n[Since 2.5] An image with four 8-bit channels per pixel, representing a color image (such as emoticons) with alpha channel. For each pixel, the format is BGRA, which means, the blue channel comes first in memory. The color channels are pre-multiplied and in the sRGB colorspace. For example, full red at half-translucent opacity will be represented as \u201800,00,80,80\u2019, not \u201800,00,FF,80\u2019. See also \nFT_LOAD_COLOR\n.\n\n\n\n\n\n\n\n\n\nFT_Glyph_Format\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n  \ntypedef\n \nenum\n  FT_Glyph_Format_\n  {\n    \nFT_IMAGE_TAG\n( \nFT_GLYPH_FORMAT_NONE\n, 0, 0, 0, 0 ),\n\n    \nFT_IMAGE_TAG\n( \nFT_GLYPH_FORMAT_COMPOSITE\n, 'c', 'o', 'm', 'p' ),\n    \nFT_IMAGE_TAG\n( \nFT_GLYPH_FORMAT_BITMAP\n,    'b', 'i', 't', 's' ),\n    \nFT_IMAGE_TAG\n( \nFT_GLYPH_FORMAT_OUTLINE\n,   'o', 'u', 't', 'l' ),\n    \nFT_IMAGE_TAG\n( \nFT_GLYPH_FORMAT_PLOTTER\n,   'p', 'l', 'o', 't' )\n\n  } \nFT_Glyph_Format\n;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `\nFT_Glyph_Format\n' values instead.                     */\n#define ft_glyph_format_none       \nFT_GLYPH_FORMAT_NONE\n\n#define ft_glyph_format_composite  \nFT_GLYPH_FORMAT_COMPOSITE\n\n#define ft_glyph_format_bitmap     \nFT_GLYPH_FORMAT_BITMAP\n\n#define ft_glyph_format_outline    \nFT_GLYPH_FORMAT_OUTLINE\n\n#define ft_glyph_format_plotter    \nFT_GLYPH_FORMAT_PLOTTER\n\n\n\n\n\nAn enumeration type used to describe the format of a given glyph image. Note that this version of FreeType only supports two image formats, even though future font drivers will be able to register their own format.\n\n\nvalues\n\n\n\n\n\nFT_GLYPH_FORMAT_NONE\n\n\nThe value\u00a00 is reserved.\n\n\n\nFT_GLYPH_FORMAT_COMPOSITE\n\n\nThe glyph image is a composite of several other images. This format is _only_ used with \nFT_LOAD_NO_RECURSE\n, and is used to report compound glyphs (like accented characters).\n\n\n\nFT_GLYPH_FORMAT_BITMAP\n\n\nThe glyph image is a bitmap, and can be described as an \nFT_Bitmap\n. You generally need to access the \u2018bitmap\u2019 field of the \nFT_GlyphSlotRec\n structure to read it.\n\n\n\nFT_GLYPH_FORMAT_OUTLINE\n\n\nThe glyph image is a vectorial outline made of line segments and Bezier arcs; it can be described as an \nFT_Outline\n; you generally want to access the \u2018outline\u2019 field of the \nFT_GlyphSlotRec\n structure to read it.\n\n\n\nFT_GLYPH_FORMAT_PLOTTER\n\n\nThe glyph image is a vectorial path with no inside and outside contours. Some Type\u00a01 fonts, like those in the Hershey family, contain glyphs in this format. These are described as \nFT_Outline\n, but FreeType isn't currently capable of rendering them correctly.\n\n\n\n\n\n\n\n\n\nFT_IMAGE_TAG\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n#ifndef \nFT_IMAGE_TAG\n\n#define \nFT_IMAGE_TAG\n( value, _x1, _x2, _x3, _x4 )  \\\n          value = ( ( (\nunsigned\n \nlong\n)_x1 << 24 ) | \\\n                    ( (\nunsigned\n \nlong\n)_x2 << 16 ) | \\\n                    ( (\nunsigned\n \nlong\n)_x3 << 8  ) | \\\n                      (\nunsigned\n \nlong\n)_x4         )\n#endif /* \nFT_IMAGE_TAG\n */\n\n\n\n\nThis macro converts four-letter tags to an unsigned long type.\n\n\nnote\n\n\n\nSince many 16-bit compilers don't like 32-bit enumerations, you should redefine this macro in case of problems to something like this:\n\n  #define FT_IMAGE_TAG( value, _x1, _x2, _x3, _x4 )  value\n\n\n\nto get a simple enumeration without assigning special numbers.",
            "title": "Basic Types"
        },
        {
            "location": "/ft2-basic_types/#basic-data-types",
            "text": "",
            "title": "Basic Data Types"
        },
        {
            "location": "/ft2-basic_types/#synopsis",
            "text": "This section contains the basic data types defined by FreeType\u00a02, ranging from simple scalar types to bitmap descriptors. More font-specific structures are defined in a different section.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-basic_types/#ft_byte",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   unsigned   char    FT_Byte ;  A simple typedef for the  unsigned  char type.",
            "title": "FT_Byte"
        },
        {
            "location": "/ft2-basic_types/#ft_bytes",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   const   FT_Byte *   FT_Bytes ;  A typedef for constant memory areas.",
            "title": "FT_Bytes"
        },
        {
            "location": "/ft2-basic_types/#ft_char",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   signed   char    FT_Char ;  A simple typedef for the  signed  char type.",
            "title": "FT_Char"
        },
        {
            "location": "/ft2-basic_types/#ft_int",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   signed   int    FT_Int ;  A typedef for the int type.",
            "title": "FT_Int"
        },
        {
            "location": "/ft2-basic_types/#ft_uint",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   unsigned   int    FT_UInt ;  A typedef for the unsigned int type.",
            "title": "FT_UInt"
        },
        {
            "location": "/ft2-basic_types/#ft_int16",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).  \n   typedef   signed   short    FT_Int16 ;  A typedef for a 16bit signed integer type.",
            "title": "FT_Int16"
        },
        {
            "location": "/ft2-basic_types/#ft_uint16",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).  \n   typedef   unsigned   short    FT_UInt16 ;  A typedef for a 16bit unsigned integer type.",
            "title": "FT_UInt16"
        },
        {
            "location": "/ft2-basic_types/#ft_int32",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).  \n   typedef   signed  XXX   FT_Int32 ;  A typedef for a 32bit signed integer type. The size depends on the configuration.",
            "title": "FT_Int32"
        },
        {
            "location": "/ft2-basic_types/#ft_uint32",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).  \n   typedef   unsigned  XXX   FT_UInt32 ;",
            "title": "FT_UInt32"
        },
        {
            "location": "/ft2-basic_types/#ft_int64",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).  \n   typedef   signed  XXX   FT_Int64 ;",
            "title": "FT_Int64"
        },
        {
            "location": "/ft2-basic_types/#ft_uint64",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).  \n   typedef   unsigned  XXX   FT_UInt64 ;",
            "title": "FT_UInt64"
        },
        {
            "location": "/ft2-basic_types/#ft_short",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   signed   short    FT_Short ;  A typedef for signed short.",
            "title": "FT_Short"
        },
        {
            "location": "/ft2-basic_types/#ft_ushort",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   unsigned   short    FT_UShort ;  A typedef for unsigned short.",
            "title": "FT_UShort"
        },
        {
            "location": "/ft2-basic_types/#ft_long",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   signed   long    FT_Long ;  A typedef for signed long.",
            "title": "FT_Long"
        },
        {
            "location": "/ft2-basic_types/#ft_ulong",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   unsigned   long    FT_ULong ;  A typedef for unsigned long.",
            "title": "FT_ULong"
        },
        {
            "location": "/ft2-basic_types/#ft_bool",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   unsigned   char    FT_Bool ;  A typedef of unsigned char, used for simple booleans. As usual, values 1 and\u00a00 represent true and false, respectively.",
            "title": "FT_Bool"
        },
        {
            "location": "/ft2-basic_types/#ft_offset",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef  size_t   FT_Offset ;  This is equivalent to the ANSI\u00a0C \u2018size_t\u2019 type, i.e., the largest  unsigned  integer type used to express a file size or position, or a memory block size.",
            "title": "FT_Offset"
        },
        {
            "location": "/ft2-basic_types/#ft_ptrdist",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef  ft_ptrdiff_t   FT_PtrDist ;  This is equivalent to the ANSI\u00a0C \u2018ptrdiff_t\u2019 type, i.e., the largest  signed  integer type used to express the distance between two pointers.",
            "title": "FT_PtrDist"
        },
        {
            "location": "/ft2-basic_types/#ft_string",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   char    FT_String ;  A simple typedef for the char type, usually used for strings.",
            "title": "FT_String"
        },
        {
            "location": "/ft2-basic_types/#ft_tag",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   FT_UInt32    FT_Tag ;  A typedef for 32-bit tags (as used in the SFNT format).",
            "title": "FT_Tag"
        },
        {
            "location": "/ft2-basic_types/#ft_error",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   int    FT_Error ;  The FreeType error code type. A value of\u00a00 is always interpreted as a successful operation.",
            "title": "FT_Error"
        },
        {
            "location": "/ft2-basic_types/#ft_fixed",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   signed   long    FT_Fixed ;  This type is used to store 16.16 fixed-point values, like scaling values or matrix coefficients.",
            "title": "FT_Fixed"
        },
        {
            "location": "/ft2-basic_types/#ft_pointer",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   void *   FT_Pointer ;  A simple typedef for a typeless pointer.",
            "title": "FT_Pointer"
        },
        {
            "location": "/ft2-basic_types/#ft_pos",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).  \n   typedef   signed   long    FT_Pos ;  The type FT_Pos is used to store vectorial coordinates. Depending on the context, these can represent distances in integer font units, or 16.16, or 26.6 fixed-point pixel coordinates.",
            "title": "FT_Pos"
        },
        {
            "location": "/ft2-basic_types/#ft_vector",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).  \n   typedef   struct   FT_Vector_\n  {\n     FT_Pos   x;\n     FT_Pos   y;\n\n  }  FT_Vector ;  A simple structure used to store a 2D vector; coordinates are of the FT_Pos type.",
            "title": "FT_Vector"
        },
        {
            "location": "/ft2-basic_types/#ft_bbox",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).  \n   typedef   struct   FT_BBox_\n  {\n     FT_Pos   xMin, yMin;\n     FT_Pos   xMax, yMax;\n\n  }  FT_BBox ;  A structure used to hold an outline's bounding box, i.e., the coordinates of its extrema in the horizontal and vertical directions.",
            "title": "FT_BBox"
        },
        {
            "location": "/ft2-basic_types/#ft_matrix",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   struct   FT_Matrix_\n  {\n     FT_Fixed   xx, xy;\n     FT_Fixed   yx, yy;\n\n  }  FT_Matrix ;  A simple structure used to store a 2x2 matrix. Coefficients are in 16.16 fixed-point format. The computation performed is:    x' = x*xx + y*xy\n   y' = x*yx + y*yy",
            "title": "FT_Matrix"
        },
        {
            "location": "/ft2-basic_types/#ft_fword",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   signed   short    FT_FWord ;   /* distance in FUnits */  A signed 16-bit integer used to store a distance in original font units.",
            "title": "FT_FWord"
        },
        {
            "location": "/ft2-basic_types/#ft_ufword",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   unsigned   short    FT_UFWord ;  /*  unsigned  distance */  An unsigned 16-bit integer used to store a distance in original font units.",
            "title": "FT_UFWord"
        },
        {
            "location": "/ft2-basic_types/#ft_f2dot14",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   signed   short    FT_F2Dot14 ;  A signed 2.14 fixed-point type used for unit vectors.",
            "title": "FT_F2Dot14"
        },
        {
            "location": "/ft2-basic_types/#ft_unitvector",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   struct   FT_UnitVector_\n  {\n     FT_F2Dot14   x;\n     FT_F2Dot14   y;\n\n  }  FT_UnitVector ;  A simple structure used to store a 2D vector unit vector. Uses FT_F2Dot14 types.",
            "title": "FT_UnitVector"
        },
        {
            "location": "/ft2-basic_types/#ft_f26dot6",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   signed   long    FT_F26Dot6 ;  A signed 26.6 fixed-point type used for vectorial pixel coordinates.",
            "title": "FT_F26Dot6"
        },
        {
            "location": "/ft2-basic_types/#ft_data",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   struct   FT_Data_\n  {\n     const   FT_Byte *  pointer;\n     FT_Int           length;\n\n  }  FT_Data ;  Read-only binary data represented as a pointer and a length.",
            "title": "FT_Data"
        },
        {
            "location": "/ft2-basic_types/#ft_make_tag",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n#define  FT_MAKE_TAG ( _x1, _x2, _x3, _x4 ) \\\n          ( FT_Tag )                        \\\n          ( ( ( FT_ULong )_x1 << 24 ) |     \\\n            ( ( FT_ULong )_x2 << 16 ) |     \\\n            ( ( FT_ULong )_x3 <<  8 ) |     \\\n              ( FT_ULong )_x4         )  This macro converts four-letter tags that are used to label TrueType tables into an unsigned long, to be used within FreeType.",
            "title": "FT_MAKE_TAG"
        },
        {
            "location": "/ft2-basic_types/#ft_generic",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   struct   FT_Generic_\n  {\n     void *                 data;\n     FT_Generic_Finalizer   finalizer;\n\n  }  FT_Generic ;  Client applications often need to associate their own data to a variety of FreeType core objects. For example, a text layout API might want to associate a glyph cache to a given size object.  Some FreeType object contains a \u2018generic\u2019 field, of type FT_Generic, which usage is left to client applications and font servers.  It can be used to store a pointer to client-specific data, as well as the address of a \u2018finalizer\u2019 function, which will be called by FreeType when the object is destroyed (for example, the previous client example would put the address of the glyph cache destructor in the \u2018finalizer\u2019 field).",
            "title": "FT_Generic"
        },
        {
            "location": "/ft2-basic_types/#ft_generic_finalizer",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).  \n   typedef   void   (* FT_Generic_Finalizer )(  void *  object );  Describe a function used to destroy the \u2018client\u2019 data of any FreeType object. See the description of the  FT_Generic  type for details of usage.",
            "title": "FT_Generic_Finalizer"
        },
        {
            "location": "/ft2-basic_types/#ft_bitmap",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).  \n   typedef   struct   FT_Bitmap_\n  {\n     unsigned   int     rows;\n     unsigned   int     width;\n     int              pitch;\n     unsigned   char *  buffer;\n     unsigned   short   num_grays;\n     unsigned   char    pixel_mode;\n     unsigned   char    palette_mode;\n     void *           palette;\n\n  }  FT_Bitmap ;  A structure used to describe a bitmap or pixmap to the raster. Note that we now manage pixmaps of various depths through the \u2018pixel_mode\u2019 field.",
            "title": "FT_Bitmap"
        },
        {
            "location": "/ft2-basic_types/#ft_pixel_mode",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).  \n   typedef   enum   FT_Pixel_Mode_\n  {\n     FT_PIXEL_MODE_NONE  = 0,\n     FT_PIXEL_MODE_MONO ,\n     FT_PIXEL_MODE_GRAY ,\n     FT_PIXEL_MODE_GRAY2 ,\n     FT_PIXEL_MODE_GRAY4 ,\n     FT_PIXEL_MODE_LCD ,\n     FT_PIXEL_MODE_LCD_V ,\n     FT_PIXEL_MODE_BGRA ,\n\n    FT_PIXEL_MODE_MAX      /* do not remove */\n\n  }  FT_Pixel_Mode ;\n\n\n  /* these constants are deprecated; use the corresponding ` FT_Pixel_Mode ' */\n  /* values instead.                                                       */\n#define ft_pixel_mode_none    FT_PIXEL_MODE_NONE \n#define ft_pixel_mode_mono    FT_PIXEL_MODE_MONO \n#define ft_pixel_mode_grays   FT_PIXEL_MODE_GRAY \n#define ft_pixel_mode_pal2    FT_PIXEL_MODE_GRAY2 \n#define ft_pixel_mode_pal4    FT_PIXEL_MODE_GRAY4   An enumeration type used to describe the format of pixels in a given bitmap. Note that additional formats may be added in the future.",
            "title": "FT_Pixel_Mode"
        },
        {
            "location": "/ft2-basic_types/#ft_glyph_format",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).  \n   typedef   enum   FT_Glyph_Format_\n  {\n     FT_IMAGE_TAG (  FT_GLYPH_FORMAT_NONE , 0, 0, 0, 0 ),\n\n     FT_IMAGE_TAG (  FT_GLYPH_FORMAT_COMPOSITE , 'c', 'o', 'm', 'p' ),\n     FT_IMAGE_TAG (  FT_GLYPH_FORMAT_BITMAP ,    'b', 'i', 't', 's' ),\n     FT_IMAGE_TAG (  FT_GLYPH_FORMAT_OUTLINE ,   'o', 'u', 't', 'l' ),\n     FT_IMAGE_TAG (  FT_GLYPH_FORMAT_PLOTTER ,   'p', 'l', 'o', 't' )\n\n  }  FT_Glyph_Format ;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* ` FT_Glyph_Format ' values instead.                     */\n#define ft_glyph_format_none        FT_GLYPH_FORMAT_NONE \n#define ft_glyph_format_composite   FT_GLYPH_FORMAT_COMPOSITE \n#define ft_glyph_format_bitmap      FT_GLYPH_FORMAT_BITMAP \n#define ft_glyph_format_outline     FT_GLYPH_FORMAT_OUTLINE \n#define ft_glyph_format_plotter     FT_GLYPH_FORMAT_PLOTTER   An enumeration type used to describe the format of a given glyph image. Note that this version of FreeType only supports two image formats, even though future font drivers will be able to register their own format.",
            "title": "FT_Glyph_Format"
        },
        {
            "location": "/ft2-basic_types/#ft_image_tag",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).  \n#ifndef  FT_IMAGE_TAG \n#define  FT_IMAGE_TAG ( value, _x1, _x2, _x3, _x4 )  \\\n          value = ( ( ( unsigned   long )_x1 << 24 ) | \\\n                    ( ( unsigned   long )_x2 << 16 ) | \\\n                    ( ( unsigned   long )_x3 << 8  ) | \\\n                      ( unsigned   long )_x4         )\n#endif /*  FT_IMAGE_TAG  */  This macro converts four-letter tags to an unsigned long type.",
            "title": "FT_IMAGE_TAG"
        },
        {
            "location": "/ft2-base_interface/",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Base Interface\n\n\n\n\nBase Interface\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section describes the most important public high-level API functions of FreeType\u00a02.\n\n\nFT_Library\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_LibraryRec_  *\nFT_Library\n;\n\n\n\n\nA handle to a FreeType library instance. Each \u2018library\u2019 is completely independent from the others; it is the \u2018root\u2019 of a set of objects like fonts, faces, sizes, etc.\n\n\nIt also embeds a memory manager (see \nFT_Memory\n), as well as a scan-line converter object (see \nFT_Raster\n).\n\n\nIn multi-threaded applications it is easiest to use one \u2018FT_Library\u2019 object per thread. In case this is too cumbersome, a single \u2018FT_Library\u2019 object across threads is possible also (since FreeType version 2.5.6), as long as a mutex lock is used around \nFT_New_Face\n and \nFT_Done_Face\n.\n\n\nnote\n\n\n\nLibrary objects are normally created by \nFT_Init_FreeType\n, and destroyed with \nFT_Done_FreeType\n. If you need reference-counting (cf. \nFT_Reference_Library\n), use \nFT_New_Library\n and \nFT_Done_Library\n.\n\n\n\n\n\nFT_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_FaceRec_*  \nFT_Face\n;\n\n\n\n\nA handle to a typographic face object. A face object models a given typeface, in a given style.\n\n\nnote\n\n\n\nA face object also owns a single \nFT_GlyphSlot\n object, as well as one or more \nFT_Size\n objects.\n\n\nUse \nFT_New_Face\n or \nFT_Open_Face\n to create a new face object from a given filepath or a custom input stream.\n\n\nUse \nFT_Done_Face\n to destroy it (along with its slot and sizes).\n\n\nAn \u2018FT_Face\u2019 object can only be safely used from one thread at a time. Similarly, creation and destruction of \u2018FT_Face\u2019 with the same \nFT_Library\n object can only be done from one thread at a time. On the other hand, functions like \nFT_Load_Glyph\n and its siblings are thread-safe and do not need the lock to be held as long as the same \u2018FT_Face\u2019 object is not used from multiple threads at the same time.\n\n\nalso\n\n\n\nSee \nFT_FaceRec\n for the publicly accessible fields of a given face object.\n\n\n\n\n\nFT_Size\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_SizeRec_*  \nFT_Size\n;\n\n\n\n\nA handle to an object that models a face scaled to a given character size.\n\n\nnote\n\n\n\nAn \nFT_Face\n has one \nactive\n \nFT_Size\n object that is used by functions like \nFT_Load_Glyph\n to determine the scaling transformation that in turn is used to load and hint glyphs and metrics.\n\n\nYou can use \nFT_Set_Char_Size\n, \nFT_Set_Pixel_Sizes\n, \nFT_Request_Size\n or even \nFT_Select_Size\n to change the content (i.e., the scaling values) of the active \nFT_Size\n.\n\n\nYou can use \nFT_New_Size\n to create additional size objects for a given \nFT_Face\n, but they won't be used by other functions until you activate it through \nFT_Activate_Size\n. Only one size can be activated at any given time per face.\n\n\nalso\n\n\n\nSee \nFT_SizeRec\n for the publicly accessible fields of a given size object.\n\n\n\n\n\nFT_GlyphSlot\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_GlyphSlotRec_*  \nFT_GlyphSlot\n;\n\n\n\n\nA handle to a given \u2018glyph slot\u2019. A slot is a container that can hold any of the glyphs contained in its parent face.\n\n\nIn other words, each time you call \nFT_Load_Glyph\n or \nFT_Load_Char\n, the slot's content is erased by the new glyph data, i.e., the glyph's metrics, its image (bitmap or outline), and other control information.\n\n\nalso\n\n\n\nSee \nFT_GlyphSlotRec\n for the publicly accessible glyph fields.\n\n\n\n\n\nFT_CharMap\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_CharMapRec_*  \nFT_CharMap\n;\n\n\n\n\nA handle to a character map (usually abbreviated to \u2018charmap\u2019). A charmap is used to translate character codes in a given encoding into glyph indexes for its parent's face. Some font formats may provide several charmaps per font.\n\n\nEach face object owns zero or more charmaps, but only one of them can be \u2018active\u2019, providing the data used by \nFT_Get_Char_Index\n or \nFT_Load_Char\n.\n\n\nThe list of available charmaps in a face is available through the \u2018face->num_charmaps\u2019 and \u2018face->charmaps\u2019 fields of \nFT_FaceRec\n.\n\n\nThe currently active charmap is available as \u2018face->charmap\u2019. You should call \nFT_Set_Charmap\n to change it.\n\n\nnote\n\n\n\nWhen a new face is created (either through \nFT_New_Face\n or \nFT_Open_Face\n), the library looks for a Unicode charmap within the list and automatically activates it. If there is no Unicode charmap, FreeType doesn't set an \u2018active\u2019 charmap.\n\n\nalso\n\n\n\nSee \nFT_CharMapRec\n for the publicly accessible fields of a given character map.\n\n\n\n\n\nFT_Encoding\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nenum\n  FT_Encoding_\n  {\n    \nFT_ENC_TAG\n( \nFT_ENCODING_NONE\n, 0, 0, 0, 0 ),\n\n    \nFT_ENC_TAG\n( \nFT_ENCODING_MS_SYMBOL\n, 's', 'y', 'm', 'b' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_UNICODE\n,   'u', 'n', 'i', 'c' ),\n\n    \nFT_ENC_TAG\n( \nFT_ENCODING_SJIS\n,    's', 'j', 'i', 's' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_PRC\n,     'g', 'b', ' ', ' ' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_BIG5\n,    'b', 'i', 'g', '5' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_WANSUNG\n, 'w', 'a', 'n', 's' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_JOHAB\n,   'j', 'o', 'h', 'a' ),\n\n    /* for backward compatibility */\n    FT_ENCODING_GB2312     = \nFT_ENCODING_PRC\n,\n    \nFT_ENCODING_MS_SJIS\n    = \nFT_ENCODING_SJIS\n,\n    \nFT_ENCODING_MS_GB2312\n  = \nFT_ENCODING_PRC\n,\n    \nFT_ENCODING_MS_BIG5\n    = \nFT_ENCODING_BIG5\n,\n    \nFT_ENCODING_MS_WANSUNG\n = \nFT_ENCODING_WANSUNG\n,\n    \nFT_ENCODING_MS_JOHAB\n   = \nFT_ENCODING_JOHAB\n,\n\n    \nFT_ENC_TAG\n( \nFT_ENCODING_ADOBE_STANDARD\n, 'A', 'D', 'O', 'B' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_ADOBE_EXPERT\n,   'A', 'D', 'B', 'E' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_ADOBE_CUSTOM\n,   'A', 'D', 'B', 'C' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_ADOBE_LATIN_1\n,  'l', 'a', 't', '1' ),\n\n    \nFT_ENC_TAG\n( \nFT_ENCODING_OLD_LATIN_2\n, 'l', 'a', 't', '2' ),\n\n    \nFT_ENC_TAG\n( \nFT_ENCODING_APPLE_ROMAN\n, 'a', 'r', 'm', 'n' )\n\n  } \nFT_Encoding\n;\n\n\n  /* these constants are deprecated; use the corresponding `\nFT_Encoding\n' */\n  /* values instead                                                      */\n#define ft_encoding_none            \nFT_ENCODING_NONE\n\n#define ft_encoding_unicode         \nFT_ENCODING_UNICODE\n\n#define ft_encoding_symbol          \nFT_ENCODING_MS_SYMBOL\n\n#define ft_encoding_latin_1         \nFT_ENCODING_ADOBE_LATIN_1\n\n#define ft_encoding_latin_2         \nFT_ENCODING_OLD_LATIN_2\n\n#define ft_encoding_sjis            \nFT_ENCODING_SJIS\n\n#define ft_encoding_gb2312          \nFT_ENCODING_PRC\n\n#define ft_encoding_big5            \nFT_ENCODING_BIG5\n\n#define ft_encoding_wansung         \nFT_ENCODING_WANSUNG\n\n#define ft_encoding_johab           \nFT_ENCODING_JOHAB\n\n\n#define ft_encoding_adobe_standard  \nFT_ENCODING_ADOBE_STANDARD\n\n#define ft_encoding_adobe_expert    \nFT_ENCODING_ADOBE_EXPERT\n\n#define ft_encoding_adobe_custom    \nFT_ENCODING_ADOBE_CUSTOM\n\n#define ft_encoding_apple_roman     \nFT_ENCODING_APPLE_ROMAN\n\n\n\n\n\nAn enumeration to specify character sets supported by charmaps. Used in the \nFT_Select_Charmap\n API function.\n\n\nnote\n\n\n\nDespite the name, this enumeration lists specific character repertories (i.e., charsets), and not text encoding methods (e.g., UTF-8, UTF-16, etc.).\n\n\nOther encodings might be defined in the future.\n\n\nvalues\n\n\n\n\n\nFT_ENCODING_NONE\n\n\nThe encoding value\u00a00 is reserved.\n\n\n\nFT_ENCODING_UNICODE\n\n\nThe Unicode character set. This value covers all versions of the Unicode repertoire, including ASCII and Latin-1. Most fonts include a Unicode charmap, but not all of them.\n\nFor example, if you want to access Unicode value U+1F028 (and the font contains it), use value 0x1F028 as the input value for \nFT_Get_Char_Index\n.\n\n\n\nFT_ENCODING_MS_SYMBOL\n\n\nMicrosoft Symbol encoding, used to encode mathematical symbols and wingdings. For more information, see \u2018\n\u2019, \u2018\n\u2019, and \u2018\n\u2019.\n\nThis encoding uses character codes from the PUA (Private Unicode Area) in the range U+F020-U+F0FF.\n\n\n\nFT_ENCODING_SJIS\n\n\nShift JIS encoding for Japanese. More info at \u2018\n\u2019. See note on multi-byte encodings below.\n\n\n\nFT_ENCODING_PRC\n\n\nCorresponds to encoding systems mainly for Simplified Chinese as used in People's Republic of China (PRC). The encoding layout is based on GB\u00a02312 and its supersets GBK and GB\u00a018030.\n\n\n\nFT_ENCODING_BIG5\n\n\nCorresponds to an encoding system for Traditional Chinese as used in Taiwan and Hong Kong.\n\n\n\nFT_ENCODING_WANSUNG\n\n\nCorresponds to the Korean encoding system known as Extended Wansung (MS Windows code page 949). For more information see \u2018\n\u2019.\n\n\n\nFT_ENCODING_JOHAB\n\n\nThe Korean standard character set (KS\u00a0C 5601-1992), which corresponds to MS Windows code page 1361. This character set includes all possible Hangul character combinations.\n\n\n\nFT_ENCODING_ADOBE_LATIN_1\n\n\nCorresponds to a Latin-1 encoding as defined in a Type\u00a01 PostScript font. It is limited to 256 character codes.\n\n\n\nFT_ENCODING_ADOBE_STANDARD\n\n\nAdobe Standard encoding, as found in Type\u00a01, CFF, and OpenType/CFF fonts. It is limited to 256 character codes.\n\n\n\nFT_ENCODING_ADOBE_EXPERT\n\n\nAdobe Expert encoding, as found in Type\u00a01, CFF, and OpenType/CFF fonts. It is limited to 256 character codes.\n\n\n\nFT_ENCODING_ADOBE_CUSTOM\n\n\nCorresponds to a custom encoding, as found in Type\u00a01, CFF, and OpenType/CFF fonts. It is limited to 256 character codes.\n\n\n\nFT_ENCODING_APPLE_ROMAN\n\n\nApple roman encoding. Many TrueType and OpenType fonts contain a charmap for this 8-bit encoding, since older versions of Mac OS are able to use it.\n\n\n\nFT_ENCODING_OLD_LATIN_2\n\n\nThis value is deprecated and was neither used nor reported by FreeType. Don't use or test for it.\n\n\n\nFT_ENCODING_MS_SJIS\n\n\nSame as FT_ENCODING_SJIS. Deprecated.\n\n\n\nFT_ENCODING_MS_GB2312\n\n\nSame as FT_ENCODING_PRC. Deprecated.\n\n\n\nFT_ENCODING_MS_BIG5\n\n\nSame as FT_ENCODING_BIG5. Deprecated.\n\n\n\nFT_ENCODING_MS_WANSUNG\n\n\nSame as FT_ENCODING_WANSUNG. Deprecated.\n\n\n\nFT_ENCODING_MS_JOHAB\n\n\nSame as FT_ENCODING_JOHAB. Deprecated.\n\n\n\n\n\n\nnote\n\n\n\nBy default, FreeType enables a Unicode charmap and tags it with FT_ENCODING_UNICODE when it is either provided or can be generated from PostScript glyph name dictionaries in the font file. All other encodings are considered legacy and tagged only if explicitly defined in the font file. Otherwise, FT_ENCODING_NONE is used.\n\n\nFT_ENCODING_NONE is set by the BDF and PCF drivers if the charmap is neither Unicode nor ISO-8859-1 (otherwise it is set to FT_ENCODING_UNICODE). Use \nFT_Get_BDF_Charset_ID\n to find out which encoding is really present. If, for example, the \u2018cs_registry\u2019 field is \u2018KOI8\u2019 and the \u2018cs_encoding\u2019 field is \u2018R\u2019, the font is encoded in KOI8-R.\n\n\nFT_ENCODING_NONE is always set (with a single exception) by the winfonts driver. Use \nFT_Get_WinFNT_Header\n and examine the \u2018charset\u2019 field of the \nFT_WinFNT_HeaderRec\n structure to find out which encoding is really present. For example, \nFT_WinFNT_ID_CP1251\n (204) means Windows code page 1251 (for Russian).\n\n\nFT_ENCODING_NONE is set if \u2018platform_id\u2019 is \nTT_PLATFORM_MACINTOSH\n and \u2018encoding_id\u2019 is not \u2018TT_MAC_ID_ROMAN\u2019 (otherwise it is set to FT_ENCODING_APPLE_ROMAN).\n\n\nIf \u2018platform_id\u2019 is \nTT_PLATFORM_MACINTOSH\n, use the function \nFT_Get_CMap_Language_ID\n to query the Mac language ID that may be needed to be able to distinguish Apple encoding variants. See\n\n\nhttps://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n\n\nto get an idea how to do that. Basically, if the language ID is\u00a00, don't use it, otherwise subtract 1 from the language ID. Then examine \u2018encoding_id\u2019. If, for example, \u2018encoding_id\u2019 is \u2018TT_MAC_ID_ROMAN\u2019 and the language ID (minus\u00a01) is \u2018TT_MAC_LANGID_GREEK\u2019, it is the Greek encoding, not Roman. \u2018TT_MAC_ID_ARABIC\u2019 with \u2018TT_MAC_LANGID_FARSI\u2019 means the Farsi variant the Arabic encoding.\n\n\n\n\n\nFT_ENC_TAG\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#ifndef \nFT_ENC_TAG\n\n#define \nFT_ENC_TAG\n( value, a, b, c, d )         \\\n          value = ( ( (\nFT_UInt32\n)(a) << 24 ) |  \\\n                    ( (\nFT_UInt32\n)(b) << 16 ) |  \\\n                    ( (\nFT_UInt32\n)(c) <<  8 ) |  \\\n                      (\nFT_UInt32\n)(d)         )\n\n#endif /* \nFT_ENC_TAG\n */\n\n\n\n\nThis macro converts four-letter tags into an unsigned long. It is used to define \u2018encoding\u2019 identifiers (see \nFT_Encoding\n).\n\n\nnote\n\n\n\nSince many 16-bit compilers don't like 32-bit enumerations, you should redefine this macro in case of problems to something like this:\n\n  #define FT_ENC_TAG( value, a, b, c, d )  value\n\n\n\nto get a simple enumeration without assigning special numbers.\n\n\n\n\n\nFT_FaceRec\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_FaceRec_\n  {\n    \nFT_Long\n           num_faces;\n    \nFT_Long\n           face_index;\n\n    \nFT_Long\n           face_flags;\n    \nFT_Long\n           style_flags;\n\n    \nFT_Long\n           num_glyphs;\n\n    \nFT_String\n*        family_name;\n    \nFT_String\n*        style_name;\n\n    \nFT_Int\n            num_fixed_sizes;\n    \nFT_Bitmap_Size\n*   available_sizes;\n\n    \nFT_Int\n            num_charmaps;\n    \nFT_CharMap\n*       charmaps;\n\n    \nFT_Generic\n        generic;\n\n    /*# The following member variables (down to `underline_thickness') */\n    /*# are only relevant to scalable outlines; cf. @\nFT_Bitmap_Size\n    */\n    /*# for bitmap fonts.                                              */\n    \nFT_BBox\n           bbox;\n\n    \nFT_UShort\n         units_per_EM;\n    \nFT_Short\n          ascender;\n    \nFT_Short\n          descender;\n    \nFT_Short\n          height;\n\n    \nFT_Short\n          max_advance_width;\n    \nFT_Short\n          max_advance_height;\n\n    \nFT_Short\n          underline_position;\n    \nFT_Short\n          underline_thickness;\n\n    \nFT_GlyphSlot\n      glyph;\n    \nFT_Size\n           size;\n    \nFT_CharMap\n        charmap;\n\n    /*@private begin */\n\n    \nFT_Driver\n         driver;\n    \nFT_Memory\n         memory;\n    \nFT_Stream\n         stream;\n\n    \nFT_ListRec\n        sizes_list;\n\n    \nFT_Generic\n        autohint;   /* face-specific auto-hinter data */\n    \nvoid\n*             extensions; /* unused                         */\n\n    \nFT_Face_Internal\n  internal;\n\n    /*@private end */\n\n  } \nFT_FaceRec\n;\n\n\n\n\nFreeType root face class structure. A face object models a typeface in a font file.\n\n\nfields\n\n\n\n\n\nnum_faces\n\n\nThe number of faces in the font file. Some font formats can have multiple faces in a single font file.\n\n\n\nface_index\n\n\nThis field holds two different values. Bits 0-15 are the index of the face in the font file (starting with value\u00a00). They are set to\u00a00 if there is only one face in the font file.\n\n[Since 2.6.1] Bits 16-30 are relevant to GX and OpenType variation fonts only, holding the named instance index for the current face index (starting with value\u00a01; value\u00a00 indicates font access without a named instance). For non-variation fonts, bits 16-30 are ignored. If we have the third named instance of face\u00a04, say, \u2018face_index\u2019 is set to 0x00030004.\n\nBit 31 is always zero (this is, \u2018face_index\u2019 is always a positive value).\n\n[Since 2.9] Changing the design coordinates with \nFT_Set_Var_Design_Coordinates\n or \nFT_Set_Var_Blend_Coordinates\n does not influence the named instance index value (only \nFT_Set_Named_Instance\n does that).\n\n\n\nface_flags\n\n\nA set of bit flags that give important information about the face; see \nFT_FACE_FLAG_XXX\n for the details.\n\n\n\nstyle_flags\n\n\nThe lower 16\u00a0bits contain a set of bit flags indicating the style of the face; see \nFT_STYLE_FLAG_XXX\n for the details.\n\n[Since 2.6.1] Bits 16-30 hold the number of named instances available for the current face if we have a GX or OpenType variation (sub)font. Bit 31 is always zero (this is, \u2018style_flags\u2019 is always a positive value). Note that a variation font has always at least one named instance, namely the default instance.\n\n\n\nnum_glyphs\n\n\nThe number of glyphs in the face. If the face is scalable and has sbits (see \u2018num_fixed_sizes\u2019), it is set to the number of outline glyphs.\n\nFor CID-keyed fonts (not in an SFNT wrapper) this value gives the highest CID used in the font.\n\n\n\nfamily_name\n\n\nThe face's family name. This is an ASCII string, usually in English, that describes the typeface's family (like \u2018Times New Roman\u2019, \u2018Bodoni\u2019, \u2018Garamond\u2019, etc). This is a least common denominator used to list fonts. Some formats (TrueType & OpenType) provide localized and Unicode versions of this string. Applications should use the format specific interface to access them. Can be NULL (e.g., in fonts embedded in a PDF file).\n\nIn case the font doesn't provide a specific family name entry, FreeType tries to synthesize one, deriving it from other name entries.\n\n\n\nstyle_name\n\n\nThe face's style name. This is an ASCII string, usually in English, that describes the typeface's style (like \u2018Italic\u2019, \u2018Bold\u2019, \u2018Condensed\u2019, etc). Not all font formats provide a style name, so this field is optional, and can be set to NULL. As for \u2018family_name\u2019, some formats provide localized and Unicode versions of this string. Applications should use the format specific interface to access them.\n\n\n\nnum_fixed_sizes\n\n\nThe number of bitmap strikes in the face. Even if the face is scalable, there might still be bitmap strikes, which are called \u2018sbits\u2019 in that case.\n\n\n\navailable_sizes\n\n\nAn array of \nFT_Bitmap_Size\n for all bitmap strikes in the face. It is set to NULL if there is no bitmap strike.\n\nNote that FreeType tries to sanitize the strike data since they are sometimes sloppy or incorrect, but this can easily fail.\n\n\n\nnum_charmaps\n\n\nThe number of charmaps in the face.\n\n\n\ncharmaps\n\n\nAn array of the charmaps of the face.\n\n\n\ngeneric\n\n\nA field reserved for client uses. See the \nFT_Generic\n type description.\n\n\n\nbbox\n\n\nThe font bounding box. Coordinates are expressed in font units (see \u2018units_per_EM\u2019). The box is large enough to contain any glyph from the font. Thus, \u2018bbox.yMax\u2019 can be seen as the \u2018maximum ascender\u2019, and \u2018bbox.yMin\u2019 as the \u2018minimum descender\u2019. Only relevant for scalable formats.\n\nNote that the bounding box might be off by (at least) one pixel for hinted fonts. See \nFT_Size_Metrics\n for further discussion.\n\n\n\nunits_per_EM\n\n\nThe number of font units per EM square for this face. This is typically 2048 for TrueType fonts, and 1000 for Type\u00a01 fonts. Only relevant for scalable formats.\n\n\n\nascender\n\n\nThe typographic ascender of the face, expressed in font units. For font formats not having this information, it is set to \u2018bbox.yMax\u2019. Only relevant for scalable formats.\n\n\n\ndescender\n\n\nThe typographic descender of the face, expressed in font units. For font formats not having this information, it is set to \u2018bbox.yMin\u2019. Note that this field is negative for values below the baseline. Only relevant for scalable formats.\n\n\n\nheight\n\n\nThis value is the vertical distance between two consecutive baselines, expressed in font units. It is always positive. Only relevant for scalable formats.\n\nIf you want the global glyph height, use \u2018ascender - descender\u2019.\n\n\n\nmax_advance_width\n\n\nThe maximum advance width, in font units, for all glyphs in this face. This can be used to make word wrapping computations faster. Only relevant for scalable formats.\n\n\n\nmax_advance_height\n\n\nThe maximum advance height, in font units, for all glyphs in this face. This is only relevant for vertical layouts, and is set to \u2018height\u2019 for fonts that do not provide vertical metrics. Only relevant for scalable formats.\n\n\n\nunderline_position\n\n\nThe position, in font units, of the underline line for this face. It is the center of the underlining stem. Only relevant for scalable formats.\n\n\n\nunderline_thickness\n\n\nThe thickness, in font units, of the underline for this face. Only relevant for scalable formats.\n\n\n\nglyph\n\n\nThe face's associated glyph slot(s).\n\n\n\nsize\n\n\nThe current active size for this face.\n\n\n\ncharmap\n\n\nThe current active charmap for this face.\n\n\n\n\n\n\nnote\n\n\n\nFields may be changed after a call to \nFT_Attach_File\n or \nFT_Attach_Stream\n.\n\n\nFor an OpenType variation font, the values of the following fields can change after a call to \nFT_Set_Var_Design_Coordinates\n (and friends) if the font contains an \u2018MVAR\u2019 table: \u2018ascender\u2019, \u2018descender\u2019, \u2018height\u2019, \u2018underline_position\u2019, and \u2018underline_thickness\u2019.\n\n\nEspecially for TrueType fonts see also the documentation for \nFT_Size_Metrics\n.\n\n\n\n\n\nFT_HAS_HORIZONTAL\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_HAS_HORIZONTAL\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_HORIZONTAL\n )\n\n\n\n\nA macro that returns true whenever a face object contains horizontal metrics (this is true for all font formats though).\n\n\nalso\n\n\n\nFT_HAS_VERTICAL\n can be used to check for vertical metrics.\n\n\n\n\n\nFT_HAS_VERTICAL\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_HAS_VERTICAL\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_VERTICAL\n )\n\n\n\n\nA macro that returns true whenever a face object contains real vertical metrics (and not only synthesized ones).\n\n\n\n\n\nFT_HAS_KERNING\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_HAS_KERNING\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_KERNING\n )\n\n\n\n\nA macro that returns true whenever a face object contains kerning data that can be accessed with \nFT_Get_Kerning\n.\n\n\n\n\n\nFT_HAS_FIXED_SIZES\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_HAS_FIXED_SIZES\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_FIXED_SIZES\n )\n\n\n\n\nA macro that returns true whenever a face object contains some embedded bitmaps. See the \u2018available_sizes\u2019 field of the \nFT_FaceRec\n structure.\n\n\n\n\n\nFT_HAS_GLYPH_NAMES\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_HAS_GLYPH_NAMES\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_GLYPH_NAMES\n )\n\n\n\n\nA macro that returns true whenever a face object contains some glyph names that can be accessed through \nFT_Get_Glyph_Name\n.\n\n\n\n\n\nFT_HAS_COLOR\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_HAS_COLOR\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_COLOR\n )\n\n\n\n\nA macro that returns true whenever a face object contains tables for color glyphs.\n\n\nsince\n\n\n\n2.5.1\n\n\n\n\n\nFT_HAS_MULTIPLE_MASTERS\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_HAS_MULTIPLE_MASTERS\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_MULTIPLE_MASTERS\n )\n\n\n\n\nA macro that returns true whenever a face object contains some multiple masters. The functions provided by \nFT_MULTIPLE_MASTERS_H\n are then available to choose the exact design you want.\n\n\n\n\n\nFT_IS_SFNT\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_IS_SFNT\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_SFNT\n )\n\n\n\n\nA macro that returns true whenever a face object contains a font whose format is based on the SFNT storage scheme. This usually means: TrueType fonts, OpenType fonts, as well as SFNT-based embedded bitmap fonts.\n\n\nIf this macro is true, all functions defined in \nFT_SFNT_NAMES_H\n and \nFT_TRUETYPE_TABLES_H\n are available.\n\n\n\n\n\nFT_IS_SCALABLE\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_IS_SCALABLE\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_SCALABLE\n )\n\n\n\n\nA macro that returns true whenever a face object contains a scalable font face (true for TrueType, Type\u00a01, Type\u00a042, CID, OpenType/CFF, and PFR font formats).\n\n\n\n\n\nFT_IS_FIXED_WIDTH\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_IS_FIXED_WIDTH\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_FIXED_WIDTH\n )\n\n\n\n\nA macro that returns true whenever a face object contains a font face that contains fixed-width (or \u2018monospace\u2019, \u2018fixed-pitch\u2019, etc.) glyphs.\n\n\n\n\n\nFT_IS_CID_KEYED\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_IS_CID_KEYED\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_CID_KEYED\n )\n\n\n\n\nA macro that returns true whenever a face object contains a CID-keyed font. See the discussion of \nFT_FACE_FLAG_CID_KEYED\n for more details.\n\n\nIf this macro is true, all functions defined in \nFT_CID_H\n are available.\n\n\n\n\n\nFT_IS_TRICKY\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_IS_TRICKY\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_TRICKY\n )\n\n\n\n\nA macro that returns true whenever a face represents a \u2018tricky\u2019 font. See the discussion of \nFT_FACE_FLAG_TRICKY\n for more details.\n\n\n\n\n\nFT_IS_NAMED_INSTANCE\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_IS_NAMED_INSTANCE\n( face ) \\\n          ( (face)->face_index & 0x7FFF0000L )\n\n\n\n\nA macro that returns true whenever a face object is a named instance of a GX or OpenType variation font.\n\n\n[Since 2.9] Changing the design coordinates with \nFT_Set_Var_Design_Coordinates\n or \nFT_Set_Var_Blend_Coordinates\n does not influence the return value of this macro (only \nFT_Set_Named_Instance\n does that).\n\n\nsince\n\n\n\n2.7\n\n\n\n\n\nFT_IS_VARIATION\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_IS_VARIATION\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_VARIATION\n )\n\n\n\n\nA macro that returns true whenever a face object has been altered by \nFT_Set_MM_Design_Coordinates\n, \nFT_Set_Var_Design_Coordinates\n, or \nFT_Set_Var_Blend_Coordinates\n.\n\n\nsince\n\n\n\n2.9\n\n\n\n\n\nFT_SizeRec\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_SizeRec_\n  {\n    \nFT_Face\n           face;      /* parent face object              */\n    \nFT_Generic\n        generic;   /* generic pointer for client uses */\n    \nFT_Size_Metrics\n   metrics;   /* size metrics                    */\n    \nFT_Size_Internal\n  internal;\n\n  } \nFT_SizeRec\n;\n\n\n\n\nFreeType root size class structure. A size object models a face object at a given size.\n\n\nfields\n\n\n\n\n\nface\n\n\nHandle to the parent face object.\n\n\n\ngeneric\n\n\nA typeless pointer, unused by the FreeType library or any of its drivers. It can be used by client applications to link their own data to each size object.\n\n\n\nmetrics\n\n\nMetrics for this size object. This field is read-only.\n\n\n\n\n\n\n\n\n\nFT_Size_Metrics\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Size_Metrics_\n  {\n    \nFT_UShort\n  x_ppem;      /* horizontal pixels per EM               */\n    \nFT_UShort\n  y_ppem;      /* vertical pixels per EM                 */\n\n    \nFT_Fixed\n   x_scale;     /* scaling values used to convert font    */\n    \nFT_Fixed\n   y_scale;     /* units to 26.6 fractional pixels        */\n\n    \nFT_Pos\n     ascender;    /* ascender in 26.6 frac. pixels          */\n    \nFT_Pos\n     descender;   /* descender in 26.6 frac. pixels         */\n    \nFT_Pos\n     height;      /* text height in 26.6 frac. pixels       */\n    \nFT_Pos\n     max_advance; /* max horizontal advance, in 26.6 pixels */\n\n  } \nFT_Size_Metrics\n;\n\n\n\n\nThe size metrics structure gives the metrics of a size object.\n\n\nfields\n\n\n\n\n\nx_ppem\n\n\nThe width of the scaled EM square in pixels, hence the term \u2018ppem\u2019 (pixels per EM). It is also referred to as \u2018nominal width\u2019.\n\n\n\ny_ppem\n\n\nThe height of the scaled EM square in pixels, hence the term \u2018ppem\u2019 (pixels per EM). It is also referred to as \u2018nominal height\u2019.\n\n\n\nx_scale\n\n\nA 16.16 fractional scaling value to convert horizontal metrics from font units to 26.6 fractional pixels. Only relevant for scalable font formats.\n\n\n\ny_scale\n\n\nA 16.16 fractional scaling value to convert vertical metrics from font units to 26.6 fractional pixels. Only relevant for scalable font formats.\n\n\n\nascender\n\n\nThe ascender in 26.6 fractional pixels, rounded up to an integer value. See \nFT_FaceRec\n for the details.\n\n\n\ndescender\n\n\nThe descender in 26.6 fractional pixels, rounded down to an integer value. See \nFT_FaceRec\n for the details.\n\n\n\nheight\n\n\nThe height in 26.6 fractional pixels, rounded to an integer value. See \nFT_FaceRec\n for the details.\n\n\n\nmax_advance\n\n\nThe maximum advance width in 26.6 fractional pixels, rounded to an integer value. See \nFT_FaceRec\n for the details.\n\n\n\n\n\n\nnote\n\n\n\nThe scaling values, if relevant, are determined first during a size changing operation. The remaining fields are then set by the driver. For scalable formats, they are usually set to scaled values of the corresponding fields in \nFT_FaceRec\n. Some values like ascender or descender are rounded for historical reasons; more precise values (for outline fonts) can be derived by scaling the corresponding \nFT_FaceRec\n values manually, with code similar to the following.\n\n  scaled_ascender = FT_MulFix( face->ascender,\n                               size_metrics->y_scale );\n\n\n\nNote that due to glyph hinting and the selected rendering mode these values are usually not exact; consequently, they must be treated as unreliable with an error margin of at least one pixel!\n\n\nIndeed, the only way to get the exact metrics is to render \nall\n glyphs. As this would be a definite performance hit, it is up to client applications to perform such computations.\n\n\nThe \u2018FT_Size_Metrics\u2019 structure is valid for bitmap fonts also.\n\n\nTrueType\n \nfonts\n \nwith\n \nnative\n \nbytecode\n \nhinting\n\n\nAll applications that handle TrueType fonts with native hinting must be aware that TTFs expect different rounding of vertical font dimensions. The application has to cater for this, especially if it wants to rely on a TTF's vertical data (for example, to properly align box characters vertically).\n\n\nOnly the application knows \nin\n \nadvance\n that it is going to use native hinting for TTFs! FreeType, on the other hand, selects the hinting mode not at the time of creating an \nFT_Size\n object but much later, namely while calling \nFT_Load_Glyph\n.\n\n\nHere is some pseudo code that illustrates a possible solution.\n\n  font_format = FT_Get_Font_Format( face );\n\n  if ( !strcmp( font_format, \"TrueType\" ) &&\n       do_native_bytecode_hinting         )\n  {\n    ascender  = ROUND( FT_MulFix( face->ascender,\n                                  size_metrics->y_scale ) );\n    descender = ROUND( FT_MulFix( face->descender,\n                                  size_metrics->y_scale ) );\n  }\n  else\n  {\n    ascender  = size_metrics->ascender;\n    descender = size_metrics->descender;\n  }\n\n  height      = size_metrics->height;\n  max_advance = size_metrics->max_advance;\n\n\n\n\n\n\nFT_GlyphSlotRec\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_GlyphSlotRec_\n  {\n    \nFT_Library\n        library;\n    \nFT_Face\n           face;\n    \nFT_GlyphSlot\n      next;\n    \nFT_UInt\n           reserved;       /* retained for binary compatibility */\n    \nFT_Generic\n        generic;\n\n    \nFT_Glyph_Metrics\n  metrics;\n    \nFT_Fixed\n          linearHoriAdvance;\n    \nFT_Fixed\n          linearVertAdvance;\n    \nFT_Vector\n         advance;\n\n    \nFT_Glyph_Format\n   format;\n\n    \nFT_Bitmap\n         bitmap;\n    \nFT_Int\n            bitmap_left;\n    \nFT_Int\n            bitmap_top;\n\n    \nFT_Outline\n        outline;\n\n    \nFT_UInt\n           num_subglyphs;\n    \nFT_SubGlyph\n       subglyphs;\n\n    \nvoid\n*             control_data;\n    \nlong\n              control_len;\n\n    \nFT_Pos\n            lsb_delta;\n    \nFT_Pos\n            rsb_delta;\n\n    \nvoid\n*             other;\n\n    \nFT_Slot_Internal\n  internal;\n\n  } \nFT_GlyphSlotRec\n;\n\n\n\n\nFreeType root glyph slot class structure. A glyph slot is a container where individual glyphs can be loaded, be they in outline or bitmap format.\n\n\nfields\n\n\n\n\n\nlibrary\n\n\nA handle to the FreeType library instance this slot belongs to.\n\n\n\nface\n\n\nA handle to the parent face object.\n\n\n\nnext\n\n\nIn some cases (like some font tools), several glyph slots per face object can be a good thing. As this is rare, the glyph slots are listed through a direct, single-linked list using its \u2018next\u2019 field.\n\n\n\ngeneric\n\n\nA typeless pointer unused by the FreeType library or any of its drivers. It can be used by client applications to link their own data to each glyph slot object.\n\n\n\nmetrics\n\n\nThe metrics of the last loaded glyph in the slot. The returned values depend on the last load flags (see the \nFT_Load_Glyph\n API function) and can be expressed either in 26.6 fractional pixels or font units.\n\nNote that even when the glyph image is transformed, the metrics are not.\n\n\n\nlinearHoriAdvance\n\n\nThe advance width of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless \nFT_LOAD_LINEAR_DESIGN\n is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for outline glyphs.\n\n\n\nlinearVertAdvance\n\n\nThe advance height of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless \nFT_LOAD_LINEAR_DESIGN\n is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for outline glyphs.\n\n\n\nadvance\n\n\nThis shorthand is, depending on \nFT_LOAD_IGNORE_TRANSFORM\n, the transformed (hinted) advance width for the glyph, in 26.6 fractional pixel format. As specified with \nFT_LOAD_VERTICAL_LAYOUT\n, it uses either the \u2018horiAdvance\u2019 or the \u2018vertAdvance\u2019 value of \u2018metrics\u2019 field.\n\n\n\nformat\n\n\nThis field indicates the format of the image contained in the glyph slot. Typically \nFT_GLYPH_FORMAT_BITMAP\n, \nFT_GLYPH_FORMAT_OUTLINE\n, or \nFT_GLYPH_FORMAT_COMPOSITE\n, but other values are possible.\n\n\n\nbitmap\n\n\nThis field is used as a bitmap descriptor. Note that the address and content of the bitmap buffer can change between calls of \nFT_Load_Glyph\n and a few other functions.\n\n\n\nbitmap_left\n\n\nThe bitmap's left bearing expressed in integer pixels.\n\n\n\nbitmap_top\n\n\nThe bitmap's top bearing expressed in integer pixels. This is the distance from the baseline to the top-most glyph scanline, upwards y\u00a0coordinates being *positive*.\n\n\n\noutline\n\n\nThe outline descriptor for the current glyph image if its format is \nFT_GLYPH_FORMAT_OUTLINE\n. Once a glyph is loaded, \u2018outline\u2019 can be transformed, distorted, emboldened, etc. However, it must not be freed.\n\n\n\nnum_subglyphs\n\n\nThe number of subglyphs in a composite glyph. This field is only valid for the composite glyph format that should normally only be loaded with the \nFT_LOAD_NO_RECURSE\n flag.\n\n\n\nsubglyphs\n\n\nAn array of subglyph descriptors for composite glyphs. There are \u2018num_subglyphs\u2019 elements in there. Currently internal to FreeType.\n\n\n\ncontrol_data\n\n\nCertain font drivers can also return the control data for a given glyph image (e.g. TrueType bytecode, Type\u00a01 charstrings, etc.). This field is a pointer to such data; it is currently internal to FreeType.\n\n\n\ncontrol_len\n\n\nThis is the length in bytes of the control data. Currently internal to FreeType.\n\n\n\nother\n\n\nReserved.\n\n\n\nlsb_delta\n\n\nThe difference between hinted and unhinted left side bearing while auto-hinting is active. Zero otherwise.\n\n\n\nrsb_delta\n\n\nThe difference between hinted and unhinted right side bearing while auto-hinting is active. Zero otherwise.\n\n\n\n\n\n\nnote\n\n\n\nIf \nFT_Load_Glyph\n is called with default flags (see \nFT_LOAD_DEFAULT\n) the glyph image is loaded in the glyph slot in its native format (e.g., an outline glyph for TrueType and Type\u00a01 formats). [Since 2.9] The prospective bitmap metrics are calculated according to \nFT_LOAD_TARGET_XXX\n and other flags even for the outline glyph, even if \nFT_LOAD_RENDER\n is not set.\n\n\nThis image can later be converted into a bitmap by calling \nFT_Render_Glyph\n. This function searches the current renderer for the native image's format, then invokes it.\n\n\nThe renderer is in charge of transforming the native image through the slot's face transformation fields, then converting it into a bitmap that is returned in \u2018slot->bitmap\u2019.\n\n\nNote that \u2018slot->bitmap_left\u2019 and \u2018slot->bitmap_top\u2019 are also used to specify the position of the bitmap relative to the current pen position (e.g., coordinates (0,0) on the baseline). Of course, \u2018slot->format\u2019 is also changed to \nFT_GLYPH_FORMAT_BITMAP\n.\n\n\nHere is a small pseudo code fragment that shows how to use \u2018lsb_delta\u2019 and \u2018rsb_delta\u2019 to do fractional positioning of glyphs:\n\n  FT_GlyphSlot  slot     = face->glyph;\n  FT_Pos        origin_x = 0;\n\n\n  for all glyphs do\n    <load glyph with `FT_Load_Glyph'>\n\n    FT_Outline_Translate( slot->outline, origin_x & 63, 0 );\n\n    <save glyph image, or render glyph, or ...>\n\n    <compute kern between current and next glyph\n     and add it to `origin_x'>\n\n    origin_x += slot->advance.x;\n    origin_x += slot->rsb_delta - slot->lsb_delta;\n  endfor\n\n\n\nHere is another small pseudo code fragment that shows how to use \u2018lsb_delta\u2019 and \u2018rsb_delta\u2019 to improve integer positioning of glyphs:\n\n  FT_GlyphSlot  slot           = face->glyph;\n  FT_Pos        origin_x       = 0;\n  FT_Pos        prev_rsb_delta = 0;\n\n\n  for all glyphs do\n    <compute kern between current and previous glyph\n     and add it to `origin_x'>\n\n    <load glyph with `FT_Load_Glyph'>\n\n    if ( prev_rsb_delta - slot->lsb_delta >  32 )\n      origin_x -= 64;\n    else if ( prev_rsb_delta - slot->lsb_delta < -31 )\n      origin_x += 64;\n\n    prev_rsb_delta = slot->rsb_delta;\n\n    <save glyph image, or render glyph, or ...>\n\n    origin_x += slot->advance.x;\n  endfor\n\n\n\nIf you use strong auto-hinting, you \nmust\n apply these delta values! Otherwise you will experience far too large inter-glyph spacing at small rendering sizes in most cases. Note that it doesn't harm to use the above code for other hinting modes also, since the delta values are zero then.\n\n\n\n\n\nFT_Glyph_Metrics\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Glyph_Metrics_\n  {\n    \nFT_Pos\n  width;\n    \nFT_Pos\n  height;\n\n    \nFT_Pos\n  horiBearingX;\n    \nFT_Pos\n  horiBearingY;\n    \nFT_Pos\n  horiAdvance;\n\n    \nFT_Pos\n  vertBearingX;\n    \nFT_Pos\n  vertBearingY;\n    \nFT_Pos\n  vertAdvance;\n\n  } \nFT_Glyph_Metrics\n;\n\n\n\n\nA structure to model the metrics of a single glyph. The values are expressed in 26.6 fractional pixel format; if the flag \nFT_LOAD_NO_SCALE\n has been used while loading the glyph, values are expressed in font units instead.\n\n\nfields\n\n\n\n\n\nwidth\n\n\nThe glyph's width.\n\n\n\nheight\n\n\nThe glyph's height.\n\n\n\nhoriBearingX\n\n\nLeft side bearing for horizontal layout.\n\n\n\nhoriBearingY\n\n\nTop side bearing for horizontal layout.\n\n\n\nhoriAdvance\n\n\nAdvance width for horizontal layout.\n\n\n\nvertBearingX\n\n\nLeft side bearing for vertical layout.\n\n\n\nvertBearingY\n\n\nTop side bearing for vertical layout. Larger positive values mean further below the vertical glyph origin.\n\n\n\nvertAdvance\n\n\nAdvance height for vertical layout. Positive values mean the glyph has a positive advance downward.\n\n\n\n\n\n\nnote\n\n\n\nIf not disabled with \nFT_LOAD_NO_HINTING\n, the values represent dimensions of the hinted glyph (in case hinting is applicable).\n\n\nStroking a glyph with an outside border does not increase \u2018horiAdvance\u2019 or \u2018vertAdvance\u2019; you have to manually adjust these values to account for the added width and height.\n\n\nFreeType doesn't use the \u2018VORG\u2019 table data for CFF fonts because it doesn't have an interface to quickly retrieve the glyph height. The y\u00a0coordinate of the vertical origin can be simply computed as \u2018vertBearingY + height\u2019 after loading a glyph.\n\n\n\n\n\nFT_SubGlyph\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_SubGlyphRec_*  \nFT_SubGlyph\n;\n\n\n\n\nThe subglyph structure is an internal object used to describe subglyphs (for example, in the case of composites).\n\n\nnote\n\n\n\nThe subglyph implementation is not part of the high-level API, hence the forward structure declaration.\n\n\nYou can however retrieve subglyph information with \nFT_Get_SubGlyph_Info\n.\n\n\n\n\n\nFT_Bitmap_Size\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Bitmap_Size_\n  {\n    \nFT_Short\n  height;\n    \nFT_Short\n  width;\n\n    \nFT_Pos\n    size;\n\n    \nFT_Pos\n    x_ppem;\n    \nFT_Pos\n    y_ppem;\n\n  } \nFT_Bitmap_Size\n;\n\n\n\n\nThis structure models the metrics of a bitmap strike (i.e., a set of glyphs for a given point size and resolution) in a bitmap font. It is used for the \u2018available_sizes\u2019 field of \nFT_Face\n.\n\n\nfields\n\n\n\n\n\nheight\n\n\nThe vertical distance, in pixels, between two consecutive baselines. It is always positive.\n\n\n\nwidth\n\n\nThe average width, in pixels, of all glyphs in the strike.\n\n\n\nsize\n\n\nThe nominal size of the strike in 26.6 fractional points. This field is not very useful.\n\n\n\nx_ppem\n\n\nThe horizontal ppem (nominal width) in 26.6 fractional pixels.\n\n\n\ny_ppem\n\n\nThe vertical ppem (nominal height) in 26.6 fractional pixels.\n\n\n\n\n\n\nnote\n\n\n\nWindows FNT: The nominal size given in a FNT font is not reliable. If the driver finds it incorrect, it sets \u2018size\u2019 to some calculated values, and \u2018x_ppem\u2019 and \u2018y_ppem\u2019 to the pixel width and height given in the font, respectively.\n\n\nTrueType embedded bitmaps: \u2018size\u2019, \u2018width\u2019, and \u2018height\u2019 values are not contained in the bitmap strike itself. They are computed from the global font parameters.\n\n\n\n\n\nFT_Init_FreeType\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Init_FreeType\n( \nFT_Library\n  *alibrary );\n\n\n\n\nInitialize a new FreeType library object. The set of modules that are registered by this function is determined at build time.\n\n\noutput\n\n\n\n\n\nalibrary\n\n\nA handle to a new library object.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIn case you want to provide your own memory allocating routines, use \nFT_New_Library\n instead, followed by a call to \nFT_Add_Default_Modules\n (or a series of calls to \nFT_Add_Module\n) and \nFT_Set_Default_Properties\n.\n\n\nSee the documentation of \nFT_Library\n and \nFT_Face\n for multi-threading issues.\n\n\nIf you need reference-counting (cf. \nFT_Reference_Library\n), use \nFT_New_Library\n and \nFT_Done_Library\n.\n\n\nIf compilation option FT_CONFIG_OPTION_ENVIRONMENT_PROPERTIES is set, this function reads the \u2018FREETYPE_PROPERTIES\u2019 environment variable to control driver properties. See section \u2018\nDriver properties\n\u2019 for more.\n\n\n\n\n\nFT_Done_FreeType\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Done_FreeType\n( \nFT_Library\n  library );\n\n\n\n\nDestroy a given FreeType library object and all of its children, including resources, drivers, faces, sizes, etc.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the target library object.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_New_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Face\n( \nFT_Library\n   library,\n               \nconst\n \nchar\n*  filepathname,\n               \nFT_Long\n      face_index,\n               \nFT_Face\n     *aface );\n\n\n\n\nCall \nFT_Open_Face\n to open a font by its pathname.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\ninput\n\n\n\n\n\npathname\n\n\nA path to the font file.\n\n\n\nface_index\n\n\nSee \nFT_Open_Face\n for a detailed description of this parameter.\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object. If \u2018face_index\u2019 is greater than or equal to zero, it must be non-NULL.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nUse \nFT_Done_Face\n to destroy the created \nFT_Face\n object (along with its slot and sizes).\n\n\n\n\n\nFT_Done_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Done_Face\n( \nFT_Face\n  face );\n\n\n\n\nDiscard a given face object, as well as all of its child slots and sizes.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a target face object.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nSee the discussion of reference counters in the description of \nFT_Reference_Face\n.\n\n\n\n\n\nFT_Reference_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Reference_Face\n( \nFT_Face\n  face );\n\n\n\n\nA counter gets initialized to\u00a01 at the time an \nFT_Face\n structure is created. This function increments the counter. \nFT_Done_Face\n then only destroys a face if the counter is\u00a01, otherwise it simply decrements the counter.\n\n\nThis function helps in managing life-cycles of structures that reference \nFT_Face\n objects.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a target face object.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nsince\n\n\n\n2.4.2\n\n\n\n\n\nFT_New_Memory_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Memory_Face\n( \nFT_Library\n      library,\n                      \nconst\n \nFT_Byte\n*  file_base,\n                      \nFT_Long\n         file_size,\n                      \nFT_Long\n         face_index,\n                      \nFT_Face\n        *aface );\n\n\n\n\nCall \nFT_Open_Face\n to open a font that has been loaded into memory.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\ninput\n\n\n\n\n\nfile_base\n\n\nA pointer to the beginning of the font data.\n\n\n\nfile_size\n\n\nThe size of the memory chunk used by the font data.\n\n\n\nface_index\n\n\nSee \nFT_Open_Face\n for a detailed description of this parameter.\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object. If \u2018face_index\u2019 is greater than or equal to zero, it must be non-NULL.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou must not deallocate the memory before calling \nFT_Done_Face\n.\n\n\n\n\n\nFT_Face_Properties\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Face_Properties\n( \nFT_Face\n        face,\n                      \nFT_UInt\n        num_properties,\n                      \nFT_Parameter\n*  properties );\n\n\n\n\nSet or override certain (library or module-wide) properties on a face-by-face basis. Useful for finer-grained control and avoiding locks on shared structures (threads can modify their own faces as they see fit).\n\n\nContrary to \nFT_Property_Set\n, this function uses \nFT_Parameter\n so that you can pass multiple properties to the target face in one call. Note that only a subset of the available properties can be controlled.\n\n\n\n\n\n\nFT_PARAM_TAG_STEM_DARKENING\n (stem darkening, corresponding to the property \u2018no-stem-darkening\u2019 provided by the \u2018autofit\u2019, \u2018cff\u2019, \u2018type1\u2019, and \u2018t1cid\u2019 modules; see \nno-stem-darkening\n).\n\n\n\n\n\n\nFT_PARAM_TAG_LCD_FILTER_WEIGHTS\n (LCD filter weights, corresponding to function \nFT_Library_SetLcdFilterWeights\n).\n\n\n\n\n\n\nFT_PARAM_TAG_RANDOM_SEED\n (seed value for the CFF, Type\u00a01, and CID \u2018random\u2019 operator, corresponding to the \u2018random-seed\u2019 property provided by the \u2018cff\u2019, \u2018type1\u2019, and \u2018t1cid\u2019 modules; see \nrandom-seed\n).\n\n\n\n\n\n\nPass NULL as \u2018data\u2019 in \nFT_Parameter\n for a given tag to reset the option and use the library or module default again.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\nnum_properties\n\n\nThe number of properties that follow.\n\n\n\nproperties\n\n\nA handle to an \nFT_Parameter\n array with \u2018num_properties\u2019 elements.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nHere an example that sets three properties. You must define FT_CONFIG_OPTION_SUBPIXEL_RENDERING to make the LCD filter examples work.\n\n  FT_Parameter         property1;\n  FT_Bool              darken_stems = 1;\n\n  FT_Parameter         property2;\n  FT_LcdFiveTapFilter  custom_weight =\n                         { 0x11, 0x44, 0x56, 0x44, 0x11 };\n\n  FT_Parameter         property3;\n  FT_Int32             random_seed = 314159265;\n\n  FT_Parameter         properties[3] = { property1,\n                                         property2,\n                                         property3 };\n\n\n  property1.tag  = FT_PARAM_TAG_STEM_DARKENING;\n  property1.data = &darken_stems;\n\n  property2.tag  = FT_PARAM_TAG_LCD_FILTER_WEIGHTS;\n  property2.data = custom_weight;\n\n  property3.tag  = FT_PARAM_TAG_RANDOM_SEED;\n  property3.data = &random_seed;\n\n  FT_Face_Properties( face, 3, properties );\n\n\n\nThe next example resets a single property to its default value.\n\n  FT_Parameter  property;\n\n\n  property.tag  = FT_PARAM_TAG_LCD_FILTER_WEIGHTS;\n  property.data = NULL;\n\n  FT_Face_Properties( face, 1, &property );\n\n\n\nsince\n\n\n\n2.8\n\n\n\n\n\nFT_Open_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Open_Face\n( \nFT_Library\n           library,\n                \nconst\n \nFT_Open_Args\n*  args,\n                \nFT_Long\n              face_index,\n                \nFT_Face\n             *aface );\n\n\n\n\nCreate a face object from a given resource described by \nFT_Open_Args\n.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\ninput\n\n\n\n\n\nargs\n\n\nA pointer to an \u2018FT_Open_Args\u2019 structure that must be filled by the caller.\n\n\n\nface_index\n\n\nThis field holds two different values. Bits 0-15 are the index of the face in the font file (starting with value\u00a00). Set it to\u00a00 if there is only one face in the font file.\n\n[Since 2.6.1] Bits 16-30 are relevant to GX and OpenType variation fonts only, specifying the named instance index for the current face index (starting with value\u00a01; value\u00a00 makes FreeType ignore named instances). For non-variation fonts, bits 16-30 are ignored. Assuming that you want to access the third named instance in face\u00a04, \u2018face_index\u2019 should be set to 0x00030004. If you want to access face\u00a04 without variation handling, simply set \u2018face_index\u2019 to value\u00a04.\n\n\u2018FT_Open_Face\u2019 and its siblings can be used to quickly check whether the font format of a given font resource is supported by FreeType. In general, if the \u2018face_index\u2019 argument is negative, the function's return value is\u00a00 if the font format is recognized, or non-zero otherwise. The function allocates a more or less empty face handle in \u2018*aface\u2019 (if \u2018aface\u2019 isn't NULL); the only two useful fields in this special case are \u2018face->num_faces\u2019 and \u2018face->style_flags\u2019. For any negative value of \u2018face_index\u2019, \u2018face->num_faces\u2019 gives the number of faces within the font file. For the negative value \u2018-(N+1)\u2019 (with \u2018N\u2019 a non-negative 16-bit value), bits 16-30 in \u2018face->style_flags\u2019 give the number of named instances in face \u2018N\u2019 if we have a variation font (or zero otherwise). After examination, the returned \nFT_Face\n structure should be deallocated with a call to \nFT_Done_Face\n.\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object. If \u2018face_index\u2019 is greater than or equal to zero, it must be non-NULL.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nUnlike FreeType 1.x, this function automatically creates a glyph slot for the face object that can be accessed directly through \u2018face->glyph\u2019.\n\n\nEach new face object created with this function also owns a default \nFT_Size\n object, accessible as \u2018face->size\u2019.\n\n\nOne \nFT_Library\n instance can have multiple face objects, this is, \nFT_Open_Face\n and its siblings can be called multiple times using the same \u2018library\u2019 argument.\n\n\nSee the discussion of reference counters in the description of \nFT_Reference_Face\n.\n\n\nTo loop over all faces, use code similar to the following snippet (omitting the error handling).\n\n  ...\n  FT_Face  face;\n  FT_Long  i, num_faces;\n\n\n  error = FT_Open_Face( library, args, -1, &face );\n  if ( error ) { ... }\n\n  num_faces = face->num_faces;\n  FT_Done_Face( face );\n\n  for ( i = 0; i < num_faces; i++ )\n  {\n    ...\n    error = FT_Open_Face( library, args, i, &face );\n    ...\n    FT_Done_Face( face );\n    ...\n  }\n\n\n\nTo loop over all valid values for \u2018face_index\u2019, use something similar to the following snippet, again without error handling. The code accesses all faces immediately (thus only a single call of \u2018FT_Open_Face\u2019 within the do-loop), with and without named instances.\n\n  ...\n  FT_Face  face;\n\n  FT_Long  num_faces     = 0;\n  FT_Long  num_instances = 0;\n\n  FT_Long  face_idx     = 0;\n  FT_Long  instance_idx = 0;\n\n\n  do\n  {\n    FT_Long  id = ( instance_idx << 16 ) + face_idx;\n\n\n    error = FT_Open_Face( library, args, id, &face );\n    if ( error ) { ... }\n\n    num_faces     = face->num_faces;\n    num_instances = face->style_flags >> 16;\n\n    ...\n\n    FT_Done_Face( face );\n\n    if ( instance_idx < num_instances )\n      instance_idx++;\n    else\n    {\n      face_idx++;\n      instance_idx = 0;\n    }\n\n  } while ( face_idx < num_faces )\n\n\n\n\n\n\nFT_Open_Args\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Open_Args_\n  {\n    \nFT_UInt\n         flags;\n    \nconst\n \nFT_Byte\n*  memory_base;\n    \nFT_Long\n         memory_size;\n    \nFT_String\n*      pathname;\n    \nFT_Stream\n       stream;\n    \nFT_Module\n       driver;\n    \nFT_Int\n          num_params;\n    \nFT_Parameter\n*   params;\n\n  } \nFT_Open_Args\n;\n\n\n\n\nA structure to indicate how to open a new font file or stream. A pointer to such a structure can be used as a parameter for the functions \nFT_Open_Face\n and \nFT_Attach_Stream\n.\n\n\nfields\n\n\n\n\n\nflags\n\n\nA set of bit flags indicating how to use the structure.\n\n\n\nmemory_base\n\n\nThe first byte of the file in memory.\n\n\n\nmemory_size\n\n\nThe size in bytes of the file in memory.\n\n\n\npathname\n\n\nA pointer to an 8-bit file pathname.\n\n\n\nstream\n\n\nA handle to a source stream object.\n\n\n\ndriver\n\n\nThis field is exclusively used by \nFT_Open_Face\n; it simply specifies the font driver to use for opening the face. If set to NULL, FreeType tries to load the face with each one of the drivers in its list.\n\n\n\nnum_params\n\n\nThe number of extra parameters.\n\n\n\nparams\n\n\nExtra parameters passed to the font driver when opening a new face.\n\n\n\n\n\n\nnote\n\n\n\nThe stream type is determined by the contents of \u2018flags\u2019 that are tested in the following order by \nFT_Open_Face\n:\n\n\nIf the \nFT_OPEN_MEMORY\n bit is set, assume that this is a memory file of \u2018memory_size\u2019 bytes, located at \u2018memory_address\u2019. The data are not copied, and the client is responsible for releasing and destroying them \nafter\n the corresponding call to \nFT_Done_Face\n.\n\n\nOtherwise, if the \nFT_OPEN_STREAM\n bit is set, assume that a custom input stream \u2018stream\u2019 is used.\n\n\nOtherwise, if the \nFT_OPEN_PATHNAME\n bit is set, assume that this is a normal file and use \u2018pathname\u2019 to open it.\n\n\nIf the \nFT_OPEN_DRIVER\n bit is set, \nFT_Open_Face\n only tries to open the file with the driver whose handler is in \u2018driver\u2019.\n\n\nIf the \nFT_OPEN_PARAMS\n bit is set, the parameters given by \u2018num_params\u2019 and \u2018params\u2019 is used. They are ignored otherwise.\n\n\nIdeally, both the \u2018pathname\u2019 and \u2018params\u2019 fields should be tagged as \u2018const\u2019; this is missing for API backward compatibility. In other words, applications should treat them as read-only.\n\n\n\n\n\nFT_Parameter\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Parameter_\n  {\n    \nFT_ULong\n    tag;\n    \nFT_Pointer\n  data;\n\n  } \nFT_Parameter\n;\n\n\n\n\nA simple structure to pass more or less generic parameters to \nFT_Open_Face\n and \nFT_Face_Properties\n.\n\n\nfields\n\n\n\n\n\ntag\n\n\nA four-byte identification tag.\n\n\n\ndata\n\n\nA pointer to the parameter data.\n\n\n\n\n\n\nnote\n\n\n\nThe ID and function of parameters are driver-specific. See section \u2018\nParameter Tags\n\u2019 for more information.\n\n\n\n\n\nFT_Attach_File\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Attach_File\n( \nFT_Face\n      face,\n                  \nconst\n \nchar\n*  filepathname );\n\n\n\n\nCall \nFT_Attach_Stream\n to attach a file.\n\n\ninout\n\n\n\n\n\nface\n\n\nThe target face object.\n\n\n\n\n\n\ninput\n\n\n\n\n\nfilepathname\n\n\nThe pathname.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Attach_Stream\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Attach_Stream\n( \nFT_Face\n        face,\n                    \nFT_Open_Args\n*  parameters );\n\n\n\n\n\u2018Attach\u2019 data to a face object. Normally, this is used to read additional information for the face object. For example, you can attach an AFM file that comes with a Type\u00a01 font to get the kerning values and other metrics.\n\n\ninout\n\n\n\n\n\nface\n\n\nThe target face object.\n\n\n\n\n\n\ninput\n\n\n\n\n\nparameters\n\n\nA pointer to \nFT_Open_Args\n that must be filled by the caller.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe meaning of the \u2018attach\u2019 (i.e., what really happens when the new file is read) is not fixed by FreeType itself. It really depends on the font format (and thus the font driver).\n\n\nClient applications are expected to know what they are doing when invoking this function. Most drivers simply do not implement file or stream attachments.\n\n\n\n\n\nFT_Set_Char_Size\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_Char_Size\n( \nFT_Face\n     face,\n                    \nFT_F26Dot6\n  char_width,\n                    \nFT_F26Dot6\n  char_height,\n                    \nFT_UInt\n     horz_resolution,\n                    \nFT_UInt\n     vert_resolution );\n\n\n\n\nCall \nFT_Request_Size\n to request the nominal size (in points).\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to a target face object.\n\n\n\n\n\n\ninput\n\n\n\n\n\nchar_width\n\n\nThe nominal width, in 26.6 fractional points.\n\n\n\nchar_height\n\n\nThe nominal height, in 26.6 fractional points.\n\n\n\nhorz_resolution\n\n\nThe horizontal resolution in dpi.\n\n\n\nvert_resolution\n\n\nThe vertical resolution in dpi.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nWhile this function allows fractional points as input values, the resulting ppem value for the given resolution is always rounded to the nearest integer.\n\n\nIf either the character width or height is zero, it is set equal to the other value.\n\n\nIf either the horizontal or vertical resolution is zero, it is set equal to the other value.\n\n\nA character width or height smaller than 1pt is set to 1pt; if both resolution values are zero, they are set to 72dpi.\n\n\nDon't use this function if you are using the FreeType cache API.\n\n\n\n\n\nFT_Set_Pixel_Sizes\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_Pixel_Sizes\n( \nFT_Face\n  face,\n                      \nFT_UInt\n  pixel_width,\n                      \nFT_UInt\n  pixel_height );\n\n\n\n\nCall \nFT_Request_Size\n to request the nominal size (in pixels).\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the target face object.\n\n\n\n\n\n\ninput\n\n\n\n\n\npixel_width\n\n\nThe nominal width, in pixels.\n\n\n\npixel_height\n\n\nThe nominal height, in pixels.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou should not rely on the resulting glyphs matching or being constrained to this pixel size. Refer to \nFT_Request_Size\n to understand how requested sizes relate to actual sizes.\n\n\nDon't use this function if you are using the FreeType cache API.\n\n\n\n\n\nFT_Request_Size\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Request_Size\n( \nFT_Face\n          face,\n                   \nFT_Size_Request\n  req );\n\n\n\n\nResize the scale of the active \nFT_Size\n object in a face.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to a target face object.\n\n\n\n\n\n\ninput\n\n\n\n\n\nreq\n\n\nA pointer to a \nFT_Size_RequestRec\n.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nAlthough drivers may select the bitmap strike matching the request, you should not rely on this if you intend to select a particular bitmap strike. Use \nFT_Select_Size\n instead in that case.\n\n\nThe relation between the requested size and the resulting glyph size is dependent entirely on how the size is defined in the source face. The font designer chooses the final size of each glyph relative to this size. For more information refer to \u2018\nhttps://www.freetype.org/freetype2/docs/glyphs/glyphs-2.html\n\u2019.\n\n\nContrary to \nFT_Set_Char_Size\n, this function doesn't have special code to normalize zero-valued widths, heights, or resolutions (which lead to errors in most cases).\n\n\nDon't use this function if you are using the FreeType cache API.\n\n\n\n\n\nFT_Select_Size\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Select_Size\n( \nFT_Face\n  face,\n                  \nFT_Int\n   strike_index );\n\n\n\n\nSelect a bitmap strike. To be more precise, this function sets the scaling factors of the active \nFT_Size\n object in a face so that bitmaps from this particular strike are taken by \nFT_Load_Glyph\n and friends.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to a target face object.\n\n\n\n\n\n\ninput\n\n\n\n\n\nstrike_index\n\n\nThe index of the bitmap strike in the \u2018available_sizes\u2019 field of \nFT_FaceRec\n structure.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nFor bitmaps embedded in outline fonts it is common that only a subset of the available glyphs at a given ppem value is available. FreeType silently uses outlines if there is no bitmap for a given glyph index.\n\n\nFor GX and OpenType variation fonts, a bitmap strike makes sense only if the default instance is active (this is, no glyph variation takes place); otherwise, FreeType simply ignores bitmap strikes. The same is true for all named instances that are different from the default instance.\n\n\nDon't use this function if you are using the FreeType cache API.\n\n\n\n\n\nFT_Size_Request_Type\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nenum\n  FT_Size_Request_Type_\n  {\n    \nFT_SIZE_REQUEST_TYPE_NOMINAL\n,\n    \nFT_SIZE_REQUEST_TYPE_REAL_DIM\n,\n    \nFT_SIZE_REQUEST_TYPE_BBOX\n,\n    \nFT_SIZE_REQUEST_TYPE_CELL\n,\n    \nFT_SIZE_REQUEST_TYPE_SCALES\n,\n\n    FT_SIZE_REQUEST_TYPE_MAX\n\n  } \nFT_Size_Request_Type\n;\n\n\n\n\nAn enumeration type that lists the supported size request types, i.e., what input size (in font units) maps to the requested output size (in pixels, as computed from the arguments of \nFT_Size_Request\n).\n\n\nvalues\n\n\n\n\n\nFT_SIZE_REQUEST_TYPE_NOMINAL\n\n\nThe nominal size. The \u2018units_per_EM\u2019 field of \nFT_FaceRec\n is used to determine both scaling values.\n\nThis is the standard scaling found in most applications. In particular, use this size request type for TrueType fonts if they provide optical scaling or something similar. Note, however, that \u2018units_per_EM\u2019 is a rather abstract value which bears no relation to the actual size of the glyphs in a font.\n\n\n\nFT_SIZE_REQUEST_TYPE_REAL_DIM\n\n\nThe real dimension. The sum of the \u2018ascender\u2019 and (minus of) the \u2018descender\u2019 fields of \nFT_FaceRec\n is used to determine both scaling values.\n\n\n\nFT_SIZE_REQUEST_TYPE_BBOX\n\n\nThe font bounding box. The width and height of the \u2018bbox\u2019 field of \nFT_FaceRec\n are used to determine the horizontal and vertical scaling value, respectively.\n\n\n\nFT_SIZE_REQUEST_TYPE_CELL\n\n\nThe \u2018max_advance_width\u2019 field of \nFT_FaceRec\n is used to determine the horizontal scaling value; the vertical scaling value is determined the same way as \nFT_SIZE_REQUEST_TYPE_REAL_DIM\n does. Finally, both scaling values are set to the smaller one. This type is useful if you want to specify the font size for, say, a window of a given dimension and 80x24 cells.\n\n\n\nFT_SIZE_REQUEST_TYPE_SCALES\n\n\nSpecify the scaling values directly.\n\n\n\n\n\n\nnote\n\n\n\nThe above descriptions only apply to scalable formats. For bitmap formats, the behaviour is up to the driver.\n\n\nSee the note section of \nFT_Size_Metrics\n if you wonder how size requesting relates to scaling values.\n\n\n\n\n\nFT_Size_RequestRec\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Size_RequestRec_\n  {\n    \nFT_Size_Request_Type\n  type;\n    \nFT_Long\n               width;\n    \nFT_Long\n               height;\n    \nFT_UInt\n               horiResolution;\n    \nFT_UInt\n               vertResolution;\n\n  } \nFT_Size_RequestRec\n;\n\n\n\n\nA structure to model a size request.\n\n\nfields\n\n\n\n\n\ntype\n\n\nSee \nFT_Size_Request_Type\n.\n\n\n\nwidth\n\n\nThe desired width, given as a 26.6 fractional point value (with 72pt = 1in).\n\n\n\nheight\n\n\nThe desired height, given as a 26.6 fractional point value (with 72pt = 1in).\n\n\n\nhoriResolution\n\n\nThe horizontal resolution (dpi, i.e., pixels per inch). If set to zero, \u2018width\u2019 is treated as a 26.6 fractional *pixel* value, which gets internally rounded to an integer.\n\n\n\nvertResolution\n\n\nThe vertical resolution (dpi, i.e., pixels per inch). If set to zero, \u2018height\u2019 is treated as a 26.6 fractional *pixel* value, which gets internally rounded to an integer.\n\n\n\n\n\n\nnote\n\n\n\nIf \u2018width\u2019 is zero, the horizontal scaling value is set equal to the vertical scaling value, and vice versa.\n\n\nIf \u2018type\u2019 is FT_SIZE_REQUEST_TYPE_SCALES, \u2018width\u2019 and \u2018height\u2019 are interpreted directly as 16.16 fractional scaling values, without any further modification, and both \u2018horiResolution\u2019 and \u2018vertResolution\u2019 are ignored.\n\n\n\n\n\nFT_Size_Request\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_Size_RequestRec_  *\nFT_Size_Request\n;\n\n\n\n\nA handle to a size request structure.\n\n\n\n\n\nFT_Set_Transform\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Set_Transform\n( \nFT_Face\n     face,\n                    \nFT_Matrix\n*  matrix,\n                    \nFT_Vector\n*  delta );\n\n\n\n\nSet the transformation that is applied to glyph images when they are loaded into a glyph slot through \nFT_Load_Glyph\n.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\ninput\n\n\n\n\n\nmatrix\n\n\nA pointer to the transformation's 2x2 matrix. Use NULL for the identity matrix.\n\n\n\ndelta\n\n\nA pointer to the translation vector. Use NULL for the null vector.\n\n\n\n\n\n\nnote\n\n\n\nThe transformation is only applied to scalable image formats after the glyph has been loaded. It means that hinting is unaltered by the transformation and is performed on the character size given in the last call to \nFT_Set_Char_Size\n or \nFT_Set_Pixel_Sizes\n.\n\n\nNote that this also transforms the \u2018face.glyph.advance\u2019 field, but \nnot\n the values in \u2018face.glyph.metrics\u2019.\n\n\n\n\n\nFT_Load_Glyph\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Load_Glyph\n( \nFT_Face\n   face,\n                 \nFT_UInt\n   glyph_index,\n                 \nFT_Int32\n  load_flags );\n\n\n\n\nLoad a glyph into the glyph slot of a face object.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the target face object where the glyph is loaded.\n\n\n\n\n\n\ninput\n\n\n\n\n\nglyph_index\n\n\nThe index of the glyph in the font file. For CID-keyed fonts (either in PS or in CFF format) this argument specifies the CID value.\n\n\n\nload_flags\n\n\nA flag indicating what to load for this glyph. The \nFT_LOAD_XXX\n constants can be used to control the glyph loading process (e.g., whether the outline should be scaled, whether to load bitmaps or not, whether to hint the outline, etc).\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe loaded glyph may be transformed. See \nFT_Set_Transform\n for the details.\n\n\nFor subsetted CID-keyed fonts, \u2018FT_Err_Invalid_Argument\u2019 is returned for invalid CID values (this is, for CID values that don't have a corresponding glyph in the font). See the discussion of the \nFT_FACE_FLAG_CID_KEYED\n flag for more details.\n\n\nIf you receive \u2018FT_Err_Glyph_Too_Big\u2019, try getting the glyph outline at EM size, then scale it manually and fill it as a graphics operation.\n\n\n\n\n\nFT_Get_Char_Index\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_UInt\n )\n  \nFT_Get_Char_Index\n( \nFT_Face\n   face,\n                     \nFT_ULong\n  charcode );\n\n\n\n\nReturn the glyph index of a given character code. This function uses the currently selected charmap to do the mapping.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\ncharcode\n\n\nThe character code.\n\n\n\n\n\n\nreturn\n\n\n\nThe glyph index. 0\u00a0means \u2018undefined character code\u2019.\n\n\nnote\n\n\n\nIf you use FreeType to manipulate the contents of font files directly, be aware that the glyph index returned by this function doesn't always correspond to the internal indices used within the file. This is done to ensure that value\u00a00 always corresponds to the \u2018missing glyph\u2019. If the first glyph is not named \u2018.notdef\u2019, then for Type\u00a01 and Type\u00a042 fonts, \u2018.notdef\u2019 will be moved into the glyph ID\u00a00 position, and whatever was there will be moved to the position \u2018.notdef\u2019 had. For Type\u00a01 fonts, if there is no \u2018.notdef\u2019 glyph at all, then one will be created at index\u00a00 and whatever was there will be moved to the last index -- Type\u00a042 fonts are considered invalid under this condition.\n\n\n\n\n\nFT_Get_First_Char\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_ULong\n )\n  \nFT_Get_First_Char\n( \nFT_Face\n   face,\n                     \nFT_UInt\n  *agindex );\n\n\n\n\nReturn the first character code in the current charmap of a given face, together with its corresponding glyph index.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\noutput\n\n\n\n\n\nagindex\n\n\nGlyph index of first character code. 0\u00a0if charmap is empty.\n\n\n\n\n\n\nreturn\n\n\n\nThe charmap's first character code.\n\n\nnote\n\n\n\nYou should use this function together with \nFT_Get_Next_Char\n to parse all character codes available in a given charmap. The code should look like this:\n\n  FT_ULong  charcode;\n  FT_UInt   gindex;\n\n\n  charcode = FT_Get_First_Char( face, &gindex );\n  while ( gindex != 0 )\n  {\n    ... do something with (charcode,gindex) pair ...\n\n    charcode = FT_Get_Next_Char( face, charcode, &gindex );\n  }\n\n\n\nBe aware that character codes can have values up to 0xFFFFFFFF; this might happen for non-Unicode or malformed cmaps. However, even with regular Unicode encoding, so-called \u2018last resort fonts\u2019 (using SFNT cmap format 13, see function \nFT_Get_CMap_Format\n) normally have entries for all Unicode characters up to 0x1FFFFF, which can cause \na lot\n of iterations.\n\n\nNote that \u2018*agindex\u2019 is set to\u00a00 if the charmap is empty. The result itself can be\u00a00 in two cases: if the charmap is empty or if the value\u00a00 is the first valid character code.\n\n\n\n\n\nFT_Get_Next_Char\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_ULong\n )\n  \nFT_Get_Next_Char\n( \nFT_Face\n    face,\n                    \nFT_ULong\n   char_code,\n                    \nFT_UInt\n   *agindex );\n\n\n\n\nReturn the next character code in the current charmap of a given face following the value \u2018char_code\u2019, as well as the corresponding glyph index.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\nchar_code\n\n\nThe starting character code.\n\n\n\n\n\n\noutput\n\n\n\n\n\nagindex\n\n\nGlyph index of next character code. 0\u00a0if charmap is empty.\n\n\n\n\n\n\nreturn\n\n\n\nThe charmap's next character code.\n\n\nnote\n\n\n\nYou should use this function with \nFT_Get_First_Char\n to walk over all character codes available in a given charmap. See the note for that function for a simple code example.\n\n\nNote that \u2018*agindex\u2019 is set to\u00a00 when there are no more codes in the charmap.\n\n\n\n\n\nFT_Get_Name_Index\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_UInt\n )\n  \nFT_Get_Name_Index\n( \nFT_Face\n     face,\n                     \nFT_String\n*  glyph_name );\n\n\n\n\nReturn the glyph index of a given glyph name.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\nglyph_name\n\n\nThe glyph name.\n\n\n\n\n\n\nreturn\n\n\n\nThe glyph index. 0\u00a0means \u2018undefined character code\u2019.\n\n\n\n\n\nFT_Load_Char\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Load_Char\n( \nFT_Face\n   face,\n                \nFT_ULong\n  char_code,\n                \nFT_Int32\n  load_flags );\n\n\n\n\nLoad a glyph into the glyph slot of a face object, accessed by its character code.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to a target face object where the glyph is loaded.\n\n\n\n\n\n\ninput\n\n\n\n\n\nchar_code\n\n\nThe glyph's character code, according to the current charmap used in the face.\n\n\n\nload_flags\n\n\nA flag indicating what to load for this glyph. The \nFT_LOAD_XXX\n constants can be used to control the glyph loading process (e.g., whether the outline should be scaled, whether to load bitmaps or not, whether to hint the outline, etc).\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function simply calls \nFT_Get_Char_Index\n and \nFT_Load_Glyph\n.\n\n\nMany fonts contain glyphs that can't be loaded by this function since its glyph indices are not listed in any of the font's charmaps.\n\n\nIf no active cmap is set up (i.e., \u2018face->charmap\u2019 is zero), the call to \nFT_Get_Char_Index\n is omitted, and the function behaves identically to \nFT_Load_Glyph\n.\n\n\n\n\n\nFT_LOAD_TARGET_MODE\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_LOAD_TARGET_MODE\n( x )  ( (\nFT_Render_Mode\n)( ( (x) >> 16 ) & 15 ) )\n\n\n\n\nReturn the \nFT_Render_Mode\n corresponding to a given \nFT_LOAD_TARGET_XXX\n value.\n\n\n\n\n\nFT_Render_Glyph\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Render_Glyph\n( \nFT_GlyphSlot\n    slot,\n                   \nFT_Render_Mode\n  render_mode );\n\n\n\n\nConvert a given glyph image to a bitmap. It does so by inspecting the glyph image format, finding the relevant renderer, and invoking it.\n\n\ninout\n\n\n\n\n\nslot\n\n\nA handle to the glyph slot containing the image to convert.\n\n\n\n\n\n\ninput\n\n\n\n\n\nrender_mode\n\n\nThe render mode used to render the glyph image into a bitmap. See \nFT_Render_Mode\n for a list of possible values.\n\nIf \nFT_RENDER_MODE_NORMAL\n is used, the flag \nFT_LOAD_COLOR\n can be additionally set to make the function provide a default blending of colored glyph layers associated with the current glyph slot (provided the font contains such layers) instead of rendering the glyph slot's outline. See \nFT_LOAD_COLOR\n for more information.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nTo get meaningful results, font scaling values must be set with functions like \nFT_Set_Char_Size\n before calling \u2018FT_Render_Glyph\u2019.\n\n\nWhen FreeType outputs a bitmap of a glyph, it really outputs an alpha coverage map. If a pixel is completely covered by a filled-in outline, the bitmap contains 0xFF at that pixel, meaning that 0xFF/0xFF fraction of that pixel is covered, meaning the pixel is 100% black (or 0% bright). If a pixel is only 50% covered (value 0x80), the pixel is made 50% black (50% bright or a middle shade of grey). 0% covered means 0% black (100% bright or white).\n\n\nOn high-DPI screens like on smartphones and tablets, the pixels are so small that their chance of being completely covered and therefore completely black are fairly good. On the low-DPI screens, however, the situation is different. The pixels are too large for most of the details of a glyph and shades of gray are the norm rather than the exception.\n\n\nThis is relevant because all our screens have a second problem: they are not linear. 1\u00a0+\u00a01 is not\u00a02. Twice the value does not result in twice the brightness. When a pixel is only 50% covered, the coverage map says 50% black, and this translates to a pixel value of 128 when you use 8\u00a0bits per channel (0-255). However, this does not translate to 50% brightness for that pixel on our sRGB and gamma\u00a02.2 screens. Due to their non-linearity, they dwell longer in the darks and only a pixel value of about 186 results in 50% brightness -- 128 ends up too dark on both bright and dark backgrounds. The net result is that dark text looks burnt-out, pixely and blotchy on bright background, bright text too frail on dark backgrounds, and colored text on colored background (for example, red on green) seems to have dark halos or \u2018dirt\u2019 around it. The situation is especially ugly for diagonal stems like in \u2018w\u2019 glyph shapes where the quality of FreeType's anti-aliasing depends on the correct display of grays. On high-DPI screens where smaller, fully black pixels reign supreme, this doesn't matter, but on our low-DPI screens with all the gray shades, it does. 0% and 100% brightness are the same things in linear and non-linear space, just all the shades in-between aren't.\n\n\nThe blending function for placing text over a background is\n\n  dst = alpha * src + (1 - alpha) * dst    ,\n\n\n\nwhich is known as the OVER operator.\n\n\nTo correctly composite an antialiased pixel of a glyph onto a surface,\n\n\n\n\n\n\ntake the foreground and background colors (e.g., in sRGB space) and apply gamma to get them in a linear space,\n\n\n\n\n\n\nuse OVER to blend the two linear colors using the glyph pixel as the alpha value (remember, the glyph bitmap is an alpha coverage bitmap), and\n\n\n\n\n\n\napply inverse gamma to the blended pixel and write it back to the image.\n\n\n\n\n\n\nInternal testing at Adobe found that a target inverse gamma of\u00a01.8 for step\u00a03 gives good results across a wide range of displays with an sRGB gamma curve or a similar one.\n\n\nThis process can cost performance. There is an approximation that does not need to know about the background color; see \nhttps://bel.fi/alankila/lcd/\n and \nhttps://bel.fi/alankila/lcd/alpcor.html\n for details.\n\n\nATTENTION\n: Linear blending is even more important when dealing with subpixel-rendered glyphs to prevent color-fringing! A subpixel-rendered glyph must first be filtered with a filter that gives equal weight to the three color primaries and does not exceed a sum of 0x100, see section \u2018\nLCD Filtering\n\u2019. Then the only difference to gray linear blending is that subpixel-rendered linear blending is done 3\u00a0times per pixel: red foreground subpixel to red background subpixel and so on for green and blue.\n\n\n\n\n\nFT_Render_Mode\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nenum\n  FT_Render_Mode_\n  {\n    \nFT_RENDER_MODE_NORMAL\n = 0,\n    \nFT_RENDER_MODE_LIGHT\n,\n    \nFT_RENDER_MODE_MONO\n,\n    \nFT_RENDER_MODE_LCD\n,\n    \nFT_RENDER_MODE_LCD_V\n,\n\n    FT_RENDER_MODE_MAX\n\n  } \nFT_Render_Mode\n;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `\nFT_Render_Mode\n' values instead                       */\n#define ft_render_mode_normal  \nFT_RENDER_MODE_NORMAL\n\n#define ft_render_mode_mono    \nFT_RENDER_MODE_MONO\n\n\n\n\n\nRender modes supported by FreeType\u00a02. Each mode corresponds to a specific type of scanline conversion performed on the outline.\n\n\nFor bitmap fonts and embedded bitmaps the \u2018bitmap->pixel_mode\u2019 field in the \nFT_GlyphSlotRec\n structure gives the format of the returned bitmap.\n\n\nAll modes except \nFT_RENDER_MODE_MONO\n use 256 levels of opacity, indicating pixel coverage. Use linear alpha blending and gamma correction to correctly render non-monochrome glyph bitmaps onto a surface; see \nFT_Render_Glyph\n.\n\n\nvalues\n\n\n\n\n\nFT_RENDER_MODE_NORMAL\n\n\nDefault render mode; it corresponds to 8-bit anti-aliased bitmaps.\n\n\n\nFT_RENDER_MODE_LIGHT\n\n\nThis is equivalent to \nFT_RENDER_MODE_NORMAL\n. It is only defined as a separate value because render modes are also used indirectly to define hinting algorithm selectors. See \nFT_LOAD_TARGET_XXX\n for details.\n\n\n\nFT_RENDER_MODE_MONO\n\n\nThis mode corresponds to 1-bit bitmaps (with 2\u00a0levels of opacity).\n\n\n\nFT_RENDER_MODE_LCD\n\n\nThis mode corresponds to horizontal RGB and BGR subpixel displays like LCD screens. It produces 8-bit bitmaps that are 3\u00a0times the width of the original glyph outline in pixels, and which use the \nFT_PIXEL_MODE_LCD\n mode.\n\n\n\nFT_RENDER_MODE_LCD_V\n\n\nThis mode corresponds to vertical RGB and BGR subpixel displays (like PDA screens, rotated LCD displays, etc.). It produces 8-bit bitmaps that are 3\u00a0times the height of the original glyph outline in pixels and use the \nFT_PIXEL_MODE_LCD_V\n mode.\n\n\n\n\n\n\nnote\n\n\n\nShould you define FT_CONFIG_OPTION_SUBPIXEL_RENDERING in your \u2018ftoption.h\u2019, which enables patented ClearType-style rendering, the LCD-optimized glyph bitmaps should be filtered to reduce color fringes inherent to this technology. You can either set up LCD filtering with \nFT_Library_SetLcdFilter\n or \nFT_Face_Properties\n, or do the filtering yourself. The default FreeType LCD rendering technology does not require filtering.\n\n\nThe selected render mode only affects vector glyphs of a font. Embedded bitmaps often have a different pixel mode like \nFT_PIXEL_MODE_MONO\n. You can use \nFT_Bitmap_Convert\n to transform them into 8-bit pixmaps.\n\n\n\n\n\nFT_Get_Kerning\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Kerning\n( \nFT_Face\n     face,\n                  \nFT_UInt\n     left_glyph,\n                  \nFT_UInt\n     right_glyph,\n                  \nFT_UInt\n     kern_mode,\n                  \nFT_Vector\n  *akerning );\n\n\n\n\nReturn the kerning vector between two glyphs of the same face.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a source face object.\n\n\n\nleft_glyph\n\n\nThe index of the left glyph in the kern pair.\n\n\n\nright_glyph\n\n\nThe index of the right glyph in the kern pair.\n\n\n\nkern_mode\n\n\nSee \nFT_Kerning_Mode\n for more information. Determines the scale and dimension of the returned kerning vector.\n\n\n\n\n\n\noutput\n\n\n\n\n\nakerning\n\n\nThe kerning vector. This is either in font units, fractional pixels (26.6 format), or pixels for scalable formats, and in pixels for fixed-sizes formats.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nOnly horizontal layouts (left-to-right & right-to-left) are supported by this method. Other layouts, or more sophisticated kernings, are out of the scope of this API function -- they can be implemented through format-specific interfaces.\n\n\nKerning for OpenType fonts implemented in a \u2018GPOS\u2019 table is not supported; use \nFT_HAS_KERNING\n to find out whether a font has data that can be extracted with \u2018FT_Get_Kerning\u2019.\n\n\n\n\n\nFT_Kerning_Mode\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nenum\n  FT_Kerning_Mode_\n  {\n    \nFT_KERNING_DEFAULT\n = 0,\n    \nFT_KERNING_UNFITTED\n,\n    \nFT_KERNING_UNSCALED\n\n\n  } \nFT_Kerning_Mode\n;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `\nFT_Kerning_Mode\n' values instead                      */\n#define ft_kerning_default   \nFT_KERNING_DEFAULT\n\n#define ft_kerning_unfitted  \nFT_KERNING_UNFITTED\n\n#define ft_kerning_unscaled  \nFT_KERNING_UNSCALED\n\n\n\n\n\nAn enumeration to specify the format of kerning values returned by \nFT_Get_Kerning\n.\n\n\nvalues\n\n\n\n\n\nFT_KERNING_DEFAULT\n\n\nReturn grid-fitted kerning distances in 26.6 fractional pixels.\n\n\n\nFT_KERNING_UNFITTED\n\n\nReturn un-grid-fitted kerning distances in 26.6 fractional pixels.\n\n\n\nFT_KERNING_UNSCALED\n\n\nReturn the kerning vector in original font units.\n\n\n\n\n\n\nnote\n\n\n\nFT_KERNING_DEFAULT returns full pixel values; it also makes FreeType heuristically scale down kerning distances at small ppem values so that they don't become too big.\n\n\nBoth FT_KERNING_DEFAULT and FT_KERNING_UNFITTED use the current horizontal scaling factor (as set e.g. with \nFT_Set_Char_Size\n) to convert font units to pixels.\n\n\n\n\n\nFT_Get_Track_Kerning\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Track_Kerning\n( \nFT_Face\n    face,\n                        \nFT_Fixed\n   point_size,\n                        \nFT_Int\n     degree,\n                        \nFT_Fixed\n*  akerning );\n\n\n\n\nReturn the track kerning for a given face object at a given size.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a source face object.\n\n\n\npoint_size\n\n\nThe point size in 16.16 fractional points.\n\n\n\ndegree\n\n\nThe degree of tightness. Increasingly negative values represent tighter track kerning, while increasingly positive values represent looser track kerning. Value zero means no track kerning.\n\n\n\n\n\n\noutput\n\n\n\n\n\nakerning\n\n\nThe kerning in 16.16 fractional points, to be uniformly applied between all glyphs.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nCurrently, only the Type\u00a01 font driver supports track kerning, using data from AFM files (if attached with \nFT_Attach_File\n or \nFT_Attach_Stream\n).\n\n\nOnly very few AFM files come with track kerning data; please refer to Adobe's AFM specification for more details.\n\n\n\n\n\nFT_Get_Glyph_Name\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Glyph_Name\n( \nFT_Face\n     face,\n                     \nFT_UInt\n     glyph_index,\n                     \nFT_Pointer\n  buffer,\n                     \nFT_UInt\n     buffer_max );\n\n\n\n\nRetrieve the ASCII name of a given glyph in a face. This only works for those faces where \nFT_HAS_GLYPH_NAMES\n(face) returns\u00a01.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a source face object.\n\n\n\nglyph_index\n\n\nThe glyph index.\n\n\n\nbuffer_max\n\n\nThe maximum number of bytes available in the buffer.\n\n\n\n\n\n\noutput\n\n\n\n\n\nbuffer\n\n\nA pointer to a target buffer where the name is copied to.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nAn error is returned if the face doesn't provide glyph names or if the glyph index is invalid. In all cases of failure, the first byte of \u2018buffer\u2019 is set to\u00a00 to indicate an empty name.\n\n\nThe glyph name is truncated to fit within the buffer if it is too long. The returned string is always zero-terminated.\n\n\nBe aware that FreeType reorders glyph indices internally so that glyph index\u00a00 always corresponds to the \u2018missing glyph\u2019 (called \u2018.notdef\u2019).\n\n\nThis function always returns an error if the config macro \u2018FT_CONFIG_OPTION_NO_GLYPH_NAMES\u2019 is not defined in \u2018ftoption.h\u2019.\n\n\n\n\n\nFT_Get_Postscript_Name\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nconst\n \nchar\n* )\n  \nFT_Get_Postscript_Name\n( \nFT_Face\n  face );\n\n\n\n\nRetrieve the ASCII PostScript name of a given face, if available. This only works with PostScript, TrueType, and OpenType fonts.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\nreturn\n\n\n\nA pointer to the face's PostScript name. NULL if unavailable.\n\n\nnote\n\n\n\nThe returned pointer is owned by the face and is destroyed with it.\n\n\nFor variation fonts, this string changes if you select a different instance, and you have to call \u2018FT_Get_PostScript_Name\u2019 again to retrieve it. FreeType follows Adobe TechNote #5902, \u2018Generating PostScript Names for Fonts Using OpenType Font Variations\u2019.\n\n\nhttps://download.macromedia.com/pub/developer/opentype/tech-notes/5902.AdobePSNameGeneration.html\n\n\n[Since 2.9] Special PostScript names for named instances are only returned if the named instance is set with \nFT_Set_Named_Instance\n (and the font has corresponding entries in its \u2018fvar\u2019 table). If \nFT_IS_VARIATION\n returns true, the algorithmically derived PostScript name is provided, not looking up special entries for named instances.\n\n\n\n\n\nFT_CharMapRec\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_CharMapRec_\n  {\n    \nFT_Face\n      face;\n    \nFT_Encoding\n  encoding;\n    \nFT_UShort\n    platform_id;\n    \nFT_UShort\n    encoding_id;\n\n  } \nFT_CharMapRec\n;\n\n\n\n\nThe base charmap structure.\n\n\nfields\n\n\n\n\n\nface\n\n\nA handle to the parent face object.\n\n\n\nencoding\n\n\nAn \nFT_Encoding\n tag identifying the charmap. Use this with \nFT_Select_Charmap\n.\n\n\n\nplatform_id\n\n\nAn ID number describing the platform for the following encoding ID. This comes directly from the TrueType specification and gets emulated for other formats.\n\n\n\nencoding_id\n\n\nA platform specific encoding number. This also comes from the TrueType specification and gets emulated similarly.\n\n\n\n\n\n\n\n\n\nFT_Select_Charmap\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Select_Charmap\n( \nFT_Face\n      face,\n                     \nFT_Encoding\n  encoding );\n\n\n\n\nSelect a given charmap by its encoding tag (as listed in \u2018freetype.h\u2019).\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\ninput\n\n\n\n\n\nencoding\n\n\nA handle to the selected encoding.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function returns an error if no charmap in the face corresponds to the encoding queried here.\n\n\nBecause many fonts contain more than a single cmap for Unicode encoding, this function has some special code to select the one that covers Unicode best (\u2018best\u2019 in the sense that a UCS-4 cmap is preferred to a UCS-2 cmap). It is thus preferable to \nFT_Set_Charmap\n in this case.\n\n\n\n\n\nFT_Set_Charmap\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_Charmap\n( \nFT_Face\n     face,\n                  \nFT_CharMap\n  charmap );\n\n\n\n\nSelect a given charmap for character code to glyph index mapping.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\ninput\n\n\n\n\n\ncharmap\n\n\nA handle to the selected charmap.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function returns an error if the charmap is not part of the face (i.e., if it is not listed in the \u2018face->charmaps\u2019 table).\n\n\nIt also fails if an OpenType type\u00a014 charmap is selected (which doesn't map character codes to glyph indices at all).\n\n\n\n\n\nFT_Get_Charmap_Index\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Int\n )\n  \nFT_Get_Charmap_Index\n( \nFT_CharMap\n  charmap );\n\n\n\n\nRetrieve index of a given charmap.\n\n\ninput\n\n\n\n\n\ncharmap\n\n\nA handle to a charmap.\n\n\n\n\n\n\nreturn\n\n\n\nThe index into the array of character maps within the face to which \u2018charmap\u2019 belongs. If an error occurs, -1 is returned.\n\n\n\n\n\nFT_Get_FSType_Flags\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_UShort\n )\n  \nFT_Get_FSType_Flags\n( \nFT_Face\n  face );\n\n\n\n\nReturn the \u2018fsType\u2019 flags for a font.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\nreturn\n\n\n\nThe \u2018fsType\u2019 flags, see \nFT_FSTYPE_XXX\n.\n\n\nnote\n\n\n\nUse this function rather than directly reading the \u2018fs_type\u2019 field in the \nPS_FontInfoRec\n structure, which is only guaranteed to return the correct results for Type\u00a01 fonts.\n\n\nsince\n\n\n\n2.3.8\n\n\n\n\n\nFT_Get_SubGlyph_Info\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_SubGlyph_Info\n( \nFT_GlyphSlot\n  glyph,\n                        \nFT_UInt\n       sub_index,\n                        \nFT_Int\n       *p_index,\n                        \nFT_UInt\n      *p_flags,\n                        \nFT_Int\n       *p_arg1,\n                        \nFT_Int\n       *p_arg2,\n                        \nFT_Matrix\n    *p_transform );\n\n\n\n\nRetrieve a description of a given subglyph. Only use it if \u2018glyph->format\u2019 is \nFT_GLYPH_FORMAT_COMPOSITE\n; an error is returned otherwise.\n\n\ninput\n\n\n\n\n\nglyph\n\n\nThe source glyph slot.\n\n\n\nsub_index\n\n\nThe index of the subglyph. Must be less than \u2018glyph->num_subglyphs\u2019.\n\n\n\n\n\n\noutput\n\n\n\n\n\np_index\n\n\nThe glyph index of the subglyph.\n\n\n\np_flags\n\n\nThe subglyph flags, see \nFT_SUBGLYPH_FLAG_XXX\n.\n\n\n\np_arg1\n\n\nThe subglyph's first argument (if any).\n\n\n\np_arg2\n\n\nThe subglyph's second argument (if any).\n\n\n\np_transform\n\n\nThe subglyph transformation (if any).\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe values of \u2018\np_arg1\u2019, \u2018\np_arg2\u2019, and \u2018\np_transform\u2019 must be interpreted depending on the flags returned in \u2018\np_flags\u2019. See the OpenType specification for details.\n\n\n\n\n\nFT_Face_Internal\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_Face_InternalRec_*  \nFT_Face_Internal\n;\n\n\n\n\nAn opaque handle to an \u2018FT_Face_InternalRec\u2019 structure that models the private data of a given \nFT_Face\n object.\n\n\nThis structure might change between releases of FreeType\u00a02 and is not generally available to client applications.\n\n\n\n\n\nFT_Size_Internal\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_Size_InternalRec_*  \nFT_Size_Internal\n;\n\n\n\n\nAn opaque handle to an \u2018FT_Size_InternalRec\u2019 structure, used to model private data of a given \nFT_Size\n object.\n\n\n\n\n\nFT_Slot_Internal\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_Slot_InternalRec_*  \nFT_Slot_Internal\n;\n\n\n\n\nAn opaque handle to an \u2018FT_Slot_InternalRec\u2019 structure, used to model private data of a given \nFT_GlyphSlot\n object.\n\n\n\n\n\nFT_FACE_FLAG_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_FACE_FLAG_SCALABLE\n          ( 1L <<  0 )\n#define \nFT_FACE_FLAG_FIXED_SIZES\n       ( 1L <<  1 )\n#define \nFT_FACE_FLAG_FIXED_WIDTH\n       ( 1L <<  2 )\n#define \nFT_FACE_FLAG_SFNT\n              ( 1L <<  3 )\n#define \nFT_FACE_FLAG_HORIZONTAL\n        ( 1L <<  4 )\n#define \nFT_FACE_FLAG_VERTICAL\n          ( 1L <<  5 )\n#define \nFT_FACE_FLAG_KERNING\n           ( 1L <<  6 )\n#define \nFT_FACE_FLAG_FAST_GLYPHS\n       ( 1L <<  7 )\n#define \nFT_FACE_FLAG_MULTIPLE_MASTERS\n  ( 1L <<  8 )\n#define \nFT_FACE_FLAG_GLYPH_NAMES\n       ( 1L <<  9 )\n#define \nFT_FACE_FLAG_EXTERNAL_STREAM\n   ( 1L << 10 )\n#define \nFT_FACE_FLAG_HINTER\n            ( 1L << 11 )\n#define \nFT_FACE_FLAG_CID_KEYED\n         ( 1L << 12 )\n#define \nFT_FACE_FLAG_TRICKY\n            ( 1L << 13 )\n#define \nFT_FACE_FLAG_COLOR\n             ( 1L << 14 )\n#define \nFT_FACE_FLAG_VARIATION\n         ( 1L << 15 )\n\n\n\n\nA list of bit flags used in the \u2018face_flags\u2019 field of the \nFT_FaceRec\n structure. They inform client applications of properties of the corresponding face.\n\n\nvalues\n\n\n\n\n\nFT_FACE_FLAG_SCALABLE\n\n\nThe face contains outline glyphs. Note that a face can contain bitmap strikes also, i.e., a face can have both this flag and \nFT_FACE_FLAG_FIXED_SIZES\n set.\n\n\n\nFT_FACE_FLAG_FIXED_SIZES\n\n\nThe face contains bitmap strikes. See also the \u2018num_fixed_sizes\u2019 and \u2018available_sizes\u2019 fields of \nFT_FaceRec\n.\n\n\n\nFT_FACE_FLAG_FIXED_WIDTH\n\n\nThe face contains fixed-width characters (like Courier, Lucida, MonoType, etc.).\n\n\n\nFT_FACE_FLAG_SFNT\n\n\nThe face uses the SFNT storage scheme. For now, this means TrueType and OpenType.\n\n\n\nFT_FACE_FLAG_HORIZONTAL\n\n\nThe face contains horizontal glyph metrics. This should be set for all common formats.\n\n\n\nFT_FACE_FLAG_VERTICAL\n\n\nThe face contains vertical glyph metrics. This is only available in some formats, not all of them.\n\n\n\nFT_FACE_FLAG_KERNING\n\n\nThe face contains kerning information. If set, the kerning distance can be retrieved using the function \nFT_Get_Kerning\n. Otherwise the function always return the vector (0,0). Note that FreeType doesn't handle kerning data from the SFNT \u2018GPOS\u2019 table (as present in many OpenType fonts).\n\n\n\nFT_FACE_FLAG_FAST_GLYPHS\n\n\nTHIS FLAG IS DEPRECATED. DO NOT USE OR TEST IT.\n\n\n\nFT_FACE_FLAG_MULTIPLE_MASTERS\n\n\nThe face contains multiple masters and is capable of interpolating between them. Supported formats are Adobe MM, TrueType GX, and OpenType variation fonts.\n\nSee section \u2018\nMultiple Masters\n\u2019 for API details.\n\n\n\nFT_FACE_FLAG_GLYPH_NAMES\n\n\nThe face contains glyph names, which can be retrieved using \nFT_Get_Glyph_Name\n. Note that some TrueType fonts contain broken glyph name tables. Use the function \nFT_Has_PS_Glyph_Names\n when needed.\n\n\n\nFT_FACE_FLAG_EXTERNAL_STREAM\n\n\nUsed internally by FreeType to indicate that a face's stream was provided by the client application and should not be destroyed when \nFT_Done_Face\n is called. Don't read or test this flag.\n\n\n\nFT_FACE_FLAG_HINTER\n\n\nThe font driver has a hinting machine of its own. For example, with TrueType fonts, it makes sense to use data from the SFNT \u2018gasp\u2019 table only if the native TrueType hinting engine (with the bytecode interpreter) is available and active.\n\n\n\nFT_FACE_FLAG_CID_KEYED\n\n\nThe face is CID-keyed. In that case, the face is not accessed by glyph indices but by CID values. For subsetted CID-keyed fonts this has the consequence that not all index values are a valid argument to \nFT_Load_Glyph\n. Only the CID values for which corresponding glyphs in the subsetted font exist make \u2018FT_Load_Glyph\u2019 return successfully; in all other cases you get an \u2018FT_Err_Invalid_Argument\u2019 error.\n\nNote that CID-keyed fonts that are in an SFNT wrapper (this is, all OpenType/CFF fonts) don't have this flag set since the glyphs are accessed in the normal way (using contiguous indices); the \u2018CID-ness\u2019 isn't visible to the application.\n\n\n\nFT_FACE_FLAG_TRICKY\n\n\nThe face is \u2018tricky\u2019, this is, it always needs the font format's native hinting engine to get a reasonable result. A typical example is the old Chinese font \u2018mingli.ttf\u2019 (but not \u2018mingliu.ttc\u2019) that uses TrueType bytecode instructions to move and scale all of its subglyphs.\n\nIt is not possible to auto-hint such fonts using \nFT_LOAD_FORCE_AUTOHINT\n; it will also ignore \nFT_LOAD_NO_HINTING\n. You have to set both \nFT_LOAD_NO_HINTING\n and \nFT_LOAD_NO_AUTOHINT\n to really disable hinting; however, you probably never want this except for demonstration purposes.\n\nCurrently, there are about a dozen TrueType fonts in the list of tricky fonts; they are hard-coded in file \u2018ttobjs.c\u2019.\n\n\n\nFT_FACE_FLAG_COLOR\n\n\n[Since 2.5.1] The face has color glyph tables. See \nFT_LOAD_COLOR\n for more information.\n\n\n\nFT_FACE_FLAG_VARIATION\n\n\n[Since 2.9] Set if the current face (or named instance) has been altered with \nFT_Set_MM_Design_Coordinates\n, \nFT_Set_Var_Design_Coordinates\n, or \nFT_Set_Var_Blend_Coordinates\n. This flag is unset by a call to \nFT_Set_Named_Instance\n.\n\n\n\n\n\n\n\n\n\nFT_STYLE_FLAG_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_STYLE_FLAG_ITALIC\n  ( 1 << 0 )\n#define \nFT_STYLE_FLAG_BOLD\n    ( 1 << 1 )\n\n\n\n\nA list of bit flags to indicate the style of a given face. These are used in the \u2018style_flags\u2019 field of \nFT_FaceRec\n.\n\n\nvalues\n\n\n\n\n\nFT_STYLE_FLAG_ITALIC\n\n\nThe face style is italic or oblique.\n\n\n\nFT_STYLE_FLAG_BOLD\n\n\nThe face is bold.\n\n\n\n\n\n\nnote\n\n\n\nThe style information as provided by FreeType is very basic. More details are beyond the scope and should be done on a higher level (for example, by analyzing various fields of the \u2018OS/2\u2019 table in SFNT based fonts).\n\n\n\n\n\nFT_OPEN_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_OPEN_MEMORY\n    0x1\n#define \nFT_OPEN_STREAM\n    0x2\n#define \nFT_OPEN_PATHNAME\n  0x4\n#define \nFT_OPEN_DRIVER\n    0x8\n#define \nFT_OPEN_PARAMS\n    0x10\n\n  /* these constants are deprecated; use the corresponding `\nFT_OPEN_XXX\n' */\n  /* values instead                                                      */\n#define ft_open_memory    \nFT_OPEN_MEMORY\n\n#define ft_open_stream    \nFT_OPEN_STREAM\n\n#define ft_open_pathname  \nFT_OPEN_PATHNAME\n\n#define ft_open_driver    \nFT_OPEN_DRIVER\n\n#define ft_open_params    \nFT_OPEN_PARAMS\n\n\n\n\n\nA list of bit field constants used within the \u2018flags\u2019 field of the \nFT_Open_Args\n structure.\n\n\nvalues\n\n\n\n\n\nFT_OPEN_MEMORY\n\n\nThis is a memory-based stream.\n\n\n\nFT_OPEN_STREAM\n\n\nCopy the stream from the \u2018stream\u2019 field.\n\n\n\nFT_OPEN_PATHNAME\n\n\nCreate a new input stream from a C\u00a0path name.\n\n\n\nFT_OPEN_DRIVER\n\n\nUse the \u2018driver\u2019 field.\n\n\n\nFT_OPEN_PARAMS\n\n\nUse the \u2018num_params\u2019 and \u2018params\u2019 fields.\n\n\n\n\n\n\nnote\n\n\n\nThe \u2018FT_OPEN_MEMORY\u2019, \u2018FT_OPEN_STREAM\u2019, and \u2018FT_OPEN_PATHNAME\u2019 flags are mutually exclusive.\n\n\n\n\n\nFT_LOAD_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_LOAD_DEFAULT\n                      0x0\n#define \nFT_LOAD_NO_SCALE\n                     ( 1L << 0 )\n#define \nFT_LOAD_NO_HINTING\n                   ( 1L << 1 )\n#define \nFT_LOAD_RENDER\n                       ( 1L << 2 )\n#define \nFT_LOAD_NO_BITMAP\n                    ( 1L << 3 )\n#define \nFT_LOAD_VERTICAL_LAYOUT\n              ( 1L << 4 )\n#define \nFT_LOAD_FORCE_AUTOHINT\n               ( 1L << 5 )\n#define \nFT_LOAD_CROP_BITMAP\n                  ( 1L << 6 )\n#define \nFT_LOAD_PEDANTIC\n                     ( 1L << 7 )\n#define \nFT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH\n  ( 1L << 9 )\n#define \nFT_LOAD_NO_RECURSE\n                   ( 1L << 10 )\n#define \nFT_LOAD_IGNORE_TRANSFORM\n             ( 1L << 11 )\n#define \nFT_LOAD_MONOCHROME\n                   ( 1L << 12 )\n#define \nFT_LOAD_LINEAR_DESIGN\n                ( 1L << 13 )\n#define \nFT_LOAD_NO_AUTOHINT\n                  ( 1L << 15 )\n  /* Bits 16-19 are used by `FT_LOAD_TARGET_' */\n#define \nFT_LOAD_COLOR\n                        ( 1L << 20 )\n#define \nFT_LOAD_COMPUTE_METRICS\n              ( 1L << 21 )\n#define \nFT_LOAD_BITMAP_METRICS_ONLY\n          ( 1L << 22 )\n\n\n\n\nA list of bit field constants for \nFT_Load_Glyph\n to indicate what kind of operations to perform during glyph loading.\n\n\nvalues\n\n\n\n\n\nFT_LOAD_DEFAULT\n\n\nCorresponding to\u00a00, this value is used as the default glyph load operation. In this case, the following happens:\n\n1. FreeType looks for a bitmap for the glyph corresponding to the face's current size. If one is found, the function returns. The bitmap data can be accessed from the glyph slot (see note below).\n\n2. If no embedded bitmap is searched for or found, FreeType looks for a scalable outline. If one is found, it is loaded from the font file, scaled to device pixels, then \u2018hinted\u2019 to the pixel grid in order to optimize it. The outline data can be accessed from the glyph slot (see note below).\n\nNote that by default the glyph loader doesn't render outlines into bitmaps. The following flags are used to modify this default behaviour to more specific and useful cases.\n\n\n\nFT_LOAD_NO_SCALE\n\n\nDon't scale the loaded outline glyph but keep it in font units.\n\nThis flag implies \nFT_LOAD_NO_HINTING\n and \nFT_LOAD_NO_BITMAP\n, and unsets \nFT_LOAD_RENDER\n.\n\nIf the font is \u2018tricky\u2019 (see \nFT_FACE_FLAG_TRICKY\n for more), using FT_LOAD_NO_SCALE usually yields meaningless outlines because the subglyphs must be scaled and positioned with hinting instructions. This can be solved by loading the font without FT_LOAD_NO_SCALE and setting the character size to \u2018font->units_per_EM\u2019.\n\n\n\nFT_LOAD_NO_HINTING\n\n\nDisable hinting. This generally generates \u2018blurrier\u2019 bitmap glyphs when the glyph are rendered in any of the anti-aliased modes. See also the note below.\n\nThis flag is implied by \nFT_LOAD_NO_SCALE\n.\n\n\n\nFT_LOAD_RENDER\n\n\nCall \nFT_Render_Glyph\n after the glyph is loaded. By default, the glyph is rendered in \nFT_RENDER_MODE_NORMAL\n mode. This can be overridden by \nFT_LOAD_TARGET_XXX\n or \nFT_LOAD_MONOCHROME\n.\n\nThis flag is unset by \nFT_LOAD_NO_SCALE\n.\n\n\n\nFT_LOAD_NO_BITMAP\n\n\nIgnore bitmap strikes when loading. Bitmap-only fonts ignore this flag.\n\n\nFT_LOAD_NO_SCALE\n always sets this flag.\n\n\n\nFT_LOAD_VERTICAL_LAYOUT\n\n\nLoad the glyph for vertical text layout. In particular, the \u2018advance\u2019 value in the \nFT_GlyphSlotRec\n structure is set to the \u2018vertAdvance\u2019 value of the \u2018metrics\u2019 field.\n\nIn case \nFT_HAS_VERTICAL\n doesn't return true, you shouldn't use this flag currently. Reason is that in this case vertical metrics get synthesized, and those values are not always consistent across various font formats.\n\n\n\nFT_LOAD_FORCE_AUTOHINT\n\n\nPrefer the auto-hinter over the font's native hinter. See also the note below.\n\n\n\nFT_LOAD_PEDANTIC\n\n\nMake the font driver perform pedantic verifications during glyph loading. This is mostly used to detect broken glyphs in fonts. By default, FreeType tries to handle broken fonts also.\n\nIn particular, errors from the TrueType bytecode engine are not passed to the application if this flag is not set; this might result in partially hinted or distorted glyphs in case a glyph's bytecode is buggy.\n\n\n\nFT_LOAD_NO_RECURSE\n\n\nDon't load composite glyphs recursively. Instead, the font driver should set the \u2018num_subglyph\u2019 and \u2018subglyphs\u2019 values of the glyph slot accordingly, and set \u2018glyph->format\u2019 to \nFT_GLYPH_FORMAT_COMPOSITE\n. The description of subglyphs can then be accessed with \nFT_Get_SubGlyph_Info\n.\n\nThis flag implies \nFT_LOAD_NO_SCALE\n and \nFT_LOAD_IGNORE_TRANSFORM\n.\n\n\n\nFT_LOAD_IGNORE_TRANSFORM\n\n\nIgnore the transform matrix set by \nFT_Set_Transform\n.\n\n\n\nFT_LOAD_MONOCHROME\n\n\nThis flag is used with \nFT_LOAD_RENDER\n to indicate that you want to render an outline glyph to a 1-bit monochrome bitmap glyph, with 8\u00a0pixels packed into each byte of the bitmap data.\n\nNote that this has no effect on the hinting algorithm used. You should rather use \nFT_LOAD_TARGET_MONO\n so that the monochrome-optimized hinting algorithm is used.\n\n\n\nFT_LOAD_LINEAR_DESIGN\n\n\nKeep \u2018linearHoriAdvance\u2019 and \u2018linearVertAdvance\u2019 fields of \nFT_GlyphSlotRec\n in font units. See \nFT_GlyphSlotRec\n for details.\n\n\n\nFT_LOAD_NO_AUTOHINT\n\n\nDisable the auto-hinter. See also the note below.\n\n\n\nFT_LOAD_COLOR\n\n\nLoad colored glyphs. There are slight differences depending on the font format.\n\n[Since 2.5] Load embedded color bitmap images. The resulting color bitmaps, if available, will have the \nFT_PIXEL_MODE_BGRA\n format, with pre-multiplied color channels. If the flag is not set and color bitmaps are found, they are converted to 256-level gray bitmaps, using the \nFT_PIXEL_MODE_GRAY\n format.\n\n[Since 2.10] If the glyph index contains an entry in the face's \u2018COLR\u2019 table with a \u2018CPAL\u2019 palette table (as defined in the OpenType specification), make \nFT_Render_Glyph\n provide a default blending of the color glyph layers associated with the glyph index, using the same bitmap format as embedded color bitmap images. This is mainly for convenience; for full control of color layers use \nFT_Get_GlyphLayers\n and FreeType's color functions like \nFT_Palette_Select\n instead of setting FT_LOAD_COLOR for rendering so that the client application can handle blending by itself.\n\n\n\nFT_LOAD_COMPUTE_METRICS\n\n\n[Since 2.6.1] Compute glyph metrics from the glyph data, without the use of bundled metrics tables (for example, the \u2018hdmx\u2019 table in TrueType fonts). This flag is mainly used by font validating or font editing applications, which need to ignore, verify, or edit those tables.\n\nCurrently, this flag is only implemented for TrueType fonts.\n\n\n\nFT_LOAD_BITMAP_METRICS_ONLY\n\n\n[Since 2.7.1] Request loading of the metrics and bitmap image information of a (possibly embedded) bitmap glyph without allocating or copying the bitmap image data itself. No effect if the target glyph is not a bitmap image.\n\nThis flag unsets \nFT_LOAD_RENDER\n.\n\n\n\nFT_LOAD_CROP_BITMAP\n\n\nIgnored. Deprecated.\n\n\n\nFT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH\n\n\nIgnored. Deprecated.\n\n\n\n\n\n\nnote\n\n\n\nBy default, hinting is enabled and the font's native hinter (see \nFT_FACE_FLAG_HINTER\n) is preferred over the auto-hinter. You can disable hinting by setting \nFT_LOAD_NO_HINTING\n or change the precedence by setting \nFT_LOAD_FORCE_AUTOHINT\n. You can also set \nFT_LOAD_NO_AUTOHINT\n in case you don't want the auto-hinter to be used at all.\n\n\nSee the description of \nFT_FACE_FLAG_TRICKY\n for a special exception (affecting only a handful of Asian fonts).\n\n\nBesides deciding which hinter to use, you can also decide which hinting algorithm to use. See \nFT_LOAD_TARGET_XXX\n for details.\n\n\nNote that the auto-hinter needs a valid Unicode cmap (either a native one or synthesized by FreeType) for producing correct results. If a font provides an incorrect mapping (for example, assigning the character code U+005A, LATIN CAPITAL LETTER Z, to a glyph depicting a mathematical integral sign), the auto-hinter might produce useless results.\n\n\n\n\n\nFT_LOAD_TARGET_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define FT_LOAD_TARGET_( x )   ( (\nFT_Int32\n)( (x) & 15 ) << 16 )\n\n#define \nFT_LOAD_TARGET_NORMAL\n  FT_LOAD_TARGET_( \nFT_RENDER_MODE_NORMAL\n )\n#define \nFT_LOAD_TARGET_LIGHT\n   FT_LOAD_TARGET_( \nFT_RENDER_MODE_LIGHT\n  )\n#define \nFT_LOAD_TARGET_MONO\n    FT_LOAD_TARGET_( \nFT_RENDER_MODE_MONO\n   )\n#define \nFT_LOAD_TARGET_LCD\n     FT_LOAD_TARGET_( \nFT_RENDER_MODE_LCD\n    )\n#define \nFT_LOAD_TARGET_LCD_V\n   FT_LOAD_TARGET_( \nFT_RENDER_MODE_LCD_V\n  )\n\n\n\n\nA list of values to select a specific hinting algorithm for the hinter. You should OR one of these values to your \u2018load_flags\u2019 when calling \nFT_Load_Glyph\n.\n\n\nNote that a font's native hinters may ignore the hinting algorithm you have specified (e.g., the TrueType bytecode interpreter). You can set \nFT_LOAD_FORCE_AUTOHINT\n to ensure that the auto-hinter is used.\n\n\nvalues\n\n\n\n\n\nFT_LOAD_TARGET_NORMAL\n\n\nThe default hinting algorithm, optimized for standard gray-level rendering. For monochrome output, use \nFT_LOAD_TARGET_MONO\n instead.\n\n\n\nFT_LOAD_TARGET_LIGHT\n\n\nA lighter hinting algorithm for gray-level modes. Many generated glyphs are fuzzier but better resemble their original shape. This is achieved by snapping glyphs to the pixel grid only vertically (Y-axis), as is done by FreeType's new CFF engine or Microsoft's ClearType font renderer. This preserves inter-glyph spacing in horizontal text. The snapping is done either by the native font driver, if the driver itself and the font support it, or by the auto-hinter.\n\nAdvance widths are rounded to integer values; however, using the \u2018lsb_delta\u2019 and \u2018rsb_delta\u2019 fields of \nFT_GlyphSlotRec\n, it is possible to get fractional advance widths for subpixel positioning (which is recommended to use).\n\nIf configuration option AF_CONFIG_OPTION_TT_SIZE_METRICS is active, TrueType-like metrics are used to make this mode behave similarly as in unpatched FreeType versions between 2.4.6 and 2.7.1 (inclusive).\n\n\n\nFT_LOAD_TARGET_MONO\n\n\nStrong hinting algorithm that should only be used for monochrome output. The result is probably unpleasant if the glyph is rendered in non-monochrome modes.\n\n\n\nFT_LOAD_TARGET_LCD\n\n\nA variant of \nFT_LOAD_TARGET_LIGHT\n optimized for horizontally decimated LCD displays.\n\n\n\nFT_LOAD_TARGET_LCD_V\n\n\nA variant of \nFT_LOAD_TARGET_NORMAL\n optimized for vertically decimated LCD displays.\n\n\n\n\n\n\nnote\n\n\n\nYou should use only \none\n of the FT_LOAD_TARGET_XXX values in your \u2018load_flags\u2019. They can't be ORed.\n\n\nIf \nFT_LOAD_RENDER\n is also set, the glyph is rendered in the corresponding mode (i.e., the mode that matches the used algorithm best). An exception is FT_LOAD_TARGET_MONO since it implies \nFT_LOAD_MONOCHROME\n.\n\n\nYou can use a hinting algorithm that doesn't correspond to the same rendering mode. As an example, it is possible to use the \u2018light\u2019 hinting algorithm and have the results rendered in horizontal LCD pixel mode, with code like\n\n  FT_Load_Glyph( face, glyph_index,\n                 load_flags | FT_LOAD_TARGET_LIGHT );\n\n  FT_Render_Glyph( face->glyph, FT_RENDER_MODE_LCD );\n\n\n\nIn general, you should stick with one rendering mode. For example, switching between \nFT_LOAD_TARGET_NORMAL\n and \nFT_LOAD_TARGET_MONO\n enforces a lot of recomputation for TrueType fonts, which is slow. Another reason is caching: Selecting a different mode usually causes changes in both the outlines and the rasterized bitmaps; it is thus necessary to empty the cache after a mode switch to avoid false hits.\n\n\n\n\n\nFT_SUBGLYPH_FLAG_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_SUBGLYPH_FLAG_ARGS_ARE_WORDS\n          1\n#define \nFT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES\n      2\n#define \nFT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID\n        4\n#define \nFT_SUBGLYPH_FLAG_SCALE\n                   8\n#define \nFT_SUBGLYPH_FLAG_XY_SCALE\n             0x40\n#define \nFT_SUBGLYPH_FLAG_2X2\n                  0x80\n#define \nFT_SUBGLYPH_FLAG_USE_MY_METRICS\n      0x200\n\n\n\n\nA list of constants describing subglyphs. Please refer to the \u2018glyf\u2019 table description in the OpenType specification for the meaning of the various flags (which get synthesized for non-OpenType subglyphs).\n\n\nvalues\n\n\n\n\n\nFT_SUBGLYPH_FLAG_ARGS_ARE_WORDS\n\n\n\n\n\nFT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES\n\n\n\n\n\n\nFT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID\n\n\n\n\n\n\nFT_SUBGLYPH_FLAG_SCALE\n\n\n\n\n\n\nFT_SUBGLYPH_FLAG_XY_SCALE\n\n\n\n\n\n\nFT_SUBGLYPH_FLAG_2X2\n\n\n\n\n\n\nFT_SUBGLYPH_FLAG_USE_MY_METRICS\n\n\n\n\n\n\n\n\n\n\n\n\nFT_FSTYPE_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_FSTYPE_INSTALLABLE_EMBEDDING\n         0x0000\n#define \nFT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING\n  0x0002\n#define \nFT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING\n   0x0004\n#define \nFT_FSTYPE_EDITABLE_EMBEDDING\n            0x0008\n#define \nFT_FSTYPE_NO_SUBSETTING\n                 0x0100\n#define \nFT_FSTYPE_BITMAP_EMBEDDING_ONLY\n         0x0200\n\n\n\n\nA list of bit flags used in the \u2018fsType\u2019 field of the OS/2 table in a TrueType or OpenType font and the \u2018FSType\u2019 entry in a PostScript font. These bit flags are returned by \nFT_Get_FSType_Flags\n; they inform client applications of embedding and subsetting restrictions associated with a font.\n\n\nSee \nhttps://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/FontPolicies.pdf\n for more details.\n\n\nvalues\n\n\n\n\n\nFT_FSTYPE_INSTALLABLE_EMBEDDING\n\n\nFonts with no fsType bit set may be embedded and permanently installed on the remote system by an application.\n\n\n\nFT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING\n\n\nFonts that have only this bit set must not be modified, embedded or exchanged in any manner without first obtaining permission of the font software copyright owner.\n\n\n\nFT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING\n\n\nThe font may be embedded and temporarily loaded on the remote system. Documents containing Preview & Print fonts must be opened \u2018read-only\u2019; no edits can be applied to the document.\n\n\n\nFT_FSTYPE_EDITABLE_EMBEDDING\n\n\nThe font may be embedded but must only be installed temporarily on other systems. In contrast to Preview & Print fonts, documents containing editable fonts may be opened for reading, editing is permitted, and changes may be saved.\n\n\n\nFT_FSTYPE_NO_SUBSETTING\n\n\nThe font may not be subsetted prior to embedding.\n\n\n\nFT_FSTYPE_BITMAP_EMBEDDING_ONLY\n\n\nOnly bitmaps contained in the font may be embedded; no outline data may be embedded. If there are no bitmaps available in the font, then the font is unembeddable.\n\n\n\n\n\n\nnote\n\n\n\nThe flags are ORed together, thus more than a single value can be returned.\n\n\nWhile the \u2018fsType\u2019 flags can indicate that a font may be embedded, a license with the font vendor may be separately required to use the font in this way.\n\n\n\n\n\nFT_HAS_FAST_GLYPHS\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n#define \nFT_HAS_FAST_GLYPHS\n( face )  0\n\n\n\n\nDeprecated.\n\n\n\n\n\nFT_Glyph_Layer\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_Glyph_LayerRec_*  \nFT_Glyph_Layer\n;\n\n\n\n\nA handle to an \nFT_Glyph_LayerRec\n structure to model a given colored glyph layer.\n\n\n\n\n\nFT_Glyph_LayerRec\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_Glyph_LayerRec_\n  {\n    \nFT_UShort\n  glyph_index;\n    \nFT_UShort\n  color_index;\n\n  } \nFT_Glyph_LayerRec\n;\n\n\n\n\nThis structure models a given colored glyph layer as defined in the OpenType \u2018COLR\u2019 table. It is used by \nFT_Get_GlyphLayers\n.\n\n\nfields\n\n\n\n\n\nglyph_index\n\n\nThe glyph index of the current glyph layer.\n\n\n\ncolor_index\n\n\nThe color index into the font face's color palette, which can be retrieved with \nFT_Palette_Select\n. The value 0xFFFF is special; it doesn't reference a palette entry but indicates that the text foreground color should be used instead (to be set up by the application outside of FreeType).\n\n\n\n\n\n\n\n\n\nFT_Get_GlyphLayers\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_GlyphLayers\n( \nFT_GlyphSlot\n     glyph,\n                      \nFT_UShort\n       *anum_layers,\n                      \nFT_Glyph_Layer\n  *alayers );\n\n\n\n\nThis is an interface to the \u2018COLR\u2019 table in OpenType fonts to retrieve the colored glyph layers array associated with the current glyph slot.\n\n\nhttps://docs.microsoft.com/en-us/typography/opentype/spec/colr\n\n\nThe glyph layer data for a given glyph slot, if present, provides an alternative, multi-colour glyph representation: Instead of rendering the outline or bitmap in the glyph slot, glyphs with the indices and colors returned in the \nFT_Glyph_Layer\n array are rendered layer by layer.\n\n\ninput\n\n\n\n\n\nglyph\n\n\nThe source glyph slot.\n\n\n\n\n\n\noutput\n\n\n\n\n\nanum_layers\n\n\nThe number of colored glyph layers for \u2018glyph\u2019.\n\n\n\nalayers\n\n\nAn \nFT_Glyph_Layer\n array with \u2018anum_layers\u2019 elements. NULL if there aren't glyph layers.\n\nThe elements are ordered in the z\u00a0direction from bottom to top; an element \u2018n\u2019 should be rendered with the associated palette color and blended on top of the already rendered layers (elements 0, 1, ..., n-1).\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe data in \u2018alayers\u2019 is owned and managed by the glyph slot.\n\n\nThis function is necessary if you want to handle glyph layers by yourself. In particular, functions that operate with \nFT_GlyphRec\n objects (like \nFT_Get_Glyph\n or \nFT_Glyph_To_Bitmap\n) don't have access to this information.\n\n\nFT_Render_Glyph\n, however, handles colored glyph layers automatically if the \nFT_LOAD_COLOR\n flag is passed to it.",
            "title": "Base Interface"
        },
        {
            "location": "/ft2-base_interface/#base-interface",
            "text": "",
            "title": "Base Interface"
        },
        {
            "location": "/ft2-base_interface/#synopsis",
            "text": "This section describes the most important public high-level API functions of FreeType\u00a02.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-base_interface/#ft_library",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct  FT_LibraryRec_  * FT_Library ;  A handle to a FreeType library instance. Each \u2018library\u2019 is completely independent from the others; it is the \u2018root\u2019 of a set of objects like fonts, faces, sizes, etc.  It also embeds a memory manager (see  FT_Memory ), as well as a scan-line converter object (see  FT_Raster ).  In multi-threaded applications it is easiest to use one \u2018FT_Library\u2019 object per thread. In case this is too cumbersome, a single \u2018FT_Library\u2019 object across threads is possible also (since FreeType version 2.5.6), as long as a mutex lock is used around  FT_New_Face  and  FT_Done_Face .",
            "title": "FT_Library"
        },
        {
            "location": "/ft2-base_interface/#ft_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct  FT_FaceRec_*   FT_Face ;  A handle to a typographic face object. A face object models a given typeface, in a given style.",
            "title": "FT_Face"
        },
        {
            "location": "/ft2-base_interface/#ft_size",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct  FT_SizeRec_*   FT_Size ;  A handle to an object that models a face scaled to a given character size.",
            "title": "FT_Size"
        },
        {
            "location": "/ft2-base_interface/#ft_glyphslot",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct  FT_GlyphSlotRec_*   FT_GlyphSlot ;  A handle to a given \u2018glyph slot\u2019. A slot is a container that can hold any of the glyphs contained in its parent face.  In other words, each time you call  FT_Load_Glyph  or  FT_Load_Char , the slot's content is erased by the new glyph data, i.e., the glyph's metrics, its image (bitmap or outline), and other control information.",
            "title": "FT_GlyphSlot"
        },
        {
            "location": "/ft2-base_interface/#ft_charmap",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct  FT_CharMapRec_*   FT_CharMap ;  A handle to a character map (usually abbreviated to \u2018charmap\u2019). A charmap is used to translate character codes in a given encoding into glyph indexes for its parent's face. Some font formats may provide several charmaps per font.  Each face object owns zero or more charmaps, but only one of them can be \u2018active\u2019, providing the data used by  FT_Get_Char_Index  or  FT_Load_Char .  The list of available charmaps in a face is available through the \u2018face->num_charmaps\u2019 and \u2018face->charmaps\u2019 fields of  FT_FaceRec .  The currently active charmap is available as \u2018face->charmap\u2019. You should call  FT_Set_Charmap  to change it.",
            "title": "FT_CharMap"
        },
        {
            "location": "/ft2-base_interface/#ft_encoding",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   enum   FT_Encoding_\n  {\n     FT_ENC_TAG (  FT_ENCODING_NONE , 0, 0, 0, 0 ),\n\n     FT_ENC_TAG (  FT_ENCODING_MS_SYMBOL , 's', 'y', 'm', 'b' ),\n     FT_ENC_TAG (  FT_ENCODING_UNICODE ,   'u', 'n', 'i', 'c' ),\n\n     FT_ENC_TAG (  FT_ENCODING_SJIS ,    's', 'j', 'i', 's' ),\n     FT_ENC_TAG (  FT_ENCODING_PRC ,     'g', 'b', ' ', ' ' ),\n     FT_ENC_TAG (  FT_ENCODING_BIG5 ,    'b', 'i', 'g', '5' ),\n     FT_ENC_TAG (  FT_ENCODING_WANSUNG , 'w', 'a', 'n', 's' ),\n     FT_ENC_TAG (  FT_ENCODING_JOHAB ,   'j', 'o', 'h', 'a' ),\n\n    /* for backward compatibility */\n    FT_ENCODING_GB2312     =  FT_ENCODING_PRC ,\n     FT_ENCODING_MS_SJIS     =  FT_ENCODING_SJIS ,\n     FT_ENCODING_MS_GB2312   =  FT_ENCODING_PRC ,\n     FT_ENCODING_MS_BIG5     =  FT_ENCODING_BIG5 ,\n     FT_ENCODING_MS_WANSUNG  =  FT_ENCODING_WANSUNG ,\n     FT_ENCODING_MS_JOHAB    =  FT_ENCODING_JOHAB ,\n\n     FT_ENC_TAG (  FT_ENCODING_ADOBE_STANDARD , 'A', 'D', 'O', 'B' ),\n     FT_ENC_TAG (  FT_ENCODING_ADOBE_EXPERT ,   'A', 'D', 'B', 'E' ),\n     FT_ENC_TAG (  FT_ENCODING_ADOBE_CUSTOM ,   'A', 'D', 'B', 'C' ),\n     FT_ENC_TAG (  FT_ENCODING_ADOBE_LATIN_1 ,  'l', 'a', 't', '1' ),\n\n     FT_ENC_TAG (  FT_ENCODING_OLD_LATIN_2 , 'l', 'a', 't', '2' ),\n\n     FT_ENC_TAG (  FT_ENCODING_APPLE_ROMAN , 'a', 'r', 'm', 'n' )\n\n  }  FT_Encoding ;\n\n\n  /* these constants are deprecated; use the corresponding ` FT_Encoding ' */\n  /* values instead                                                      */\n#define ft_encoding_none             FT_ENCODING_NONE \n#define ft_encoding_unicode          FT_ENCODING_UNICODE \n#define ft_encoding_symbol           FT_ENCODING_MS_SYMBOL \n#define ft_encoding_latin_1          FT_ENCODING_ADOBE_LATIN_1 \n#define ft_encoding_latin_2          FT_ENCODING_OLD_LATIN_2 \n#define ft_encoding_sjis             FT_ENCODING_SJIS \n#define ft_encoding_gb2312           FT_ENCODING_PRC \n#define ft_encoding_big5             FT_ENCODING_BIG5 \n#define ft_encoding_wansung          FT_ENCODING_WANSUNG \n#define ft_encoding_johab            FT_ENCODING_JOHAB \n\n#define ft_encoding_adobe_standard   FT_ENCODING_ADOBE_STANDARD \n#define ft_encoding_adobe_expert     FT_ENCODING_ADOBE_EXPERT \n#define ft_encoding_adobe_custom     FT_ENCODING_ADOBE_CUSTOM \n#define ft_encoding_apple_roman      FT_ENCODING_APPLE_ROMAN   An enumeration to specify character sets supported by charmaps. Used in the  FT_Select_Charmap  API function.",
            "title": "FT_Encoding"
        },
        {
            "location": "/ft2-base_interface/#ft_enc_tag",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#ifndef  FT_ENC_TAG \n#define  FT_ENC_TAG ( value, a, b, c, d )         \\\n          value = ( ( ( FT_UInt32 )(a) << 24 ) |  \\\n                    ( ( FT_UInt32 )(b) << 16 ) |  \\\n                    ( ( FT_UInt32 )(c) <<  8 ) |  \\\n                      ( FT_UInt32 )(d)         )\n\n#endif /*  FT_ENC_TAG  */  This macro converts four-letter tags into an unsigned long. It is used to define \u2018encoding\u2019 identifiers (see  FT_Encoding ).",
            "title": "FT_ENC_TAG"
        },
        {
            "location": "/ft2-base_interface/#ft_facerec",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct   FT_FaceRec_\n  {\n     FT_Long            num_faces;\n     FT_Long            face_index;\n\n     FT_Long            face_flags;\n     FT_Long            style_flags;\n\n     FT_Long            num_glyphs;\n\n     FT_String *        family_name;\n     FT_String *        style_name;\n\n     FT_Int             num_fixed_sizes;\n     FT_Bitmap_Size *   available_sizes;\n\n     FT_Int             num_charmaps;\n     FT_CharMap *       charmaps;\n\n     FT_Generic         generic;\n\n    /*# The following member variables (down to `underline_thickness') */\n    /*# are only relevant to scalable outlines; cf. @ FT_Bitmap_Size     */\n    /*# for bitmap fonts.                                              */\n     FT_BBox            bbox;\n\n     FT_UShort          units_per_EM;\n     FT_Short           ascender;\n     FT_Short           descender;\n     FT_Short           height;\n\n     FT_Short           max_advance_width;\n     FT_Short           max_advance_height;\n\n     FT_Short           underline_position;\n     FT_Short           underline_thickness;\n\n     FT_GlyphSlot       glyph;\n     FT_Size            size;\n     FT_CharMap         charmap;\n\n    /*@private begin */\n\n     FT_Driver          driver;\n     FT_Memory          memory;\n     FT_Stream          stream;\n\n     FT_ListRec         sizes_list;\n\n     FT_Generic         autohint;   /* face-specific auto-hinter data */\n     void *             extensions; /* unused                         */\n\n     FT_Face_Internal   internal;\n\n    /*@private end */\n\n  }  FT_FaceRec ;  FreeType root face class structure. A face object models a typeface in a font file.",
            "title": "FT_FaceRec"
        },
        {
            "location": "/ft2-base_interface/#ft_has_horizontal",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_HAS_HORIZONTAL ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_HORIZONTAL  )  A macro that returns true whenever a face object contains horizontal metrics (this is true for all font formats though).",
            "title": "FT_HAS_HORIZONTAL"
        },
        {
            "location": "/ft2-base_interface/#ft_has_vertical",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_HAS_VERTICAL ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_VERTICAL  )  A macro that returns true whenever a face object contains real vertical metrics (and not only synthesized ones).",
            "title": "FT_HAS_VERTICAL"
        },
        {
            "location": "/ft2-base_interface/#ft_has_kerning",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_HAS_KERNING ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_KERNING  )  A macro that returns true whenever a face object contains kerning data that can be accessed with  FT_Get_Kerning .",
            "title": "FT_HAS_KERNING"
        },
        {
            "location": "/ft2-base_interface/#ft_has_fixed_sizes",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_HAS_FIXED_SIZES ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_FIXED_SIZES  )  A macro that returns true whenever a face object contains some embedded bitmaps. See the \u2018available_sizes\u2019 field of the  FT_FaceRec  structure.",
            "title": "FT_HAS_FIXED_SIZES"
        },
        {
            "location": "/ft2-base_interface/#ft_has_glyph_names",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_HAS_GLYPH_NAMES ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_GLYPH_NAMES  )  A macro that returns true whenever a face object contains some glyph names that can be accessed through  FT_Get_Glyph_Name .",
            "title": "FT_HAS_GLYPH_NAMES"
        },
        {
            "location": "/ft2-base_interface/#ft_has_color",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_HAS_COLOR ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_COLOR  )  A macro that returns true whenever a face object contains tables for color glyphs.",
            "title": "FT_HAS_COLOR"
        },
        {
            "location": "/ft2-base_interface/#ft_has_multiple_masters",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_HAS_MULTIPLE_MASTERS ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_MULTIPLE_MASTERS  )  A macro that returns true whenever a face object contains some multiple masters. The functions provided by  FT_MULTIPLE_MASTERS_H  are then available to choose the exact design you want.",
            "title": "FT_HAS_MULTIPLE_MASTERS"
        },
        {
            "location": "/ft2-base_interface/#ft_is_sfnt",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_IS_SFNT ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_SFNT  )  A macro that returns true whenever a face object contains a font whose format is based on the SFNT storage scheme. This usually means: TrueType fonts, OpenType fonts, as well as SFNT-based embedded bitmap fonts.  If this macro is true, all functions defined in  FT_SFNT_NAMES_H  and  FT_TRUETYPE_TABLES_H  are available.",
            "title": "FT_IS_SFNT"
        },
        {
            "location": "/ft2-base_interface/#ft_is_scalable",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_IS_SCALABLE ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_SCALABLE  )  A macro that returns true whenever a face object contains a scalable font face (true for TrueType, Type\u00a01, Type\u00a042, CID, OpenType/CFF, and PFR font formats).",
            "title": "FT_IS_SCALABLE"
        },
        {
            "location": "/ft2-base_interface/#ft_is_fixed_width",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_IS_FIXED_WIDTH ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_FIXED_WIDTH  )  A macro that returns true whenever a face object contains a font face that contains fixed-width (or \u2018monospace\u2019, \u2018fixed-pitch\u2019, etc.) glyphs.",
            "title": "FT_IS_FIXED_WIDTH"
        },
        {
            "location": "/ft2-base_interface/#ft_is_cid_keyed",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_IS_CID_KEYED ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_CID_KEYED  )  A macro that returns true whenever a face object contains a CID-keyed font. See the discussion of  FT_FACE_FLAG_CID_KEYED  for more details.  If this macro is true, all functions defined in  FT_CID_H  are available.",
            "title": "FT_IS_CID_KEYED"
        },
        {
            "location": "/ft2-base_interface/#ft_is_tricky",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_IS_TRICKY ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_TRICKY  )  A macro that returns true whenever a face represents a \u2018tricky\u2019 font. See the discussion of  FT_FACE_FLAG_TRICKY  for more details.",
            "title": "FT_IS_TRICKY"
        },
        {
            "location": "/ft2-base_interface/#ft_is_named_instance",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_IS_NAMED_INSTANCE ( face ) \\\n          ( (face)->face_index & 0x7FFF0000L )  A macro that returns true whenever a face object is a named instance of a GX or OpenType variation font.  [Since 2.9] Changing the design coordinates with  FT_Set_Var_Design_Coordinates  or  FT_Set_Var_Blend_Coordinates  does not influence the return value of this macro (only  FT_Set_Named_Instance  does that).",
            "title": "FT_IS_NAMED_INSTANCE"
        },
        {
            "location": "/ft2-base_interface/#ft_is_variation",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_IS_VARIATION ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_VARIATION  )  A macro that returns true whenever a face object has been altered by  FT_Set_MM_Design_Coordinates ,  FT_Set_Var_Design_Coordinates , or  FT_Set_Var_Blend_Coordinates .",
            "title": "FT_IS_VARIATION"
        },
        {
            "location": "/ft2-base_interface/#ft_sizerec",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct   FT_SizeRec_\n  {\n     FT_Face            face;      /* parent face object              */\n     FT_Generic         generic;   /* generic pointer for client uses */\n     FT_Size_Metrics    metrics;   /* size metrics                    */\n     FT_Size_Internal   internal;\n\n  }  FT_SizeRec ;  FreeType root size class structure. A size object models a face object at a given size.",
            "title": "FT_SizeRec"
        },
        {
            "location": "/ft2-base_interface/#ft_size_metrics",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct   FT_Size_Metrics_\n  {\n     FT_UShort   x_ppem;      /* horizontal pixels per EM               */\n     FT_UShort   y_ppem;      /* vertical pixels per EM                 */\n\n     FT_Fixed    x_scale;     /* scaling values used to convert font    */\n     FT_Fixed    y_scale;     /* units to 26.6 fractional pixels        */\n\n     FT_Pos      ascender;    /* ascender in 26.6 frac. pixels          */\n     FT_Pos      descender;   /* descender in 26.6 frac. pixels         */\n     FT_Pos      height;      /* text height in 26.6 frac. pixels       */\n     FT_Pos      max_advance; /* max horizontal advance, in 26.6 pixels */\n\n  }  FT_Size_Metrics ;  The size metrics structure gives the metrics of a size object.",
            "title": "FT_Size_Metrics"
        },
        {
            "location": "/ft2-base_interface/#ft_glyphslotrec",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct   FT_GlyphSlotRec_\n  {\n     FT_Library         library;\n     FT_Face            face;\n     FT_GlyphSlot       next;\n     FT_UInt            reserved;       /* retained for binary compatibility */\n     FT_Generic         generic;\n\n     FT_Glyph_Metrics   metrics;\n     FT_Fixed           linearHoriAdvance;\n     FT_Fixed           linearVertAdvance;\n     FT_Vector          advance;\n\n     FT_Glyph_Format    format;\n\n     FT_Bitmap          bitmap;\n     FT_Int             bitmap_left;\n     FT_Int             bitmap_top;\n\n     FT_Outline         outline;\n\n     FT_UInt            num_subglyphs;\n     FT_SubGlyph        subglyphs;\n\n     void *             control_data;\n     long               control_len;\n\n     FT_Pos             lsb_delta;\n     FT_Pos             rsb_delta;\n\n     void *             other;\n\n     FT_Slot_Internal   internal;\n\n  }  FT_GlyphSlotRec ;  FreeType root glyph slot class structure. A glyph slot is a container where individual glyphs can be loaded, be they in outline or bitmap format.",
            "title": "FT_GlyphSlotRec"
        },
        {
            "location": "/ft2-base_interface/#ft_glyph_metrics",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct   FT_Glyph_Metrics_\n  {\n     FT_Pos   width;\n     FT_Pos   height;\n\n     FT_Pos   horiBearingX;\n     FT_Pos   horiBearingY;\n     FT_Pos   horiAdvance;\n\n     FT_Pos   vertBearingX;\n     FT_Pos   vertBearingY;\n     FT_Pos   vertAdvance;\n\n  }  FT_Glyph_Metrics ;  A structure to model the metrics of a single glyph. The values are expressed in 26.6 fractional pixel format; if the flag  FT_LOAD_NO_SCALE  has been used while loading the glyph, values are expressed in font units instead.",
            "title": "FT_Glyph_Metrics"
        },
        {
            "location": "/ft2-base_interface/#ft_subglyph",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct  FT_SubGlyphRec_*   FT_SubGlyph ;  The subglyph structure is an internal object used to describe subglyphs (for example, in the case of composites).",
            "title": "FT_SubGlyph"
        },
        {
            "location": "/ft2-base_interface/#ft_bitmap_size",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct   FT_Bitmap_Size_\n  {\n     FT_Short   height;\n     FT_Short   width;\n\n     FT_Pos     size;\n\n     FT_Pos     x_ppem;\n     FT_Pos     y_ppem;\n\n  }  FT_Bitmap_Size ;  This structure models the metrics of a bitmap strike (i.e., a set of glyphs for a given point size and resolution) in a bitmap font. It is used for the \u2018available_sizes\u2019 field of  FT_Face .",
            "title": "FT_Bitmap_Size"
        },
        {
            "location": "/ft2-base_interface/#ft_init_freetype",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Init_FreeType (  FT_Library   *alibrary );  Initialize a new FreeType library object. The set of modules that are registered by this function is determined at build time.",
            "title": "FT_Init_FreeType"
        },
        {
            "location": "/ft2-base_interface/#ft_done_freetype",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Done_FreeType (  FT_Library   library );  Destroy a given FreeType library object and all of its children, including resources, drivers, faces, sizes, etc.",
            "title": "FT_Done_FreeType"
        },
        {
            "location": "/ft2-base_interface/#ft_new_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_New_Face (  FT_Library    library,\n                const   char *  filepathname,\n                FT_Long       face_index,\n                FT_Face      *aface );  Call  FT_Open_Face  to open a font by its pathname.",
            "title": "FT_New_Face"
        },
        {
            "location": "/ft2-base_interface/#ft_done_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Done_Face (  FT_Face   face );  Discard a given face object, as well as all of its child slots and sizes.",
            "title": "FT_Done_Face"
        },
        {
            "location": "/ft2-base_interface/#ft_reference_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Reference_Face (  FT_Face   face );  A counter gets initialized to\u00a01 at the time an  FT_Face  structure is created. This function increments the counter.  FT_Done_Face  then only destroys a face if the counter is\u00a01, otherwise it simply decrements the counter.  This function helps in managing life-cycles of structures that reference  FT_Face  objects.",
            "title": "FT_Reference_Face"
        },
        {
            "location": "/ft2-base_interface/#ft_new_memory_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_New_Memory_Face (  FT_Library       library,\n                       const   FT_Byte *  file_base,\n                       FT_Long          file_size,\n                       FT_Long          face_index,\n                       FT_Face         *aface );  Call  FT_Open_Face  to open a font that has been loaded into memory.",
            "title": "FT_New_Memory_Face"
        },
        {
            "location": "/ft2-base_interface/#ft_face_properties",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Face_Properties (  FT_Face         face,\n                       FT_UInt         num_properties,\n                       FT_Parameter *  properties );  Set or override certain (library or module-wide) properties on a face-by-face basis. Useful for finer-grained control and avoiding locks on shared structures (threads can modify their own faces as they see fit).  Contrary to  FT_Property_Set , this function uses  FT_Parameter  so that you can pass multiple properties to the target face in one call. Note that only a subset of the available properties can be controlled.    FT_PARAM_TAG_STEM_DARKENING  (stem darkening, corresponding to the property \u2018no-stem-darkening\u2019 provided by the \u2018autofit\u2019, \u2018cff\u2019, \u2018type1\u2019, and \u2018t1cid\u2019 modules; see  no-stem-darkening ).    FT_PARAM_TAG_LCD_FILTER_WEIGHTS  (LCD filter weights, corresponding to function  FT_Library_SetLcdFilterWeights ).    FT_PARAM_TAG_RANDOM_SEED  (seed value for the CFF, Type\u00a01, and CID \u2018random\u2019 operator, corresponding to the \u2018random-seed\u2019 property provided by the \u2018cff\u2019, \u2018type1\u2019, and \u2018t1cid\u2019 modules; see  random-seed ).    Pass NULL as \u2018data\u2019 in  FT_Parameter  for a given tag to reset the option and use the library or module default again.",
            "title": "FT_Face_Properties"
        },
        {
            "location": "/ft2-base_interface/#ft_open_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Open_Face (  FT_Library            library,\n                 const   FT_Open_Args *  args,\n                 FT_Long               face_index,\n                 FT_Face              *aface );  Create a face object from a given resource described by  FT_Open_Args .",
            "title": "FT_Open_Face"
        },
        {
            "location": "/ft2-base_interface/#ft_open_args",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct   FT_Open_Args_\n  {\n     FT_UInt          flags;\n     const   FT_Byte *  memory_base;\n     FT_Long          memory_size;\n     FT_String *      pathname;\n     FT_Stream        stream;\n     FT_Module        driver;\n     FT_Int           num_params;\n     FT_Parameter *   params;\n\n  }  FT_Open_Args ;  A structure to indicate how to open a new font file or stream. A pointer to such a structure can be used as a parameter for the functions  FT_Open_Face  and  FT_Attach_Stream .",
            "title": "FT_Open_Args"
        },
        {
            "location": "/ft2-base_interface/#ft_parameter",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct   FT_Parameter_\n  {\n     FT_ULong     tag;\n     FT_Pointer   data;\n\n  }  FT_Parameter ;  A simple structure to pass more or less generic parameters to  FT_Open_Face  and  FT_Face_Properties .",
            "title": "FT_Parameter"
        },
        {
            "location": "/ft2-base_interface/#ft_attach_file",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Attach_File (  FT_Face       face,\n                   const   char *  filepathname );  Call  FT_Attach_Stream  to attach a file.",
            "title": "FT_Attach_File"
        },
        {
            "location": "/ft2-base_interface/#ft_attach_stream",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Attach_Stream (  FT_Face         face,\n                     FT_Open_Args *  parameters );  \u2018Attach\u2019 data to a face object. Normally, this is used to read additional information for the face object. For example, you can attach an AFM file that comes with a Type\u00a01 font to get the kerning values and other metrics.",
            "title": "FT_Attach_Stream"
        },
        {
            "location": "/ft2-base_interface/#ft_set_char_size",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Set_Char_Size (  FT_Face      face,\n                     FT_F26Dot6   char_width,\n                     FT_F26Dot6   char_height,\n                     FT_UInt      horz_resolution,\n                     FT_UInt      vert_resolution );  Call  FT_Request_Size  to request the nominal size (in points).",
            "title": "FT_Set_Char_Size"
        },
        {
            "location": "/ft2-base_interface/#ft_set_pixel_sizes",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Set_Pixel_Sizes (  FT_Face   face,\n                       FT_UInt   pixel_width,\n                       FT_UInt   pixel_height );  Call  FT_Request_Size  to request the nominal size (in pixels).",
            "title": "FT_Set_Pixel_Sizes"
        },
        {
            "location": "/ft2-base_interface/#ft_request_size",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Request_Size (  FT_Face           face,\n                    FT_Size_Request   req );  Resize the scale of the active  FT_Size  object in a face.",
            "title": "FT_Request_Size"
        },
        {
            "location": "/ft2-base_interface/#ft_select_size",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Select_Size (  FT_Face   face,\n                   FT_Int    strike_index );  Select a bitmap strike. To be more precise, this function sets the scaling factors of the active  FT_Size  object in a face so that bitmaps from this particular strike are taken by  FT_Load_Glyph  and friends.",
            "title": "FT_Select_Size"
        },
        {
            "location": "/ft2-base_interface/#ft_size_request_type",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   enum   FT_Size_Request_Type_\n  {\n     FT_SIZE_REQUEST_TYPE_NOMINAL ,\n     FT_SIZE_REQUEST_TYPE_REAL_DIM ,\n     FT_SIZE_REQUEST_TYPE_BBOX ,\n     FT_SIZE_REQUEST_TYPE_CELL ,\n     FT_SIZE_REQUEST_TYPE_SCALES ,\n\n    FT_SIZE_REQUEST_TYPE_MAX\n\n  }  FT_Size_Request_Type ;  An enumeration type that lists the supported size request types, i.e., what input size (in font units) maps to the requested output size (in pixels, as computed from the arguments of  FT_Size_Request ).",
            "title": "FT_Size_Request_Type"
        },
        {
            "location": "/ft2-base_interface/#ft_size_requestrec",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct   FT_Size_RequestRec_\n  {\n     FT_Size_Request_Type   type;\n     FT_Long                width;\n     FT_Long                height;\n     FT_UInt                horiResolution;\n     FT_UInt                vertResolution;\n\n  }  FT_Size_RequestRec ;  A structure to model a size request.",
            "title": "FT_Size_RequestRec"
        },
        {
            "location": "/ft2-base_interface/#ft_size_request",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct  FT_Size_RequestRec_  * FT_Size_Request ;  A handle to a size request structure.",
            "title": "FT_Size_Request"
        },
        {
            "location": "/ft2-base_interface/#ft_set_transform",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  void  )\n   FT_Set_Transform (  FT_Face      face,\n                     FT_Matrix *  matrix,\n                     FT_Vector *  delta );  Set the transformation that is applied to glyph images when they are loaded into a glyph slot through  FT_Load_Glyph .",
            "title": "FT_Set_Transform"
        },
        {
            "location": "/ft2-base_interface/#ft_load_glyph",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Load_Glyph (  FT_Face    face,\n                  FT_UInt    glyph_index,\n                  FT_Int32   load_flags );  Load a glyph into the glyph slot of a face object.",
            "title": "FT_Load_Glyph"
        },
        {
            "location": "/ft2-base_interface/#ft_get_char_index",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_UInt  )\n   FT_Get_Char_Index (  FT_Face    face,\n                      FT_ULong   charcode );  Return the glyph index of a given character code. This function uses the currently selected charmap to do the mapping.",
            "title": "FT_Get_Char_Index"
        },
        {
            "location": "/ft2-base_interface/#ft_get_first_char",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_ULong  )\n   FT_Get_First_Char (  FT_Face    face,\n                      FT_UInt   *agindex );  Return the first character code in the current charmap of a given face, together with its corresponding glyph index.",
            "title": "FT_Get_First_Char"
        },
        {
            "location": "/ft2-base_interface/#ft_get_next_char",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_ULong  )\n   FT_Get_Next_Char (  FT_Face     face,\n                     FT_ULong    char_code,\n                     FT_UInt    *agindex );  Return the next character code in the current charmap of a given face following the value \u2018char_code\u2019, as well as the corresponding glyph index.",
            "title": "FT_Get_Next_Char"
        },
        {
            "location": "/ft2-base_interface/#ft_get_name_index",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_UInt  )\n   FT_Get_Name_Index (  FT_Face      face,\n                      FT_String *  glyph_name );  Return the glyph index of a given glyph name.",
            "title": "FT_Get_Name_Index"
        },
        {
            "location": "/ft2-base_interface/#ft_load_char",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Load_Char (  FT_Face    face,\n                 FT_ULong   char_code,\n                 FT_Int32   load_flags );  Load a glyph into the glyph slot of a face object, accessed by its character code.",
            "title": "FT_Load_Char"
        },
        {
            "location": "/ft2-base_interface/#ft_load_target_mode",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_LOAD_TARGET_MODE ( x )  ( ( FT_Render_Mode )( ( (x) >> 16 ) & 15 ) )  Return the  FT_Render_Mode  corresponding to a given  FT_LOAD_TARGET_XXX  value.",
            "title": "FT_LOAD_TARGET_MODE"
        },
        {
            "location": "/ft2-base_interface/#ft_render_glyph",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Render_Glyph (  FT_GlyphSlot     slot,\n                    FT_Render_Mode   render_mode );  Convert a given glyph image to a bitmap. It does so by inspecting the glyph image format, finding the relevant renderer, and invoking it.",
            "title": "FT_Render_Glyph"
        },
        {
            "location": "/ft2-base_interface/#ft_render_mode",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   enum   FT_Render_Mode_\n  {\n     FT_RENDER_MODE_NORMAL  = 0,\n     FT_RENDER_MODE_LIGHT ,\n     FT_RENDER_MODE_MONO ,\n     FT_RENDER_MODE_LCD ,\n     FT_RENDER_MODE_LCD_V ,\n\n    FT_RENDER_MODE_MAX\n\n  }  FT_Render_Mode ;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* ` FT_Render_Mode ' values instead                       */\n#define ft_render_mode_normal   FT_RENDER_MODE_NORMAL \n#define ft_render_mode_mono     FT_RENDER_MODE_MONO   Render modes supported by FreeType\u00a02. Each mode corresponds to a specific type of scanline conversion performed on the outline.  For bitmap fonts and embedded bitmaps the \u2018bitmap->pixel_mode\u2019 field in the  FT_GlyphSlotRec  structure gives the format of the returned bitmap.  All modes except  FT_RENDER_MODE_MONO  use 256 levels of opacity, indicating pixel coverage. Use linear alpha blending and gamma correction to correctly render non-monochrome glyph bitmaps onto a surface; see  FT_Render_Glyph .",
            "title": "FT_Render_Mode"
        },
        {
            "location": "/ft2-base_interface/#ft_get_kerning",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Kerning (  FT_Face      face,\n                   FT_UInt      left_glyph,\n                   FT_UInt      right_glyph,\n                   FT_UInt      kern_mode,\n                   FT_Vector   *akerning );  Return the kerning vector between two glyphs of the same face.",
            "title": "FT_Get_Kerning"
        },
        {
            "location": "/ft2-base_interface/#ft_kerning_mode",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   enum   FT_Kerning_Mode_\n  {\n     FT_KERNING_DEFAULT  = 0,\n     FT_KERNING_UNFITTED ,\n     FT_KERNING_UNSCALED \n\n  }  FT_Kerning_Mode ;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* ` FT_Kerning_Mode ' values instead                      */\n#define ft_kerning_default    FT_KERNING_DEFAULT \n#define ft_kerning_unfitted   FT_KERNING_UNFITTED \n#define ft_kerning_unscaled   FT_KERNING_UNSCALED   An enumeration to specify the format of kerning values returned by  FT_Get_Kerning .",
            "title": "FT_Kerning_Mode"
        },
        {
            "location": "/ft2-base_interface/#ft_get_track_kerning",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Track_Kerning (  FT_Face     face,\n                         FT_Fixed    point_size,\n                         FT_Int      degree,\n                         FT_Fixed *  akerning );  Return the track kerning for a given face object at a given size.",
            "title": "FT_Get_Track_Kerning"
        },
        {
            "location": "/ft2-base_interface/#ft_get_glyph_name",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Glyph_Name (  FT_Face      face,\n                      FT_UInt      glyph_index,\n                      FT_Pointer   buffer,\n                      FT_UInt      buffer_max );  Retrieve the ASCII name of a given glyph in a face. This only works for those faces where  FT_HAS_GLYPH_NAMES (face) returns\u00a01.",
            "title": "FT_Get_Glyph_Name"
        },
        {
            "location": "/ft2-base_interface/#ft_get_postscript_name",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  const   char * )\n   FT_Get_Postscript_Name (  FT_Face   face );  Retrieve the ASCII PostScript name of a given face, if available. This only works with PostScript, TrueType, and OpenType fonts.",
            "title": "FT_Get_Postscript_Name"
        },
        {
            "location": "/ft2-base_interface/#ft_charmaprec",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct   FT_CharMapRec_\n  {\n     FT_Face       face;\n     FT_Encoding   encoding;\n     FT_UShort     platform_id;\n     FT_UShort     encoding_id;\n\n  }  FT_CharMapRec ;  The base charmap structure.",
            "title": "FT_CharMapRec"
        },
        {
            "location": "/ft2-base_interface/#ft_select_charmap",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Select_Charmap (  FT_Face       face,\n                      FT_Encoding   encoding );  Select a given charmap by its encoding tag (as listed in \u2018freetype.h\u2019).",
            "title": "FT_Select_Charmap"
        },
        {
            "location": "/ft2-base_interface/#ft_set_charmap",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Set_Charmap (  FT_Face      face,\n                   FT_CharMap   charmap );  Select a given charmap for character code to glyph index mapping.",
            "title": "FT_Set_Charmap"
        },
        {
            "location": "/ft2-base_interface/#ft_get_charmap_index",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Int  )\n   FT_Get_Charmap_Index (  FT_CharMap   charmap );  Retrieve index of a given charmap.",
            "title": "FT_Get_Charmap_Index"
        },
        {
            "location": "/ft2-base_interface/#ft_get_fstype_flags",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_UShort  )\n   FT_Get_FSType_Flags (  FT_Face   face );  Return the \u2018fsType\u2019 flags for a font.",
            "title": "FT_Get_FSType_Flags"
        },
        {
            "location": "/ft2-base_interface/#ft_get_subglyph_info",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Get_SubGlyph_Info (  FT_GlyphSlot   glyph,\n                         FT_UInt        sub_index,\n                         FT_Int        *p_index,\n                         FT_UInt       *p_flags,\n                         FT_Int        *p_arg1,\n                         FT_Int        *p_arg2,\n                         FT_Matrix     *p_transform );  Retrieve a description of a given subglyph. Only use it if \u2018glyph->format\u2019 is  FT_GLYPH_FORMAT_COMPOSITE ; an error is returned otherwise.",
            "title": "FT_Get_SubGlyph_Info"
        },
        {
            "location": "/ft2-base_interface/#ft_face_internal",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct  FT_Face_InternalRec_*   FT_Face_Internal ;  An opaque handle to an \u2018FT_Face_InternalRec\u2019 structure that models the private data of a given  FT_Face  object.  This structure might change between releases of FreeType\u00a02 and is not generally available to client applications.",
            "title": "FT_Face_Internal"
        },
        {
            "location": "/ft2-base_interface/#ft_size_internal",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct  FT_Size_InternalRec_*   FT_Size_Internal ;  An opaque handle to an \u2018FT_Size_InternalRec\u2019 structure, used to model private data of a given  FT_Size  object.",
            "title": "FT_Size_Internal"
        },
        {
            "location": "/ft2-base_interface/#ft_slot_internal",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct  FT_Slot_InternalRec_*   FT_Slot_Internal ;  An opaque handle to an \u2018FT_Slot_InternalRec\u2019 structure, used to model private data of a given  FT_GlyphSlot  object.",
            "title": "FT_Slot_Internal"
        },
        {
            "location": "/ft2-base_interface/#ft_face_flag_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_FACE_FLAG_SCALABLE           ( 1L <<  0 )\n#define  FT_FACE_FLAG_FIXED_SIZES        ( 1L <<  1 )\n#define  FT_FACE_FLAG_FIXED_WIDTH        ( 1L <<  2 )\n#define  FT_FACE_FLAG_SFNT               ( 1L <<  3 )\n#define  FT_FACE_FLAG_HORIZONTAL         ( 1L <<  4 )\n#define  FT_FACE_FLAG_VERTICAL           ( 1L <<  5 )\n#define  FT_FACE_FLAG_KERNING            ( 1L <<  6 )\n#define  FT_FACE_FLAG_FAST_GLYPHS        ( 1L <<  7 )\n#define  FT_FACE_FLAG_MULTIPLE_MASTERS   ( 1L <<  8 )\n#define  FT_FACE_FLAG_GLYPH_NAMES        ( 1L <<  9 )\n#define  FT_FACE_FLAG_EXTERNAL_STREAM    ( 1L << 10 )\n#define  FT_FACE_FLAG_HINTER             ( 1L << 11 )\n#define  FT_FACE_FLAG_CID_KEYED          ( 1L << 12 )\n#define  FT_FACE_FLAG_TRICKY             ( 1L << 13 )\n#define  FT_FACE_FLAG_COLOR              ( 1L << 14 )\n#define  FT_FACE_FLAG_VARIATION          ( 1L << 15 )  A list of bit flags used in the \u2018face_flags\u2019 field of the  FT_FaceRec  structure. They inform client applications of properties of the corresponding face.",
            "title": "FT_FACE_FLAG_XXX"
        },
        {
            "location": "/ft2-base_interface/#ft_style_flag_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_STYLE_FLAG_ITALIC   ( 1 << 0 )\n#define  FT_STYLE_FLAG_BOLD     ( 1 << 1 )  A list of bit flags to indicate the style of a given face. These are used in the \u2018style_flags\u2019 field of  FT_FaceRec .",
            "title": "FT_STYLE_FLAG_XXX"
        },
        {
            "location": "/ft2-base_interface/#ft_open_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_OPEN_MEMORY     0x1\n#define  FT_OPEN_STREAM     0x2\n#define  FT_OPEN_PATHNAME   0x4\n#define  FT_OPEN_DRIVER     0x8\n#define  FT_OPEN_PARAMS     0x10\n\n  /* these constants are deprecated; use the corresponding ` FT_OPEN_XXX ' */\n  /* values instead                                                      */\n#define ft_open_memory     FT_OPEN_MEMORY \n#define ft_open_stream     FT_OPEN_STREAM \n#define ft_open_pathname   FT_OPEN_PATHNAME \n#define ft_open_driver     FT_OPEN_DRIVER \n#define ft_open_params     FT_OPEN_PARAMS   A list of bit field constants used within the \u2018flags\u2019 field of the  FT_Open_Args  structure.",
            "title": "FT_OPEN_XXX"
        },
        {
            "location": "/ft2-base_interface/#ft_load_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_LOAD_DEFAULT                       0x0\n#define  FT_LOAD_NO_SCALE                      ( 1L << 0 )\n#define  FT_LOAD_NO_HINTING                    ( 1L << 1 )\n#define  FT_LOAD_RENDER                        ( 1L << 2 )\n#define  FT_LOAD_NO_BITMAP                     ( 1L << 3 )\n#define  FT_LOAD_VERTICAL_LAYOUT               ( 1L << 4 )\n#define  FT_LOAD_FORCE_AUTOHINT                ( 1L << 5 )\n#define  FT_LOAD_CROP_BITMAP                   ( 1L << 6 )\n#define  FT_LOAD_PEDANTIC                      ( 1L << 7 )\n#define  FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH   ( 1L << 9 )\n#define  FT_LOAD_NO_RECURSE                    ( 1L << 10 )\n#define  FT_LOAD_IGNORE_TRANSFORM              ( 1L << 11 )\n#define  FT_LOAD_MONOCHROME                    ( 1L << 12 )\n#define  FT_LOAD_LINEAR_DESIGN                 ( 1L << 13 )\n#define  FT_LOAD_NO_AUTOHINT                   ( 1L << 15 )\n  /* Bits 16-19 are used by `FT_LOAD_TARGET_' */\n#define  FT_LOAD_COLOR                         ( 1L << 20 )\n#define  FT_LOAD_COMPUTE_METRICS               ( 1L << 21 )\n#define  FT_LOAD_BITMAP_METRICS_ONLY           ( 1L << 22 )  A list of bit field constants for  FT_Load_Glyph  to indicate what kind of operations to perform during glyph loading.",
            "title": "FT_LOAD_XXX"
        },
        {
            "location": "/ft2-base_interface/#ft_load_target_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define FT_LOAD_TARGET_( x )   ( ( FT_Int32 )( (x) & 15 ) << 16 )\n\n#define  FT_LOAD_TARGET_NORMAL   FT_LOAD_TARGET_(  FT_RENDER_MODE_NORMAL  )\n#define  FT_LOAD_TARGET_LIGHT    FT_LOAD_TARGET_(  FT_RENDER_MODE_LIGHT   )\n#define  FT_LOAD_TARGET_MONO     FT_LOAD_TARGET_(  FT_RENDER_MODE_MONO    )\n#define  FT_LOAD_TARGET_LCD      FT_LOAD_TARGET_(  FT_RENDER_MODE_LCD     )\n#define  FT_LOAD_TARGET_LCD_V    FT_LOAD_TARGET_(  FT_RENDER_MODE_LCD_V   )  A list of values to select a specific hinting algorithm for the hinter. You should OR one of these values to your \u2018load_flags\u2019 when calling  FT_Load_Glyph .  Note that a font's native hinters may ignore the hinting algorithm you have specified (e.g., the TrueType bytecode interpreter). You can set  FT_LOAD_FORCE_AUTOHINT  to ensure that the auto-hinter is used.",
            "title": "FT_LOAD_TARGET_XXX"
        },
        {
            "location": "/ft2-base_interface/#ft_subglyph_flag_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS           1\n#define  FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES       2\n#define  FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID         4\n#define  FT_SUBGLYPH_FLAG_SCALE                    8\n#define  FT_SUBGLYPH_FLAG_XY_SCALE              0x40\n#define  FT_SUBGLYPH_FLAG_2X2                   0x80\n#define  FT_SUBGLYPH_FLAG_USE_MY_METRICS       0x200  A list of constants describing subglyphs. Please refer to the \u2018glyf\u2019 table description in the OpenType specification for the meaning of the various flags (which get synthesized for non-OpenType subglyphs).",
            "title": "FT_SUBGLYPH_FLAG_XXX"
        },
        {
            "location": "/ft2-base_interface/#ft_fstype_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_FSTYPE_INSTALLABLE_EMBEDDING          0x0000\n#define  FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING   0x0002\n#define  FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING    0x0004\n#define  FT_FSTYPE_EDITABLE_EMBEDDING             0x0008\n#define  FT_FSTYPE_NO_SUBSETTING                  0x0100\n#define  FT_FSTYPE_BITMAP_EMBEDDING_ONLY          0x0200  A list of bit flags used in the \u2018fsType\u2019 field of the OS/2 table in a TrueType or OpenType font and the \u2018FSType\u2019 entry in a PostScript font. These bit flags are returned by  FT_Get_FSType_Flags ; they inform client applications of embedding and subsetting restrictions associated with a font.  See  https://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/FontPolicies.pdf  for more details.",
            "title": "FT_FSTYPE_XXX"
        },
        {
            "location": "/ft2-base_interface/#ft_has_fast_glyphs",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n#define  FT_HAS_FAST_GLYPHS ( face )  0  Deprecated.",
            "title": "FT_HAS_FAST_GLYPHS"
        },
        {
            "location": "/ft2-base_interface/#ft_glyph_layer",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct  FT_Glyph_LayerRec_*   FT_Glyph_Layer ;  A handle to an  FT_Glyph_LayerRec  structure to model a given colored glyph layer.",
            "title": "FT_Glyph_Layer"
        },
        {
            "location": "/ft2-base_interface/#ft_glyph_layerrec",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n   typedef   struct   FT_Glyph_LayerRec_\n  {\n     FT_UShort   glyph_index;\n     FT_UShort   color_index;\n\n  }  FT_Glyph_LayerRec ;  This structure models a given colored glyph layer as defined in the OpenType \u2018COLR\u2019 table. It is used by  FT_Get_GlyphLayers .",
            "title": "FT_Glyph_LayerRec"
        },
        {
            "location": "/ft2-base_interface/#ft_get_glyphlayers",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Get_GlyphLayers (  FT_GlyphSlot      glyph,\n                       FT_UShort        *anum_layers,\n                       FT_Glyph_Layer   *alayers );  This is an interface to the \u2018COLR\u2019 table in OpenType fonts to retrieve the colored glyph layers array associated with the current glyph slot.  https://docs.microsoft.com/en-us/typography/opentype/spec/colr  The glyph layer data for a given glyph slot, if present, provides an alternative, multi-colour glyph representation: Instead of rendering the outline or bitmap in the glyph slot, glyphs with the indices and colors returned in the  FT_Glyph_Layer  array are rendered layer by layer.",
            "title": "FT_Get_GlyphLayers"
        },
        {
            "location": "/ft2-glyph_variants/",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Unicode Variation Sequences\n\n\n\n\nUnicode Variation Sequences\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nMany characters, especially for CJK scripts, have variant forms. They are a sort of grey area somewhere between being totally irrelevant and semantically distinct; for this reason, the Unicode consortium decided to introduce Variation Sequences (VS), consisting of a Unicode base character and a variation selector instead of further extending the already huge number of characters.\n\n\nUnicode maintains two different sets, namely \u2018Standardized Variation Sequences\u2019 and registered \u2018Ideographic Variation Sequences\u2019 (IVS), collected in the \u2018Ideographic Variation Database\u2019 (IVD).\n\n\nhttps://unicode.org/Public/UCD/latest/ucd/StandardizedVariants.txt\n \nhttps://unicode.org/reports/tr37/\n \nhttps://unicode.org/ivd/\n\n\nTo date (January 2017), the character with the most ideographic variations is U+9089, having 32 such IVS.\n\n\nThree Mongolian Variation Selectors have the values U+180B-U+180D; 256 generic Variation Selectors are encoded in the ranges U+FE00-U+FE0F and U+E0100-U+E01EF. IVS currently use Variation Selectors from the range U+E0100-U+E01EF only.\n\n\nA VS consists of the base character value followed by a single Variation Selector. For example, to get the first variation of U+9089, you have to write the character sequence \u2018U+9089 U+E0100\u2019.\n\n\nAdobe and MS decided to support both standardized and ideographic VS with a new cmap subtable (format\u00a014). It is an odd subtable because it is not a mapping of input code points to glyphs, but contains lists of all variations supported by the font.\n\n\nA variation may be either \u2018default\u2019 or \u2018non-default\u2019 for a given font. A default variation is the one you will get for that code point if you look it up in the standard Unicode cmap. A non-default variation is a different glyph.\n\n\nFT_Face_GetCharVariantIndex\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_UInt\n )\n  \nFT_Face_GetCharVariantIndex\n( \nFT_Face\n   face,\n                               \nFT_ULong\n  charcode,\n                               \nFT_ULong\n  variantSelector );\n\n\n\n\nReturn the glyph index of a given character code as modified by the variation selector.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\ncharcode\n\n\nThe character code point in Unicode.\n\n\n\nvariantSelector\n\n\nThe Unicode code point of the variation selector.\n\n\n\n\n\n\nreturn\n\n\n\nThe glyph index. 0\u00a0means either \u2018undefined character code\u2019, or \u2018undefined selector code\u2019, or \u2018no variation selector cmap subtable\u2019, or \u2018current CharMap is not Unicode\u2019.\n\n\nnote\n\n\n\nIf you use FreeType to manipulate the contents of font files directly, be aware that the glyph index returned by this function doesn't always correspond to the internal indices used within the file. This is done to ensure that value\u00a00 always corresponds to the \u2018missing glyph\u2019.\n\n\nThis function is only meaningful if a) the font has a variation selector cmap sub table, and b) the current charmap has a Unicode encoding.\n\n\nsince\n\n\n\n2.3.6\n\n\n\n\n\nFT_Face_GetCharVariantIsDefault\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_Int\n )\n  \nFT_Face_GetCharVariantIsDefault\n( \nFT_Face\n   face,\n                                   \nFT_ULong\n  charcode,\n                                   \nFT_ULong\n  variantSelector );\n\n\n\n\nCheck whether this variation of this Unicode character is the one to be found in the \u2018cmap\u2019.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\ncharcode\n\n\nThe character codepoint in Unicode.\n\n\n\nvariantSelector\n\n\nThe Unicode codepoint of the variation selector.\n\n\n\n\n\n\nreturn\n\n\n\n1\u00a0if found in the standard (Unicode) cmap, 0\u00a0if found in the variation selector cmap, or -1 if it is not a variation.\n\n\nnote\n\n\n\nThis function is only meaningful if the font has a variation selector cmap subtable.\n\n\nsince\n\n\n\n2.3.6\n\n\n\n\n\nFT_Face_GetVariantSelectors\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_UInt32\n* )\n  \nFT_Face_GetVariantSelectors\n( \nFT_Face\n  face );\n\n\n\n\nReturn a zero-terminated list of Unicode variation selectors found in the font.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\nreturn\n\n\n\nA pointer to an array of selector code points, or NULL if there is no valid variation selector cmap subtable.\n\n\nnote\n\n\n\nThe last item in the array is\u00a00; the array is owned by the \nFT_Face\n object but can be overwritten or released on the next call to a FreeType function.\n\n\nsince\n\n\n\n2.3.6\n\n\n\n\n\nFT_Face_GetVariantsOfChar\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_UInt32\n* )\n  \nFT_Face_GetVariantsOfChar\n( \nFT_Face\n   face,\n                             \nFT_ULong\n  charcode );\n\n\n\n\nReturn a zero-terminated list of Unicode variation selectors found for the specified character code.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\ncharcode\n\n\nThe character codepoint in Unicode.\n\n\n\n\n\n\nreturn\n\n\n\nA pointer to an array of variation selector code points that are active for the given character, or NULL if the corresponding list is empty.\n\n\nnote\n\n\n\nThe last item in the array is\u00a00; the array is owned by the \nFT_Face\n object but can be overwritten or released on the next call to a FreeType function.\n\n\nsince\n\n\n\n2.3.6\n\n\n\n\n\nFT_Face_GetCharsOfVariant\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n  FT_EXPORT( \nFT_UInt32\n* )\n  \nFT_Face_GetCharsOfVariant\n( \nFT_Face\n   face,\n                             \nFT_ULong\n  variantSelector );\n\n\n\n\nReturn a zero-terminated list of Unicode character codes found for the specified variation selector.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\nvariantSelector\n\n\nThe variation selector code point in Unicode.\n\n\n\n\n\n\nreturn\n\n\n\nA list of all the code points that are specified by this selector (both default and non-default codes are returned) or NULL if there is no valid cmap or the variation selector is invalid.\n\n\nnote\n\n\n\nThe last item in the array is\u00a00; the array is owned by the \nFT_Face\n object but can be overwritten or released on the next call to a FreeType function.\n\n\nsince\n\n\n\n2.3.6",
            "title": "Unicode Variation Sequences"
        },
        {
            "location": "/ft2-glyph_variants/#unicode-variation-sequences",
            "text": "",
            "title": "Unicode Variation Sequences"
        },
        {
            "location": "/ft2-glyph_variants/#synopsis",
            "text": "Many characters, especially for CJK scripts, have variant forms. They are a sort of grey area somewhere between being totally irrelevant and semantically distinct; for this reason, the Unicode consortium decided to introduce Variation Sequences (VS), consisting of a Unicode base character and a variation selector instead of further extending the already huge number of characters.  Unicode maintains two different sets, namely \u2018Standardized Variation Sequences\u2019 and registered \u2018Ideographic Variation Sequences\u2019 (IVS), collected in the \u2018Ideographic Variation Database\u2019 (IVD).  https://unicode.org/Public/UCD/latest/ucd/StandardizedVariants.txt   https://unicode.org/reports/tr37/   https://unicode.org/ivd/  To date (January 2017), the character with the most ideographic variations is U+9089, having 32 such IVS.  Three Mongolian Variation Selectors have the values U+180B-U+180D; 256 generic Variation Selectors are encoded in the ranges U+FE00-U+FE0F and U+E0100-U+E01EF. IVS currently use Variation Selectors from the range U+E0100-U+E01EF only.  A VS consists of the base character value followed by a single Variation Selector. For example, to get the first variation of U+9089, you have to write the character sequence \u2018U+9089 U+E0100\u2019.  Adobe and MS decided to support both standardized and ideographic VS with a new cmap subtable (format\u00a014). It is an odd subtable because it is not a mapping of input code points to glyphs, but contains lists of all variations supported by the font.  A variation may be either \u2018default\u2019 or \u2018non-default\u2019 for a given font. A default variation is the one you will get for that code point if you look it up in the standard Unicode cmap. A non-default variation is a different glyph.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-glyph_variants/#ft_face_getcharvariantindex",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_UInt  )\n   FT_Face_GetCharVariantIndex (  FT_Face    face,\n                                FT_ULong   charcode,\n                                FT_ULong   variantSelector );  Return the glyph index of a given character code as modified by the variation selector.",
            "title": "FT_Face_GetCharVariantIndex"
        },
        {
            "location": "/ft2-glyph_variants/#ft_face_getcharvariantisdefault",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_Int  )\n   FT_Face_GetCharVariantIsDefault (  FT_Face    face,\n                                    FT_ULong   charcode,\n                                    FT_ULong   variantSelector );  Check whether this variation of this Unicode character is the one to be found in the \u2018cmap\u2019.",
            "title": "FT_Face_GetCharVariantIsDefault"
        },
        {
            "location": "/ft2-glyph_variants/#ft_face_getvariantselectors",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_UInt32 * )\n   FT_Face_GetVariantSelectors (  FT_Face   face );  Return a zero-terminated list of Unicode variation selectors found in the font.",
            "title": "FT_Face_GetVariantSelectors"
        },
        {
            "location": "/ft2-glyph_variants/#ft_face_getvariantsofchar",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_UInt32 * )\n   FT_Face_GetVariantsOfChar (  FT_Face    face,\n                              FT_ULong   charcode );  Return a zero-terminated list of Unicode variation selectors found for the specified character code.",
            "title": "FT_Face_GetVariantsOfChar"
        },
        {
            "location": "/ft2-glyph_variants/#ft_face_getcharsofvariant",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).  \n  FT_EXPORT(  FT_UInt32 * )\n   FT_Face_GetCharsOfVariant (  FT_Face    face,\n                              FT_ULong   variantSelector );  Return a zero-terminated list of Unicode character codes found for the specified variation selector.",
            "title": "FT_Face_GetCharsOfVariant"
        },
        {
            "location": "/ft2-glyph_management/",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Glyph Management\n\n\n\n\nGlyph Management\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains definitions used to manage glyph data through generic FT_Glyph objects. Each of them can contain a bitmap, a vector outline, or even images in other formats.\n\n\nFT_Glyph\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_GlyphRec_*  \nFT_Glyph\n;\n\n\n\n\nHandle to an object used to model generic glyph images. It is a pointer to the \nFT_GlyphRec\n structure and can contain a glyph bitmap or pointer.\n\n\nnote\n\n\n\nGlyph objects are not owned by the library. You must thus release them manually (through \nFT_Done_Glyph\n) \nbefore\n calling \nFT_Done_FreeType\n.\n\n\n\n\n\nFT_GlyphRec\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_GlyphRec_\n  {\n    \nFT_Library\n             library;\n    \nconst\n FT_Glyph_Class*  clazz;\n    \nFT_Glyph_Format\n        format;\n    \nFT_Vector\n              advance;\n\n  } \nFT_GlyphRec\n;\n\n\n\n\nThe root glyph structure contains a given glyph image plus its advance width in 16.16 fixed-point format.\n\n\nfields\n\n\n\n\n\nlibrary\n\n\nA handle to the FreeType library object.\n\n\n\nclazz\n\n\nA pointer to the glyph's class. Private.\n\n\n\nformat\n\n\nThe format of the glyph's image.\n\n\n\nadvance\n\n\nA 16.16 vector that gives the glyph's advance width.\n\n\n\n\n\n\n\n\n\nFT_BitmapGlyph\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_BitmapGlyphRec_*  \nFT_BitmapGlyph\n;\n\n\n\n\nA handle to an object used to model a bitmap glyph image. This is a sub-class of \nFT_Glyph\n, and a pointer to \nFT_BitmapGlyphRec\n.\n\n\n\n\n\nFT_BitmapGlyphRec\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_BitmapGlyphRec_\n  {\n    \nFT_GlyphRec\n  root;\n    \nFT_Int\n       left;\n    \nFT_Int\n       top;\n    \nFT_Bitmap\n    bitmap;\n\n  } \nFT_BitmapGlyphRec\n;\n\n\n\n\nA structure used for bitmap glyph images. This really is a \u2018sub-class\u2019 of \nFT_GlyphRec\n.\n\n\nfields\n\n\n\n\n\nroot\n\n\nThe root \nFT_Glyph\n fields.\n\n\n\nleft\n\n\nThe left-side bearing, i.e., the horizontal distance from the current pen position to the left border of the glyph bitmap.\n\n\n\ntop\n\n\nThe top-side bearing, i.e., the vertical distance from the current pen position to the top border of the glyph bitmap. This distance is positive for upwards\u00a0y!\n\n\n\nbitmap\n\n\nA descriptor for the bitmap.\n\n\n\n\n\n\nnote\n\n\n\nYou can typecast an \nFT_Glyph\n to \nFT_BitmapGlyph\n if you have \u2018glyph->format == FT_GLYPH_FORMAT_BITMAP\u2019. This lets you access the bitmap's contents easily.\n\n\nThe corresponding pixel buffer is always owned by \nFT_BitmapGlyph\n and is thus created and destroyed with it.\n\n\n\n\n\nFT_OutlineGlyph\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  \ntypedef\n \nstruct\n FT_OutlineGlyphRec_*  \nFT_OutlineGlyph\n;\n\n\n\n\nA handle to an object used to model an outline glyph image. This is a sub-class of \nFT_Glyph\n, and a pointer to \nFT_OutlineGlyphRec\n.\n\n\n\n\n\nFT_OutlineGlyphRec\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  \ntypedef\n \nstruct\n  FT_OutlineGlyphRec_\n  {\n    \nFT_GlyphRec\n  root;\n    \nFT_Outline\n   outline;\n\n  } \nFT_OutlineGlyphRec\n;\n\n\n\n\nA structure used for outline (vectorial) glyph images. This really is a \u2018sub-class\u2019 of \nFT_GlyphRec\n.\n\n\nfields\n\n\n\n\n\nroot\n\n\nThe root \nFT_Glyph\n fields.\n\n\n\noutline\n\n\nA descriptor for the outline.\n\n\n\n\n\n\nnote\n\n\n\nYou can typecast an \nFT_Glyph\n to \nFT_OutlineGlyph\n if you have \u2018glyph->format == FT_GLYPH_FORMAT_OUTLINE\u2019. This lets you access the outline's content easily.\n\n\nAs the outline is extracted from a glyph slot, its coordinates are expressed normally in 26.6 pixels, unless the flag \nFT_LOAD_NO_SCALE\n was used in \nFT_Load_Glyph\n() or \nFT_Load_Char\n().\n\n\nThe outline's tables are always owned by the object and are destroyed with it.\n\n\n\n\n\nFT_Get_Glyph\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Glyph\n( \nFT_GlyphSlot\n  slot,\n                \nFT_Glyph\n     *aglyph );\n\n\n\n\nA function used to extract a glyph image from a slot. Note that the created \nFT_Glyph\n object must be released with \nFT_Done_Glyph\n.\n\n\ninput\n\n\n\n\n\nslot\n\n\nA handle to the source glyph slot.\n\n\n\n\n\n\noutput\n\n\n\n\n\naglyph\n\n\nA handle to the glyph object.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nBecause \u2018\naglyph->advance.x\u2019 and '\naglyph->advance.y' are 16.16 fixed-point numbers, \u2018slot->advance.x\u2019 and \u2018slot->advance.y\u2019 (which are in 26.6 fixed-point format) must be in the range ]-32768;32768[.\n\n\n\n\n\nFT_Glyph_Copy\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Glyph_Copy\n( \nFT_Glyph\n   source,\n                 \nFT_Glyph\n  *target );\n\n\n\n\nA function used to copy a glyph image. Note that the created \nFT_Glyph\n object must be released with \nFT_Done_Glyph\n.\n\n\ninput\n\n\n\n\n\nsource\n\n\nA handle to the source glyph object.\n\n\n\n\n\n\noutput\n\n\n\n\n\ntarget\n\n\nA handle to the target glyph object. 0\u00a0in case of error.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Glyph_Transform\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Glyph_Transform\n( \nFT_Glyph\n    glyph,\n                      \nFT_Matrix\n*  matrix,\n                      \nFT_Vector\n*  delta );\n\n\n\n\nTransform a glyph image if its format is scalable.\n\n\ninout\n\n\n\n\n\nglyph\n\n\nA handle to the target glyph object.\n\n\n\n\n\n\ninput\n\n\n\n\n\nmatrix\n\n\nA pointer to a 2x2 matrix to apply.\n\n\n\ndelta\n\n\nA pointer to a 2d vector to apply. Coordinates are expressed in 1/64th of a pixel.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code (if not 0, the glyph format is not scalable).\n\n\nnote\n\n\n\nThe 2x2 transformation matrix is also applied to the glyph's advance vector.\n\n\n\n\n\nFT_Glyph_BBox_Mode\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  \ntypedef\n \nenum\n  FT_Glyph_BBox_Mode_\n  {\n    \nFT_GLYPH_BBOX_UNSCALED\n  = 0,\n    \nFT_GLYPH_BBOX_SUBPIXELS\n = 0,\n    \nFT_GLYPH_BBOX_GRIDFIT\n   = 1,\n    \nFT_GLYPH_BBOX_TRUNCATE\n  = 2,\n    \nFT_GLYPH_BBOX_PIXELS\n    = 3\n\n  } \nFT_Glyph_BBox_Mode\n;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `\nFT_Glyph_BBox_Mode\n' values instead                   */\n#define ft_glyph_bbox_unscaled   \nFT_GLYPH_BBOX_UNSCALED\n\n#define ft_glyph_bbox_subpixels  \nFT_GLYPH_BBOX_SUBPIXELS\n\n#define ft_glyph_bbox_gridfit    \nFT_GLYPH_BBOX_GRIDFIT\n\n#define ft_glyph_bbox_truncate   \nFT_GLYPH_BBOX_TRUNCATE\n\n#define ft_glyph_bbox_pixels     \nFT_GLYPH_BBOX_PIXELS\n\n\n\n\n\nThe mode how the values of \nFT_Glyph_Get_CBox\n are returned.\n\n\nvalues\n\n\n\n\n\nFT_GLYPH_BBOX_UNSCALED\n\n\nReturn unscaled font units.\n\n\n\nFT_GLYPH_BBOX_SUBPIXELS\n\n\nReturn unfitted 26.6 coordinates.\n\n\n\nFT_GLYPH_BBOX_GRIDFIT\n\n\nReturn grid-fitted 26.6 coordinates.\n\n\n\nFT_GLYPH_BBOX_TRUNCATE\n\n\nReturn coordinates in integer pixels.\n\n\n\nFT_GLYPH_BBOX_PIXELS\n\n\nReturn grid-fitted pixel coordinates.\n\n\n\n\n\n\n\n\n\nFT_Glyph_Get_CBox\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Glyph_Get_CBox\n( \nFT_Glyph\n  glyph,\n                     \nFT_UInt\n   bbox_mode,\n                     \nFT_BBox\n  *acbox );\n\n\n\n\nReturn a glyph's \u2018control box\u2019. The control box encloses all the outline's points, including Bezier control points. Though it coincides with the exact bounding box for most glyphs, it can be slightly larger in some situations (like when rotating an outline that contains Bezier outside arcs).\n\n\nComputing the control box is very fast, while getting the bounding box can take much more time as it needs to walk over all segments and arcs in the outline. To get the latter, you can use the \u2018ftbbox\u2019 component, which is dedicated to this single task.\n\n\ninput\n\n\n\n\n\nglyph\n\n\nA handle to the source glyph object.\n\n\n\nmode\n\n\nThe mode that indicates how to interpret the returned bounding box values.\n\n\n\n\n\n\noutput\n\n\n\n\n\nacbox\n\n\nThe glyph coordinate bounding box. Coordinates are expressed in 1/64th of pixels if it is grid-fitted.\n\n\n\n\n\n\nnote\n\n\n\nCoordinates are relative to the glyph origin, using the y\u00a0upwards convention.\n\n\nIf the glyph has been loaded with \nFT_LOAD_NO_SCALE\n, \u2018bbox_mode\u2019 must be set to \nFT_GLYPH_BBOX_UNSCALED\n to get unscaled font units in 26.6 pixel format. The value \nFT_GLYPH_BBOX_SUBPIXELS\n is another name for this constant.\n\n\nIf the font is tricky and the glyph has been loaded with \nFT_LOAD_NO_SCALE\n, the resulting CBox is meaningless. To get reasonable values for the CBox it is necessary to load the glyph at a large ppem value (so that the hinting instructions can properly shift and scale the subglyphs), then extracting the CBox, which can be eventually converted back to font units.\n\n\nNote that the maximum coordinates are exclusive, which means that one can compute the width and height of the glyph image (be it in integer or 26.6 pixels) as:\n\n  width  = bbox.xMax - bbox.xMin;\n  height = bbox.yMax - bbox.yMin;\n\n\n\nNote also that for 26.6 coordinates, if \u2018bbox_mode\u2019 is set to \nFT_GLYPH_BBOX_GRIDFIT\n, the coordinates will also be grid-fitted, which corresponds to:\n\n  bbox.xMin = FLOOR(bbox.xMin);\n  bbox.yMin = FLOOR(bbox.yMin);\n  bbox.xMax = CEILING(bbox.xMax);\n  bbox.yMax = CEILING(bbox.yMax);\n\n\n\nTo get the bbox in pixel coordinates, set \u2018bbox_mode\u2019 to \nFT_GLYPH_BBOX_TRUNCATE\n.\n\n\nTo get the bbox in grid-fitted pixel coordinates, set \u2018bbox_mode\u2019 to \nFT_GLYPH_BBOX_PIXELS\n.\n\n\n\n\n\nFT_Glyph_To_Bitmap\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Glyph_To_Bitmap\n( \nFT_Glyph\n*       the_glyph,\n                      \nFT_Render_Mode\n  render_mode,\n                      \nFT_Vector\n*      origin,\n                      \nFT_Bool\n         destroy );\n\n\n\n\nConvert a given glyph object to a bitmap glyph object.\n\n\ninout\n\n\n\n\n\nthe_glyph\n\n\nA pointer to a handle to the target glyph.\n\n\n\n\n\n\ninput\n\n\n\n\n\nrender_mode\n\n\nAn enumeration that describes how the data is rendered.\n\n\n\norigin\n\n\nA pointer to a vector used to translate the glyph image before rendering. Can be\u00a00 (if no translation). The origin is expressed in 26.6 pixels.\n\n\n\ndestroy\n\n\nA boolean that indicates that the original glyph image should be destroyed by this function. It is never destroyed in case of error.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function does nothing if the glyph format isn't scalable.\n\n\nThe glyph image is translated with the \u2018origin\u2019 vector before rendering.\n\n\nThe first parameter is a pointer to an \nFT_Glyph\n handle, that will be \nreplaced\n by this function (with newly allocated data). Typically, you would use (omitting error handling):\n\n\n  FT_Glyph        glyph;\n  FT_BitmapGlyph  glyph_bitmap;\n\n\n  // load glyph\n  error = FT_Load_Char( face, glyph_index, FT_LOAD_DEFAULT );\n\n  // extract glyph image\n  error = FT_Get_Glyph( face->glyph, &glyph );\n\n  // convert to a bitmap (default render mode + destroying old)\n  if ( glyph->format != FT_GLYPH_FORMAT_BITMAP )\n  {\n    error = FT_Glyph_To_Bitmap( &glyph, FT_RENDER_MODE_NORMAL,\n                                0, 1 );\n    if ( error ) // `glyph' unchanged\n      ...\n  }\n\n  // access bitmap content by typecasting\n  glyph_bitmap = (FT_BitmapGlyph)glyph;\n\n  // do funny stuff with it, like blitting/drawing\n  ...\n\n  // discard glyph image (bitmap or not)\n  FT_Done_Glyph( glyph );\n\n\n\n\nHere another example, again without error handling:\n\n\n  FT_Glyph  glyphs[MAX_GLYPHS]\n\n\n  ...\n\n  for ( idx = 0; i < MAX_GLYPHS; i++ )\n    error = FT_Load_Glyph( face, idx, FT_LOAD_DEFAULT ) ||\n            FT_Get_Glyph ( face->glyph, &glyphs[idx] );\n\n  ...\n\n  for ( idx = 0; i < MAX_GLYPHS; i++ )\n  {\n    FT_Glyph  bitmap = glyphs[idx];\n\n\n    ...\n\n    // after this call, `bitmap' no longer points into\n    // the `glyphs' array (and the old value isn't destroyed)\n    FT_Glyph_To_Bitmap( &bitmap, FT_RENDER_MODE_MONO, 0, 0 );\n\n    ...\n\n    FT_Done_Glyph( bitmap );\n  }\n\n  ...\n\n  for ( idx = 0; i < MAX_GLYPHS; i++ )\n    FT_Done_Glyph( glyphs[idx] );\n\n\n\n\n\n\n\nFT_Done_Glyph\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Done_Glyph\n( \nFT_Glyph\n  glyph );\n\n\n\n\nDestroy a given glyph.\n\n\ninput\n\n\n\n\n\nglyph\n\n\nA handle to the target glyph object.",
            "title": "Glyph Management"
        },
        {
            "location": "/ft2-glyph_management/#glyph-management",
            "text": "",
            "title": "Glyph Management"
        },
        {
            "location": "/ft2-glyph_management/#synopsis",
            "text": "This section contains definitions used to manage glyph data through generic FT_Glyph objects. Each of them can contain a bitmap, a vector outline, or even images in other formats.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-glyph_management/#ft_glyph",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n   typedef   struct  FT_GlyphRec_*   FT_Glyph ;  Handle to an object used to model generic glyph images. It is a pointer to the  FT_GlyphRec  structure and can contain a glyph bitmap or pointer.",
            "title": "FT_Glyph"
        },
        {
            "location": "/ft2-glyph_management/#ft_glyphrec",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n   typedef   struct   FT_GlyphRec_\n  {\n     FT_Library              library;\n     const  FT_Glyph_Class*  clazz;\n     FT_Glyph_Format         format;\n     FT_Vector               advance;\n\n  }  FT_GlyphRec ;  The root glyph structure contains a given glyph image plus its advance width in 16.16 fixed-point format.",
            "title": "FT_GlyphRec"
        },
        {
            "location": "/ft2-glyph_management/#ft_bitmapglyph",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n   typedef   struct  FT_BitmapGlyphRec_*   FT_BitmapGlyph ;  A handle to an object used to model a bitmap glyph image. This is a sub-class of  FT_Glyph , and a pointer to  FT_BitmapGlyphRec .",
            "title": "FT_BitmapGlyph"
        },
        {
            "location": "/ft2-glyph_management/#ft_bitmapglyphrec",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n   typedef   struct   FT_BitmapGlyphRec_\n  {\n     FT_GlyphRec   root;\n     FT_Int        left;\n     FT_Int        top;\n     FT_Bitmap     bitmap;\n\n  }  FT_BitmapGlyphRec ;  A structure used for bitmap glyph images. This really is a \u2018sub-class\u2019 of  FT_GlyphRec .",
            "title": "FT_BitmapGlyphRec"
        },
        {
            "location": "/ft2-glyph_management/#ft_outlineglyph",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n   typedef   struct  FT_OutlineGlyphRec_*   FT_OutlineGlyph ;  A handle to an object used to model an outline glyph image. This is a sub-class of  FT_Glyph , and a pointer to  FT_OutlineGlyphRec .",
            "title": "FT_OutlineGlyph"
        },
        {
            "location": "/ft2-glyph_management/#ft_outlineglyphrec",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n   typedef   struct   FT_OutlineGlyphRec_\n  {\n     FT_GlyphRec   root;\n     FT_Outline    outline;\n\n  }  FT_OutlineGlyphRec ;  A structure used for outline (vectorial) glyph images. This really is a \u2018sub-class\u2019 of  FT_GlyphRec .",
            "title": "FT_OutlineGlyphRec"
        },
        {
            "location": "/ft2-glyph_management/#ft_get_glyph",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Glyph (  FT_GlyphSlot   slot,\n                 FT_Glyph      *aglyph );  A function used to extract a glyph image from a slot. Note that the created  FT_Glyph  object must be released with  FT_Done_Glyph .",
            "title": "FT_Get_Glyph"
        },
        {
            "location": "/ft2-glyph_management/#ft_glyph_copy",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Glyph_Copy (  FT_Glyph    source,\n                  FT_Glyph   *target );  A function used to copy a glyph image. Note that the created  FT_Glyph  object must be released with  FT_Done_Glyph .",
            "title": "FT_Glyph_Copy"
        },
        {
            "location": "/ft2-glyph_management/#ft_glyph_transform",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Glyph_Transform (  FT_Glyph     glyph,\n                       FT_Matrix *  matrix,\n                       FT_Vector *  delta );  Transform a glyph image if its format is scalable.",
            "title": "FT_Glyph_Transform"
        },
        {
            "location": "/ft2-glyph_management/#ft_glyph_bbox_mode",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n   typedef   enum   FT_Glyph_BBox_Mode_\n  {\n     FT_GLYPH_BBOX_UNSCALED   = 0,\n     FT_GLYPH_BBOX_SUBPIXELS  = 0,\n     FT_GLYPH_BBOX_GRIDFIT    = 1,\n     FT_GLYPH_BBOX_TRUNCATE   = 2,\n     FT_GLYPH_BBOX_PIXELS     = 3\n\n  }  FT_Glyph_BBox_Mode ;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* ` FT_Glyph_BBox_Mode ' values instead                   */\n#define ft_glyph_bbox_unscaled    FT_GLYPH_BBOX_UNSCALED \n#define ft_glyph_bbox_subpixels   FT_GLYPH_BBOX_SUBPIXELS \n#define ft_glyph_bbox_gridfit     FT_GLYPH_BBOX_GRIDFIT \n#define ft_glyph_bbox_truncate    FT_GLYPH_BBOX_TRUNCATE \n#define ft_glyph_bbox_pixels      FT_GLYPH_BBOX_PIXELS   The mode how the values of  FT_Glyph_Get_CBox  are returned.",
            "title": "FT_Glyph_BBox_Mode"
        },
        {
            "location": "/ft2-glyph_management/#ft_glyph_get_cbox",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n  FT_EXPORT(  void  )\n   FT_Glyph_Get_CBox (  FT_Glyph   glyph,\n                      FT_UInt    bbox_mode,\n                      FT_BBox   *acbox );  Return a glyph's \u2018control box\u2019. The control box encloses all the outline's points, including Bezier control points. Though it coincides with the exact bounding box for most glyphs, it can be slightly larger in some situations (like when rotating an outline that contains Bezier outside arcs).  Computing the control box is very fast, while getting the bounding box can take much more time as it needs to walk over all segments and arcs in the outline. To get the latter, you can use the \u2018ftbbox\u2019 component, which is dedicated to this single task.",
            "title": "FT_Glyph_Get_CBox"
        },
        {
            "location": "/ft2-glyph_management/#ft_glyph_to_bitmap",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Glyph_To_Bitmap (  FT_Glyph *       the_glyph,\n                       FT_Render_Mode   render_mode,\n                       FT_Vector *      origin,\n                       FT_Bool          destroy );  Convert a given glyph object to a bitmap glyph object.",
            "title": "FT_Glyph_To_Bitmap"
        },
        {
            "location": "/ft2-glyph_management/#ft_done_glyph",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).  \n  FT_EXPORT(  void  )\n   FT_Done_Glyph (  FT_Glyph   glyph );  Destroy a given glyph.",
            "title": "FT_Done_Glyph"
        },
        {
            "location": "/ft2-mac_specific/",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Mac Specific Interface\n\n\n\n\nMac Specific Interface\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe following definitions are only available if FreeType is compiled on a Macintosh.\n\n\nFT_New_Face_From_FOND\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Face_From_FOND\n( \nFT_Library\n  library,\n                         Handle      fond,\n                         \nFT_Long\n     face_index,\n                         \nFT_Face\n    *aface )\n                       FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\nCreate a new face object from a FOND resource.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\ninput\n\n\n\n\n\nfond\n\n\nA FOND resource.\n\n\n\nface_index\n\n\nOnly supported for the -1 \u2018sanity check\u2019 special case.\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnotes\n\n\n\nThis function can be used to create \nFT_Face\n objects from fonts that are installed in the system as follows.\n\n  fond = GetResource( 'FOND', fontName );\n  error = FT_New_Face_From_FOND( library, fond, 0, &face );\n\n\n\n\n\n\nFT_GetFile_From_Mac_Name\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_GetFile_From_Mac_Name\n( \nconst\n \nchar\n*  fontName,\n                            FSSpec*      pathSpec,\n                            \nFT_Long\n*     face_index )\n                          FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\nReturn an FSSpec for the disk file containing the named font.\n\n\ninput\n\n\n\n\n\nfontName\n\n\nMac OS name of the font (e.g., Times New Roman Bold).\n\n\n\n\n\n\noutput\n\n\n\n\n\npathSpec\n\n\nFSSpec to the file. For passing to \nFT_New_Face_From_FSSpec\n.\n\n\n\nface_index\n\n\nIndex of the face. For passing to \nFT_New_Face_From_FSSpec\n.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_GetFile_From_Mac_ATS_Name\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_GetFile_From_Mac_ATS_Name\n( \nconst\n \nchar\n*  fontName,\n                                FSSpec*      pathSpec,\n                                \nFT_Long\n*     face_index )\n                              FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\nReturn an FSSpec for the disk file containing the named font.\n\n\ninput\n\n\n\n\n\nfontName\n\n\nMac OS name of the font in ATS framework.\n\n\n\n\n\n\noutput\n\n\n\n\n\npathSpec\n\n\nFSSpec to the file. For passing to \nFT_New_Face_From_FSSpec\n.\n\n\n\nface_index\n\n\nIndex of the face. For passing to \nFT_New_Face_From_FSSpec\n.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_GetFilePath_From_Mac_ATS_Name\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_GetFilePath_From_Mac_ATS_Name\n( \nconst\n \nchar\n*  fontName,\n                                    UInt8*       path,\n                                    UInt32       maxPathSize,\n                                    \nFT_Long\n*     face_index )\n                                  FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\nReturn a pathname of the disk file and face index for given font name that is handled by ATS framework.\n\n\ninput\n\n\n\n\n\nfontName\n\n\nMac OS name of the font in ATS framework.\n\n\n\n\n\n\noutput\n\n\n\n\n\npath\n\n\nBuffer to store pathname of the file. For passing to \nFT_New_Face\n. The client must allocate this buffer before calling this function.\n\n\n\nmaxPathSize\n\n\nLengths of the buffer \u2018path\u2019 that client allocated.\n\n\n\nface_index\n\n\nIndex of the face. For passing to \nFT_New_Face\n.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_New_Face_From_FSSpec\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Face_From_FSSpec\n( \nFT_Library\n     library,\n                           \nconst\n FSSpec  *spec,\n                           \nFT_Long\n        face_index,\n                           \nFT_Face\n       *aface )\n                         FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\nCreate a new face object from a given resource and typeface index using an FSSpec to the font file.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\ninput\n\n\n\n\n\nspec\n\n\nFSSpec to the font file.\n\n\n\nface_index\n\n\nThe index of the face within the resource. The first face has index\u00a00.\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nFT_New_Face_From_FSSpec\n is identical to \nFT_New_Face\n except it accepts an FSSpec instead of a path.\n\n\n\n\n\nFT_New_Face_From_FSRef\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Face_From_FSRef\n( \nFT_Library\n    library,\n                          \nconst\n FSRef  *ref,\n                          \nFT_Long\n       face_index,\n                          \nFT_Face\n      *aface )\n                        FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\nCreate a new face object from a given resource and typeface index using an FSRef to the font file.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\ninput\n\n\n\n\n\nspec\n\n\nFSRef to the font file.\n\n\n\nface_index\n\n\nThe index of the face within the resource. The first face has index\u00a00.\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nFT_New_Face_From_FSRef\n is identical to \nFT_New_Face\n except it accepts an FSRef instead of a path.",
            "title": "Mac Specific Interface"
        },
        {
            "location": "/ft2-mac_specific/#mac-specific-interface",
            "text": "",
            "title": "Mac Specific Interface"
        },
        {
            "location": "/ft2-mac_specific/#synopsis",
            "text": "The following definitions are only available if FreeType is compiled on a Macintosh.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-mac_specific/#ft_new_face_from_fond",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_New_Face_From_FOND (  FT_Library   library,\n                         Handle      fond,\n                          FT_Long      face_index,\n                          FT_Face     *aface )\n                       FT_DEPRECATED_ATTRIBUTE;  Create a new face object from a FOND resource.",
            "title": "FT_New_Face_From_FOND"
        },
        {
            "location": "/ft2-mac_specific/#ft_getfile_from_mac_name",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_GetFile_From_Mac_Name (  const   char *  fontName,\n                            FSSpec*      pathSpec,\n                             FT_Long *     face_index )\n                          FT_DEPRECATED_ATTRIBUTE;  Return an FSSpec for the disk file containing the named font.",
            "title": "FT_GetFile_From_Mac_Name"
        },
        {
            "location": "/ft2-mac_specific/#ft_getfile_from_mac_ats_name",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_GetFile_From_Mac_ATS_Name (  const   char *  fontName,\n                                FSSpec*      pathSpec,\n                                 FT_Long *     face_index )\n                              FT_DEPRECATED_ATTRIBUTE;  Return an FSSpec for the disk file containing the named font.",
            "title": "FT_GetFile_From_Mac_ATS_Name"
        },
        {
            "location": "/ft2-mac_specific/#ft_getfilepath_from_mac_ats_name",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_GetFilePath_From_Mac_ATS_Name (  const   char *  fontName,\n                                    UInt8*       path,\n                                    UInt32       maxPathSize,\n                                     FT_Long *     face_index )\n                                  FT_DEPRECATED_ATTRIBUTE;  Return a pathname of the disk file and face index for given font name that is handled by ATS framework.",
            "title": "FT_GetFilePath_From_Mac_ATS_Name"
        },
        {
            "location": "/ft2-mac_specific/#ft_new_face_from_fsspec",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_New_Face_From_FSSpec (  FT_Library      library,\n                            const  FSSpec  *spec,\n                            FT_Long         face_index,\n                            FT_Face        *aface )\n                         FT_DEPRECATED_ATTRIBUTE;  Create a new face object from a given resource and typeface index using an FSSpec to the font file.",
            "title": "FT_New_Face_From_FSSpec"
        },
        {
            "location": "/ft2-mac_specific/#ft_new_face_from_fsref",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_New_Face_From_FSRef (  FT_Library     library,\n                           const  FSRef  *ref,\n                           FT_Long        face_index,\n                           FT_Face       *aface )\n                        FT_DEPRECATED_ATTRIBUTE;  Create a new face object from a given resource and typeface index using an FSRef to the font file.",
            "title": "FT_New_Face_From_FSRef"
        },
        {
            "location": "/ft2-sizes_management/",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Size Management\n\n\n\n\nSize Management\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nWhen creating a new face object (e.g., with \nFT_New_Face\n), an \nFT_Size\n object is automatically created and used to store all pixel-size dependent information, available in the \u2018face->size\u2019 field.\n\n\nIt is however possible to create more sizes for a given face, mostly in order to manage several character pixel sizes of the same font family and style. See \nFT_New_Size\n and \nFT_Done_Size\n.\n\n\nNote that \nFT_Set_Pixel_Sizes\n and \nFT_Set_Char_Size\n only modify the contents of the current \u2018active\u2019 size; you thus need to use \nFT_Activate_Size\n to change it.\n\n\n99% of applications won't need the functions provided here, especially if they use the caching sub-system, so be cautious when using these.\n\n\nFT_New_Size\n\u00b6\n\n\nDefined in FT_SIZES_H (freetype/ftsizes.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Size\n( \nFT_Face\n   face,\n               \nFT_Size\n*  size );\n\n\n\n\nCreate a new size object from a given face object.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a parent face object.\n\n\n\n\n\n\noutput\n\n\n\n\n\nasize\n\n\nA handle to a new size object.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou need to call \nFT_Activate_Size\n in order to select the new size for upcoming calls to \nFT_Set_Pixel_Sizes\n, \nFT_Set_Char_Size\n, \nFT_Load_Glyph\n, \nFT_Load_Char\n, etc.\n\n\n\n\n\nFT_Done_Size\n\u00b6\n\n\nDefined in FT_SIZES_H (freetype/ftsizes.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Done_Size\n( \nFT_Size\n  size );\n\n\n\n\nDiscard a given size object. Note that \nFT_Done_Face\n automatically discards all size objects allocated with \nFT_New_Size\n.\n\n\ninput\n\n\n\n\n\nsize\n\n\nA handle to a target size object.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Activate_Size\n\u00b6\n\n\nDefined in FT_SIZES_H (freetype/ftsizes.h).\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Activate_Size\n( \nFT_Size\n  size );\n\n\n\n\nEven though it is possible to create several size objects for a given face (see \nFT_New_Size\n for details), functions like \nFT_Load_Glyph\n or \nFT_Load_Char\n only use the one that has been activated last to determine the \u2018current character pixel size\u2019.\n\n\nThis function can be used to \u2018activate\u2019 a previously created size object.\n\n\ninput\n\n\n\n\n\nsize\n\n\nA handle to a target size object.\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIf \u2018face\u2019 is the size's parent face object, this function changes the value of \u2018face->size\u2019 to the input size handle.",
            "title": "Size Management"
        },
        {
            "location": "/ft2-sizes_management/#size-management",
            "text": "",
            "title": "Size Management"
        },
        {
            "location": "/ft2-sizes_management/#synopsis",
            "text": "When creating a new face object (e.g., with  FT_New_Face ), an  FT_Size  object is automatically created and used to store all pixel-size dependent information, available in the \u2018face->size\u2019 field.  It is however possible to create more sizes for a given face, mostly in order to manage several character pixel sizes of the same font family and style. See  FT_New_Size  and  FT_Done_Size .  Note that  FT_Set_Pixel_Sizes  and  FT_Set_Char_Size  only modify the contents of the current \u2018active\u2019 size; you thus need to use  FT_Activate_Size  to change it.  99% of applications won't need the functions provided here, especially if they use the caching sub-system, so be cautious when using these.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-sizes_management/#ft_new_size",
            "text": "Defined in FT_SIZES_H (freetype/ftsizes.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_New_Size (  FT_Face    face,\n                FT_Size *  size );  Create a new size object from a given face object.",
            "title": "FT_New_Size"
        },
        {
            "location": "/ft2-sizes_management/#ft_done_size",
            "text": "Defined in FT_SIZES_H (freetype/ftsizes.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Done_Size (  FT_Size   size );  Discard a given size object. Note that  FT_Done_Face  automatically discards all size objects allocated with  FT_New_Size .",
            "title": "FT_Done_Size"
        },
        {
            "location": "/ft2-sizes_management/#ft_activate_size",
            "text": "Defined in FT_SIZES_H (freetype/ftsizes.h).  \n  FT_EXPORT(  FT_Error  )\n   FT_Activate_Size (  FT_Size   size );  Even though it is possible to create several size objects for a given face (see  FT_New_Size  for details), functions like  FT_Load_Glyph  or  FT_Load_Char  only use the one that has been activated last to determine the \u2018current character pixel size\u2019.  This function can be used to \u2018activate\u2019 a previously created size object.",
            "title": "FT_Activate_Size"
        },
        {
            "location": "/ft2-header_file_macros/",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Header File Macros\n\n\n\n\nHeader File Macros\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe following macros are defined to the name of specific FreeType\u00a02 header files. They can be used directly in #include statements as in:\n\n  #include FT_FREETYPE_H\n  #include FT_MULTIPLE_MASTERS_H\n  #include FT_GLYPH_H\n\n\n\nThere are several reasons why we are now using macros to name public header files. The first one is that such macros are not limited to the infamous 8.3\u00a0naming rule required by DOS (and \u2018FT_MULTIPLE_MASTERS_H\u2019 is a lot more meaningful than \u2018ftmm.h\u2019).\n\n\nThe second reason is that it allows for more flexibility in the way FreeType\u00a02 is installed on a given system.\n\n\nFT_CONFIG_CONFIG_H\n\u00b6\n\n\n\n#ifndef \nFT_CONFIG_CONFIG_H\n\n#define \nFT_CONFIG_CONFIG_H\n  <freetype/config/ftconfig.h>\n#endif\n\n\n\n\nA macro used in #include statements to name the file containing FreeType\u00a02 configuration data.\n\n\n\n\n\nFT_CONFIG_STANDARD_LIBRARY_H\n\u00b6\n\n\n\n#ifndef \nFT_CONFIG_STANDARD_LIBRARY_H\n\n#define \nFT_CONFIG_STANDARD_LIBRARY_H\n  <freetype/config/ftstdlib.h>\n#endif\n\n\n\n\nA macro used in #include statements to name the file containing FreeType\u00a02 interface to the standard C library functions.\n\n\n\n\n\nFT_CONFIG_OPTIONS_H\n\u00b6\n\n\n\n#ifndef \nFT_CONFIG_OPTIONS_H\n\n#define \nFT_CONFIG_OPTIONS_H\n  <freetype/config/ftoption.h>\n#endif\n\n\n\n\nA macro used in #include statements to name the file containing FreeType\u00a02 project-specific configuration options.\n\n\n\n\n\nFT_CONFIG_MODULES_H\n\u00b6\n\n\n\n#ifndef \nFT_CONFIG_MODULES_H\n\n#define \nFT_CONFIG_MODULES_H\n  <freetype/config/ftmodule.h>\n#endif\n\n\n\n\nA macro used in #include statements to name the file containing the list of FreeType\u00a02 modules that are statically linked to new library instances in \nFT_Init_FreeType\n.\n\n\n\n\n\nFT_FREETYPE_H\n\u00b6\n\n\n\n#define \nFT_FREETYPE_H\n  <freetype/freetype.h>\n\n\n\n\nA macro used in #include statements to name the file containing the base FreeType\u00a02 API.\n\n\n\n\n\nFT_ERRORS_H\n\u00b6\n\n\n\n#define \nFT_ERRORS_H\n  <freetype/fterrors.h>\n\n\n\n\nA macro used in #include statements to name the file containing the list of FreeType\u00a02 error codes (and messages).\n\n\nIt is included by \nFT_FREETYPE_H\n.\n\n\n\n\n\nFT_MODULE_ERRORS_H\n\u00b6\n\n\n\n#define \nFT_MODULE_ERRORS_H\n  <freetype/ftmoderr.h>\n\n\n\n\nA macro used in #include statements to name the file containing the list of FreeType\u00a02 module error offsets (and messages).\n\n\n\n\n\nFT_SYSTEM_H\n\u00b6\n\n\n\n#define \nFT_SYSTEM_H\n  <freetype/ftsystem.h>\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 interface to low-level operations (i.e., memory management and stream i/o).\n\n\nIt is included by \nFT_FREETYPE_H\n.\n\n\n\n\n\nFT_IMAGE_H\n\u00b6\n\n\n\n#define \nFT_IMAGE_H\n  <freetype/ftimage.h>\n\n\n\n\nA macro used in #include statements to name the file containing type definitions related to glyph images (i.e., bitmaps, outlines, scan-converter parameters).\n\n\nIt is included by \nFT_FREETYPE_H\n.\n\n\n\n\n\nFT_TYPES_H\n\u00b6\n\n\n\n#define \nFT_TYPES_H\n  <freetype/fttypes.h>\n\n\n\n\nA macro used in #include statements to name the file containing the basic data types defined by FreeType\u00a02.\n\n\nIt is included by \nFT_FREETYPE_H\n.\n\n\n\n\n\nFT_LIST_H\n\u00b6\n\n\n\n#define \nFT_LIST_H\n  <freetype/ftlist.h>\n\n\n\n\nA macro used in #include statements to name the file containing the list management API of FreeType\u00a02.\n\n\n(Most applications will never need to include this file.)\n\n\n\n\n\nFT_OUTLINE_H\n\u00b6\n\n\n\n#define \nFT_OUTLINE_H\n  <freetype/ftoutln.h>\n\n\n\n\nA macro used in #include statements to name the file containing the scalable outline management API of FreeType\u00a02.\n\n\n\n\n\nFT_SIZES_H\n\u00b6\n\n\n\n#define \nFT_SIZES_H\n  <freetype/ftsizes.h>\n\n\n\n\nA macro used in #include statements to name the file containing the API which manages multiple \nFT_Size\n objects per face.\n\n\n\n\n\nFT_MODULE_H\n\u00b6\n\n\n\n#define \nFT_MODULE_H\n  <freetype/ftmodapi.h>\n\n\n\n\nA macro used in #include statements to name the file containing the module management API of FreeType\u00a02.\n\n\n\n\n\nFT_RENDER_H\n\u00b6\n\n\n\n#define \nFT_RENDER_H\n  <freetype/ftrender.h>\n\n\n\n\nA macro used in #include statements to name the file containing the renderer module management API of FreeType\u00a02.\n\n\n\n\n\nFT_DRIVER_H\n\u00b6\n\n\n\n#define \nFT_DRIVER_H\n  <freetype/ftdriver.h>\n\n\n\n\nA macro used in #include statements to name the file containing structures and macros related to the driver modules.\n\n\n\n\n\nFT_AUTOHINTER_H\n\u00b6\n\n\n\n#define \nFT_AUTOHINTER_H\n  \nFT_DRIVER_H\n\n\n\n\n\nA macro used in #include statements to name the file containing structures and macros related to the auto-hinting module.\n\n\nDeprecated since version 2.9; use \nFT_DRIVER_H\n instead.\n\n\n\n\n\nFT_CFF_DRIVER_H\n\u00b6\n\n\n\n#define \nFT_CFF_DRIVER_H\n  \nFT_DRIVER_H\n\n\n\n\n\nA macro used in #include statements to name the file containing structures and macros related to the CFF driver module.\n\n\nDeprecated since version 2.9; use \nFT_DRIVER_H\n instead.\n\n\n\n\n\nFT_TRUETYPE_DRIVER_H\n\u00b6\n\n\n\n#define \nFT_TRUETYPE_DRIVER_H\n  \nFT_DRIVER_H\n\n\n\n\n\nA macro used in #include statements to name the file containing structures and macros related to the TrueType driver module.\n\n\nDeprecated since version 2.9; use \nFT_DRIVER_H\n instead.\n\n\n\n\n\nFT_PCF_DRIVER_H\n\u00b6\n\n\n\n#define \nFT_PCF_DRIVER_H\n  \nFT_DRIVER_H\n\n\n\n\n\nA macro used in #include statements to name the file containing structures and macros related to the PCF driver module.\n\n\nDeprecated since version 2.9; use \nFT_DRIVER_H\n instead.\n\n\n\n\n\nFT_TYPE1_TABLES_H\n\u00b6\n\n\n\n#define \nFT_TYPE1_TABLES_H\n  <freetype/t1tables.h>\n\n\n\n\nA macro used in #include statements to name the file containing the types and API specific to the Type\u00a01 format.\n\n\n\n\n\nFT_TRUETYPE_IDS_H\n\u00b6\n\n\n\n#define \nFT_TRUETYPE_IDS_H\n  <freetype/ttnameid.h>\n\n\n\n\nA macro used in #include statements to name the file containing the enumeration values which identify name strings, languages, encodings, etc. This file really contains a \nlarge\n set of constant macro definitions, taken from the TrueType and OpenType specifications.\n\n\n\n\n\nFT_TRUETYPE_TABLES_H\n\u00b6\n\n\n\n#define \nFT_TRUETYPE_TABLES_H\n  <freetype/tttables.h>\n\n\n\n\nA macro used in #include statements to name the file containing the types and API specific to the TrueType (as well as OpenType) format.\n\n\n\n\n\nFT_TRUETYPE_TAGS_H\n\u00b6\n\n\n\n#define \nFT_TRUETYPE_TAGS_H\n  <freetype/tttags.h>\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of TrueType four-byte \u2018tags\u2019 which identify blocks in SFNT-based font formats (i.e., TrueType and OpenType).\n\n\n\n\n\nFT_BDF_H\n\u00b6\n\n\n\n#define \nFT_BDF_H\n  <freetype/ftbdf.h>\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which accesses BDF-specific strings from a face.\n\n\n\n\n\nFT_CID_H\n\u00b6\n\n\n\n#define \nFT_CID_H\n  <freetype/ftcid.h>\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which access CID font information from a face.\n\n\n\n\n\nFT_GZIP_H\n\u00b6\n\n\n\n#define \nFT_GZIP_H\n  <freetype/ftgzip.h>\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which supports gzip-compressed files.\n\n\n\n\n\nFT_LZW_H\n\u00b6\n\n\n\n#define \nFT_LZW_H\n  <freetype/ftlzw.h>\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which supports LZW-compressed files.\n\n\n\n\n\nFT_BZIP2_H\n\u00b6\n\n\n\n#define \nFT_BZIP2_H\n  <freetype/ftbzip2.h>\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which supports bzip2-compressed files.\n\n\n\n\n\nFT_WINFONTS_H\n\u00b6\n\n\n\n#define \nFT_WINFONTS_H\n   <freetype/ftwinfnt.h>\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which supports Windows FNT files.\n\n\n\n\n\nFT_GLYPH_H\n\u00b6\n\n\n\n#define \nFT_GLYPH_H\n  <freetype/ftglyph.h>\n\n\n\n\nA macro used in #include statements to name the file containing the API of the optional glyph management component.\n\n\n\n\n\nFT_BITMAP_H\n\u00b6\n\n\n\n#define \nFT_BITMAP_H\n  <freetype/ftbitmap.h>\n\n\n\n\nA macro used in #include statements to name the file containing the API of the optional bitmap conversion component.\n\n\n\n\n\nFT_BBOX_H\n\u00b6\n\n\n\n#define \nFT_BBOX_H\n  <freetype/ftbbox.h>\n\n\n\n\nA macro used in #include statements to name the file containing the API of the optional exact bounding box computation routines.\n\n\n\n\n\nFT_CACHE_H\n\u00b6\n\n\n\n#define \nFT_CACHE_H\n  <freetype/ftcache.h>\n\n\n\n\nA macro used in #include statements to name the file containing the API of the optional FreeType\u00a02 cache sub-system.\n\n\n\n\n\nFT_MAC_H\n\u00b6\n\n\n\n#define \nFT_MAC_H\n  <freetype/ftmac.h>\n\n\n\n\nA macro used in #include statements to name the file containing the Macintosh-specific FreeType\u00a02 API. The latter is used to access fonts embedded in resource forks.\n\n\nThis header file must be explicitly included by client applications compiled on the Mac (note that the base API still works though).\n\n\n\n\n\nFT_MULTIPLE_MASTERS_H\n\u00b6\n\n\n\n#define \nFT_MULTIPLE_MASTERS_H\n  <freetype/ftmm.h>\n\n\n\n\nA macro used in #include statements to name the file containing the optional multiple-masters management API of FreeType\u00a02.\n\n\n\n\n\nFT_SFNT_NAMES_H\n\u00b6\n\n\n\n#define \nFT_SFNT_NAMES_H\n  <freetype/ftsnames.h>\n\n\n\n\nA macro used in #include statements to name the file containing the optional FreeType\u00a02 API which accesses embedded \u2018name\u2019 strings in SFNT-based font formats (i.e., TrueType and OpenType).\n\n\n\n\n\nFT_OPENTYPE_VALIDATE_H\n\u00b6\n\n\n\n#define \nFT_OPENTYPE_VALIDATE_H\n  <freetype/ftotval.h>\n\n\n\n\nA macro used in #include statements to name the file containing the optional FreeType\u00a02 API which validates OpenType tables (BASE, GDEF, GPOS, GSUB, JSTF).\n\n\n\n\n\nFT_GX_VALIDATE_H\n\u00b6\n\n\n\n#define \nFT_GX_VALIDATE_H\n  <freetype/ftgxval.h>\n\n\n\n\nA macro used in #include statements to name the file containing the optional FreeType\u00a02 API which validates TrueTypeGX/AAT tables (feat, mort, morx, bsln, just, kern, opbd, trak, prop).\n\n\n\n\n\nFT_PFR_H\n\u00b6\n\n\n\n#define \nFT_PFR_H\n  <freetype/ftpfr.h>\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which accesses PFR-specific data.\n\n\n\n\n\nFT_STROKER_H\n\u00b6\n\n\n\n#define \nFT_STROKER_H\n  <freetype/ftstroke.h>\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which provides functions to stroke outline paths.\n\n\n\n\n\nFT_SYNTHESIS_H\n\u00b6\n\n\n\n#define \nFT_SYNTHESIS_H\n  <freetype/ftsynth.h>\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which performs artificial obliquing and emboldening.\n\n\n\n\n\nFT_FONT_FORMATS_H\n\u00b6\n\n\n\n#define \nFT_FONT_FORMATS_H\n  <freetype/ftfntfmt.h>\n\n  /* deprecated */\n#define FT_XFREE86_H  \nFT_FONT_FORMATS_H\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which provides functions specific to font formats.\n\n\n\n\n\nFT_TRIGONOMETRY_H\n\u00b6\n\n\n\n#define \nFT_TRIGONOMETRY_H\n  <freetype/fttrigon.h>\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which performs trigonometric computations (e.g., cosines and arc tangents).\n\n\n\n\n\nFT_LCD_FILTER_H\n\u00b6\n\n\n\n#define \nFT_LCD_FILTER_H\n  <freetype/ftlcdfil.h>\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which performs color filtering for subpixel rendering.\n\n\n\n\n\nFT_INCREMENTAL_H\n\u00b6\n\n\n\n#define \nFT_INCREMENTAL_H\n  <freetype/ftincrem.h>\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which performs incremental glyph loading.\n\n\n\n\n\nFT_GASP_H\n\u00b6\n\n\n\n#define \nFT_GASP_H\n  <freetype/ftgasp.h>\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which returns entries from the TrueType GASP table.\n\n\n\n\n\nFT_ADVANCES_H\n\u00b6\n\n\n\n#define \nFT_ADVANCES_H\n  <freetype/ftadvanc.h>\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which returns individual and ranged glyph advances.\n\n\n\n\n\nFT_COLOR_H\n\u00b6\n\n\n\n#define \nFT_COLOR_H\n  <freetype/ftcolor.h>\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which handles the OpenType CPAL table.",
            "title": "Header File Macros"
        },
        {
            "location": "/ft2-header_file_macros/#header-file-macros",
            "text": "",
            "title": "Header File Macros"
        },
        {
            "location": "/ft2-header_file_macros/#synopsis",
            "text": "The following macros are defined to the name of specific FreeType\u00a02 header files. They can be used directly in #include statements as in:   #include FT_FREETYPE_H\n  #include FT_MULTIPLE_MASTERS_H\n  #include FT_GLYPH_H  There are several reasons why we are now using macros to name public header files. The first one is that such macros are not limited to the infamous 8.3\u00a0naming rule required by DOS (and \u2018FT_MULTIPLE_MASTERS_H\u2019 is a lot more meaningful than \u2018ftmm.h\u2019).  The second reason is that it allows for more flexibility in the way FreeType\u00a02 is installed on a given system.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-header_file_macros/#ft_config_config_h",
            "text": "#ifndef  FT_CONFIG_CONFIG_H \n#define  FT_CONFIG_CONFIG_H   <freetype/config/ftconfig.h>\n#endif  A macro used in #include statements to name the file containing FreeType\u00a02 configuration data.",
            "title": "FT_CONFIG_CONFIG_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_config_standard_library_h",
            "text": "#ifndef  FT_CONFIG_STANDARD_LIBRARY_H \n#define  FT_CONFIG_STANDARD_LIBRARY_H   <freetype/config/ftstdlib.h>\n#endif  A macro used in #include statements to name the file containing FreeType\u00a02 interface to the standard C library functions.",
            "title": "FT_CONFIG_STANDARD_LIBRARY_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_config_options_h",
            "text": "#ifndef  FT_CONFIG_OPTIONS_H \n#define  FT_CONFIG_OPTIONS_H   <freetype/config/ftoption.h>\n#endif  A macro used in #include statements to name the file containing FreeType\u00a02 project-specific configuration options.",
            "title": "FT_CONFIG_OPTIONS_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_config_modules_h",
            "text": "#ifndef  FT_CONFIG_MODULES_H \n#define  FT_CONFIG_MODULES_H   <freetype/config/ftmodule.h>\n#endif  A macro used in #include statements to name the file containing the list of FreeType\u00a02 modules that are statically linked to new library instances in  FT_Init_FreeType .",
            "title": "FT_CONFIG_MODULES_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_freetype_h",
            "text": "#define  FT_FREETYPE_H   <freetype/freetype.h>  A macro used in #include statements to name the file containing the base FreeType\u00a02 API.",
            "title": "FT_FREETYPE_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_errors_h",
            "text": "#define  FT_ERRORS_H   <freetype/fterrors.h>  A macro used in #include statements to name the file containing the list of FreeType\u00a02 error codes (and messages).  It is included by  FT_FREETYPE_H .",
            "title": "FT_ERRORS_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_module_errors_h",
            "text": "#define  FT_MODULE_ERRORS_H   <freetype/ftmoderr.h>  A macro used in #include statements to name the file containing the list of FreeType\u00a02 module error offsets (and messages).",
            "title": "FT_MODULE_ERRORS_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_system_h",
            "text": "#define  FT_SYSTEM_H   <freetype/ftsystem.h>  A macro used in #include statements to name the file containing the FreeType\u00a02 interface to low-level operations (i.e., memory management and stream i/o).  It is included by  FT_FREETYPE_H .",
            "title": "FT_SYSTEM_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_image_h",
            "text": "#define  FT_IMAGE_H   <freetype/ftimage.h>  A macro used in #include statements to name the file containing type definitions related to glyph images (i.e., bitmaps, outlines, scan-converter parameters).  It is included by  FT_FREETYPE_H .",
            "title": "FT_IMAGE_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_types_h",
            "text": "#define  FT_TYPES_H   <freetype/fttypes.h>  A macro used in #include statements to name the file containing the basic data types defined by FreeType\u00a02.  It is included by  FT_FREETYPE_H .",
            "title": "FT_TYPES_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_list_h",
            "text": "#define  FT_LIST_H   <freetype/ftlist.h>  A macro used in #include statements to name the file containing the list management API of FreeType\u00a02.  (Most applications will never need to include this file.)",
            "title": "FT_LIST_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_outline_h",
            "text": "#define  FT_OUTLINE_H   <freetype/ftoutln.h>  A macro used in #include statements to name the file containing the scalable outline management API of FreeType\u00a02.",
            "title": "FT_OUTLINE_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_sizes_h",
            "text": "#define  FT_SIZES_H   <freetype/ftsizes.h>  A macro used in #include statements to name the file containing the API which manages multiple  FT_Size  objects per face.",
            "title": "FT_SIZES_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_module_h",
            "text": "#define  FT_MODULE_H   <freetype/ftmodapi.h>  A macro used in #include statements to name the file containing the module management API of FreeType\u00a02.",
            "title": "FT_MODULE_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_render_h",
            "text": "#define  FT_RENDER_H   <freetype/ftrender.h>  A macro used in #include statements to name the file containing the renderer module management API of FreeType\u00a02.",
            "title": "FT_RENDER_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_driver_h",
            "text": "#define  FT_DRIVER_H   <freetype/ftdriver.h>  A macro used in #include statements to name the file containing structures and macros related to the driver modules.",
            "title": "FT_DRIVER_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_autohinter_h",
            "text": "#define  FT_AUTOHINTER_H    FT_DRIVER_H   A macro used in #include statements to name the file containing structures and macros related to the auto-hinting module.  Deprecated since version 2.9; use  FT_DRIVER_H  instead.",
            "title": "FT_AUTOHINTER_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_cff_driver_h",
            "text": "#define  FT_CFF_DRIVER_H    FT_DRIVER_H   A macro used in #include statements to name the file containing structures and macros related to the CFF driver module.  Deprecated since version 2.9; use  FT_DRIVER_H  instead.",
            "title": "FT_CFF_DRIVER_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_truetype_driver_h",
            "text": "#define  FT_TRUETYPE_DRIVER_H    FT_DRIVER_H   A macro used in #include statements to name the file containing structures and macros related to the TrueType driver module.  Deprecated since version 2.9; use  FT_DRIVER_H  instead.",
            "title": "FT_TRUETYPE_DRIVER_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_pcf_driver_h",
            "text": "#define  FT_PCF_DRIVER_H    FT_DRIVER_H   A macro used in #include statements to name the file containing structures and macros related to the PCF driver module.  Deprecated since version 2.9; use  FT_DRIVER_H  instead.",
            "title": "FT_PCF_DRIVER_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_type1_tables_h",
            "text": "#define  FT_TYPE1_TABLES_H   <freetype/t1tables.h>  A macro used in #include statements to name the file containing the types and API specific to the Type\u00a01 format.",
            "title": "FT_TYPE1_TABLES_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_truetype_ids_h",
            "text": "#define  FT_TRUETYPE_IDS_H   <freetype/ttnameid.h>  A macro used in #include statements to name the file containing the enumeration values which identify name strings, languages, encodings, etc. This file really contains a  large  set of constant macro definitions, taken from the TrueType and OpenType specifications.",
            "title": "FT_TRUETYPE_IDS_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_truetype_tables_h",
            "text": "#define  FT_TRUETYPE_TABLES_H   <freetype/tttables.h>  A macro used in #include statements to name the file containing the types and API specific to the TrueType (as well as OpenType) format.",
            "title": "FT_TRUETYPE_TABLES_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_truetype_tags_h",
            "text": "#define  FT_TRUETYPE_TAGS_H   <freetype/tttags.h>  A macro used in #include statements to name the file containing the definitions of TrueType four-byte \u2018tags\u2019 which identify blocks in SFNT-based font formats (i.e., TrueType and OpenType).",
            "title": "FT_TRUETYPE_TAGS_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_bdf_h",
            "text": "#define  FT_BDF_H   <freetype/ftbdf.h>  A macro used in #include statements to name the file containing the definitions of an API which accesses BDF-specific strings from a face.",
            "title": "FT_BDF_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_cid_h",
            "text": "#define  FT_CID_H   <freetype/ftcid.h>  A macro used in #include statements to name the file containing the definitions of an API which access CID font information from a face.",
            "title": "FT_CID_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_gzip_h",
            "text": "#define  FT_GZIP_H   <freetype/ftgzip.h>  A macro used in #include statements to name the file containing the definitions of an API which supports gzip-compressed files.",
            "title": "FT_GZIP_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_lzw_h",
            "text": "#define  FT_LZW_H   <freetype/ftlzw.h>  A macro used in #include statements to name the file containing the definitions of an API which supports LZW-compressed files.",
            "title": "FT_LZW_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_bzip2_h",
            "text": "#define  FT_BZIP2_H   <freetype/ftbzip2.h>  A macro used in #include statements to name the file containing the definitions of an API which supports bzip2-compressed files.",
            "title": "FT_BZIP2_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_winfonts_h",
            "text": "#define  FT_WINFONTS_H    <freetype/ftwinfnt.h>  A macro used in #include statements to name the file containing the definitions of an API which supports Windows FNT files.",
            "title": "FT_WINFONTS_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_glyph_h",
            "text": "#define  FT_GLYPH_H   <freetype/ftglyph.h>  A macro used in #include statements to name the file containing the API of the optional glyph management component.",
            "title": "FT_GLYPH_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_bitmap_h",
            "text": "#define  FT_BITMAP_H   <freetype/ftbitmap.h>  A macro used in #include statements to name the file containing the API of the optional bitmap conversion component.",
            "title": "FT_BITMAP_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_bbox_h",
            "text": "#define  FT_BBOX_H   <freetype/ftbbox.h>  A macro used in #include statements to name the file containing the API of the optional exact bounding box computation routines.",
            "title": "FT_BBOX_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_cache_h",
            "text": "#define  FT_CACHE_H   <freetype/ftcache.h>  A macro used in #include statements to name the file containing the API of the optional FreeType\u00a02 cache sub-system.",
            "title": "FT_CACHE_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_mac_h",
            "text": "#define  FT_MAC_H   <freetype/ftmac.h>  A macro used in #include statements to name the file containing the Macintosh-specific FreeType\u00a02 API. The latter is used to access fonts embedded in resource forks.  This header file must be explicitly included by client applications compiled on the Mac (note that the base API still works though).",
            "title": "FT_MAC_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_multiple_masters_h",
            "text": "#define  FT_MULTIPLE_MASTERS_H   <freetype/ftmm.h>  A macro used in #include statements to name the file containing the optional multiple-masters management API of FreeType\u00a02.",
            "title": "FT_MULTIPLE_MASTERS_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_sfnt_names_h",
            "text": "#define  FT_SFNT_NAMES_H   <freetype/ftsnames.h>  A macro used in #include statements to name the file containing the optional FreeType\u00a02 API which accesses embedded \u2018name\u2019 strings in SFNT-based font formats (i.e., TrueType and OpenType).",
            "title": "FT_SFNT_NAMES_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_opentype_validate_h",
            "text": "#define  FT_OPENTYPE_VALIDATE_H   <freetype/ftotval.h>  A macro used in #include statements to name the file containing the optional FreeType\u00a02 API which validates OpenType tables (BASE, GDEF, GPOS, GSUB, JSTF).",
            "title": "FT_OPENTYPE_VALIDATE_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_gx_validate_h",
            "text": "#define  FT_GX_VALIDATE_H   <freetype/ftgxval.h>  A macro used in #include statements to name the file containing the optional FreeType\u00a02 API which validates TrueTypeGX/AAT tables (feat, mort, morx, bsln, just, kern, opbd, trak, prop).",
            "title": "FT_GX_VALIDATE_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_pfr_h",
            "text": "#define  FT_PFR_H   <freetype/ftpfr.h>  A macro used in #include statements to name the file containing the FreeType\u00a02 API which accesses PFR-specific data.",
            "title": "FT_PFR_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_stroker_h",
            "text": "#define  FT_STROKER_H   <freetype/ftstroke.h>  A macro used in #include statements to name the file containing the FreeType\u00a02 API which provides functions to stroke outline paths.",
            "title": "FT_STROKER_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_synthesis_h",
            "text": "#define  FT_SYNTHESIS_H   <freetype/ftsynth.h>  A macro used in #include statements to name the file containing the FreeType\u00a02 API which performs artificial obliquing and emboldening.",
            "title": "FT_SYNTHESIS_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_font_formats_h",
            "text": "#define  FT_FONT_FORMATS_H   <freetype/ftfntfmt.h>\n\n  /* deprecated */\n#define FT_XFREE86_H   FT_FONT_FORMATS_H   A macro used in #include statements to name the file containing the FreeType\u00a02 API which provides functions specific to font formats.",
            "title": "FT_FONT_FORMATS_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_trigonometry_h",
            "text": "#define  FT_TRIGONOMETRY_H   <freetype/fttrigon.h>  A macro used in #include statements to name the file containing the FreeType\u00a02 API which performs trigonometric computations (e.g., cosines and arc tangents).",
            "title": "FT_TRIGONOMETRY_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_lcd_filter_h",
            "text": "#define  FT_LCD_FILTER_H   <freetype/ftlcdfil.h>  A macro used in #include statements to name the file containing the FreeType\u00a02 API which performs color filtering for subpixel rendering.",
            "title": "FT_LCD_FILTER_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_incremental_h",
            "text": "#define  FT_INCREMENTAL_H   <freetype/ftincrem.h>  A macro used in #include statements to name the file containing the FreeType\u00a02 API which performs incremental glyph loading.",
            "title": "FT_INCREMENTAL_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_gasp_h",
            "text": "#define  FT_GASP_H   <freetype/ftgasp.h>  A macro used in #include statements to name the file containing the FreeType\u00a02 API which returns entries from the TrueType GASP table.",
            "title": "FT_GASP_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_advances_h",
            "text": "#define  FT_ADVANCES_H   <freetype/ftadvanc.h>  A macro used in #include statements to name the file containing the FreeType\u00a02 API which returns individual and ranged glyph advances.",
            "title": "FT_ADVANCES_H"
        },
        {
            "location": "/ft2-header_file_macros/#ft_color_h",
            "text": "#define  FT_COLOR_H   <freetype/ftcolor.h>  A macro used in #include statements to name the file containing the FreeType\u00a02 API which handles the OpenType CPAL table.",
            "title": "FT_COLOR_H"
        }
    ]
}